
stm32f401Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b70  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001d08  08001d08  00011d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d5c  08001d5c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08001d5c  08001d5c  00011d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d64  08001d64  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d64  08001d64  00011d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d68  08001d68  00011d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000064  08001dd0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08001dd0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000035f0  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000105e  00000000  00000000  000236c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a8  00000000  00000000  00024728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000267  00000000  00000000  00024ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000998  00000000  00000000  00024d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fb9  00000000  00000000  000256cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000068fc  00000000  00000000  00027688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b94  00000000  00000000  0002df84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0002eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000064 	.word	0x20000064
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001cf0 	.word	0x08001cf0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000068 	.word	0x20000068
 80001d4:	08001cf0 	.word	0x08001cf0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <lbd>:
{

}

void lbd(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	static u8 state = GPIO_STATE_HIGH;


	GPIO_SetPinState(GPIO_PORT_B, GPIO_PIN_1, state);
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <lbd+0x2c>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	2101      	movs	r1, #1
 80004e0:	4808      	ldr	r0, [pc, #32]	; (8000504 <lbd+0x30>)
 80004e2:	f000 fdd9 	bl	8001098 <GPIO_SetPinState>
	state = !state;
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <lbd+0x2c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	bf0c      	ite	eq
 80004ee:	2301      	moveq	r3, #1
 80004f0:	2300      	movne	r3, #0
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b02      	ldr	r3, [pc, #8]	; (8000500 <lbd+0x2c>)
 80004f8:	701a      	strb	r2, [r3, #0]
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000000 	.word	0x20000000
 8000504:	40020400 	.word	0x40020400

08000508 <main>:
	LCD_WriteBufferAsync(buffer, 7);
}


int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b098      	sub	sp, #96	; 0x60
 800050c:	af00      	add	r7, sp, #0

    RCC_EnableClk(RCC_CLK_HSE);
 800050e:	2001      	movs	r0, #1
 8000510:	f000 fe5e 	bl	80011d0 <RCC_EnableClk>
    RCC_SetSystemClk(RCC_SYSCLK_HSE);
 8000514:	2001      	movs	r0, #1
 8000516:	f000 fed5 	bl	80012c4 <RCC_SetSystemClk>

    RCC_EnablePeripheral(RCC_GPIOA);
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	f04f 0103 	mov.w	r1, #3
 8000522:	f000 ff0b 	bl	800133c <RCC_EnablePeripheral>
    RCC_EnablePeripheral(RCC_GPIOB);
 8000526:	f04f 0001 	mov.w	r0, #1
 800052a:	f04f 0103 	mov.w	r1, #3
 800052e:	f000 ff05 	bl	800133c <RCC_EnablePeripheral>
    RCC_EnablePeripheral(RCC_USART1);
 8000532:	f04f 0064 	mov.w	r0, #100	; 0x64
 8000536:	f04f 0103 	mov.w	r1, #3
 800053a:	f000 feff 	bl	800133c <RCC_EnablePeripheral>
    RCC_EnablePeripheral(RCC_USART2);
 800053e:	f04f 0051 	mov.w	r0, #81	; 0x51
 8000542:	f04f 0103 	mov.w	r1, #3
 8000546:	f000 fef9 	bl	800133c <RCC_EnablePeripheral>
    RCC_EnablePeripheral(RCC_USART6);
 800054a:	f04f 0065 	mov.w	r0, #101	; 0x65
 800054e:	f04f 0103 	mov.w	r1, #3
 8000552:	f000 fef3 	bl	800133c <RCC_EnablePeripheral>

    NVIC_EnableInterrupt(NVIC_USART2);
 8000556:	f04f 0026 	mov.w	r0, #38	; 0x26
 800055a:	f04f 010f 	mov.w	r1, #15
 800055e:	f000 fe21 	bl	80011a4 <NVIC_EnableInterrupt>



	GPIO_Pin_t ledPin;

	ledPin.Mode = GPIO_MODE_OP_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	657b      	str	r3, [r7, #84]	; 0x54
	ledPin.AF = GPIO_AF_SYSTEM;
 8000566:	2300      	movs	r3, #0
 8000568:	65fb      	str	r3, [r7, #92]	; 0x5c
	ledPin.Pin = GPIO_PIN_1;
 800056a:	2301      	movs	r3, #1
 800056c:	653b      	str	r3, [r7, #80]	; 0x50
	ledPin.Port = GPIO_PORT_B;
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <main+0x114>)
 8000570:	64fb      	str	r3, [r7, #76]	; 0x4c
	ledPin.Speed = GPIO_SPEED_HIGH;
 8000572:	2302      	movs	r3, #2
 8000574:	65bb      	str	r3, [r7, #88]	; 0x58
	GPIO_Init(&ledPin);
 8000576:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fbea 	bl	8000d54 <GPIO_Init>


    GPIO_Pin_t uart2TX;
    GPIO_Pin_t uart2RX;

    uart2TX.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
    uart2TX.AF = GPIO_AF_USART1_2;
 8000584:	2307      	movs	r3, #7
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
    uart2TX.Pin = GPIO_PIN_2;
 8000588:	2302      	movs	r3, #2
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
    uart2TX.Port = GPIO_PORT_A;
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <main+0x118>)
 800058e:	63bb      	str	r3, [r7, #56]	; 0x38
    uart2TX.Speed = GPIO_SPEED_HIGH;
 8000590:	2302      	movs	r3, #2
 8000592:	647b      	str	r3, [r7, #68]	; 0x44

    uart2RX.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
    uart2RX.AF = GPIO_AF_USART1_2;
 8000598:	2307      	movs	r3, #7
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
    uart2RX.Pin = GPIO_PIN_3;
 800059c:	2303      	movs	r3, #3
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
    uart2RX.Port = GPIO_PORT_A;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <main+0x118>)
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    uart2RX.Speed = GPIO_SPEED_HIGH;
 80005a4:	2302      	movs	r3, #2
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30

    GPIO_Init(&uart2TX);
 80005a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fbd1 	bl	8000d54 <GPIO_Init>
    GPIO_Init(&uart2RX);
 80005b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fbcc 	bl	8000d54 <GPIO_Init>

    UART_Config_t uart1Config;
    uart1Config.BaudRate = 9600;
 80005bc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80005c0:	613b      	str	r3, [r7, #16]
    uart1Config.Mode = UART_MODE_TX_RX;
 80005c2:	230c      	movs	r3, #12
 80005c4:	61fb      	str	r3, [r7, #28]
    uart1Config.Parity = UART_PARITY_DISABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
    uart1Config.Sampling = UART_SAMPLING_16;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
    uart1Config.WordLength = UART_WORDLENGTH_8;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

    UART_SetConfig(UART2, &uart1Config);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 ff9d 	bl	8001518 <UART_SetConfig>

    LCD_Init();
 80005de:	f000 faaf 	bl	8000b40 <LCD_Init>
    LED_Init();
 80005e2:	f000 faf7 	bl	8000bd4 <LED_Init>

    UART_LIN_Config_t linConfig;
    linConfig.State = UART_LIN_ENABLED;
 80005e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005ea:	607b      	str	r3, [r7, #4]
    linConfig.BreakDetectLength = UART_LIN_BREAK_DETECTION_11;
 80005ec:	2320      	movs	r3, #32
 80005ee:	60bb      	str	r3, [r7, #8]
    linConfig.BreakDetectInterrupt = UART_LIN_BREAK_INTERRUPT_ENABLED;
 80005f0:	2340      	movs	r3, #64	; 0x40
 80005f2:	60fb      	str	r3, [r7, #12]

    UART_ConfigLIN(UART2, &linConfig);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	2001      	movs	r0, #1
 80005fa:	f001 f88f 	bl	800171c <UART_ConfigLIN>


    UART_SetLBDCallback(UART2, lbd);
 80005fe:	4909      	ldr	r1, [pc, #36]	; (8000624 <main+0x11c>)
 8000600:	2001      	movs	r0, #1
 8000602:	f001 f8f1 	bl	80017e8 <UART_SetLBDCallback>

//    UART_TXLINBreak(UART2);

    blinkingLed_Init();
 8000606:	f000 f81d 	bl	8000644 <blinkingLed_Init>

    SCHED_Init();
 800060a:	f001 fadd 	bl	8001bc8 <SCHED_Init>
    SCHED_Start();
 800060e:	f001 fb0d 	bl	8001c2c <SCHED_Start>

    return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3760      	adds	r7, #96	; 0x60
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40020400 	.word	0x40020400
 8000620:	40020000 	.word	0x40020000
 8000624:	080004d5 	.word	0x080004d5

08000628 <lcdApp>:


void lcdApp(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
//	UART_TXByte(UART2, 'A');

//	UART_TXBufferAsyncZC(UART2, "Ahmed\n\r", 7, fun);

	UART_TXLINBreak(UART2);
 800062c:	2001      	movs	r0, #1
 800062e:	f001 f8b1 	bl	8001794 <UART_TXLINBreak>

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}

08000636 <uartApp>:

void uartApp(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
//	else if(input == '1')
//	{
//		LED_SetState(LED_ONE, LED_STATE_ON);
//		UART_RXBufferAsyncZC(UART2, buffer, 7, rxCB);
//	}
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <blinkingLed_Init>:
/*                                  IMPLEMENTATION                           	*/
/* ============================================================================ */


void blinkingLed_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
    RCC_EnablePeripheral(RCC_GPIOC);
 8000648:	f04f 0002 	mov.w	r0, #2
 800064c:	f04f 0103 	mov.w	r1, #3
 8000650:	f000 fe74 	bl	800133c <RCC_EnablePeripheral>
    LED_Init();
 8000654:	f000 fabe 	bl	8000bd4 <LED_Init>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <blinkingLed_Update>:

void blinkingLed_Update(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    LED_SetState(BLINKING_LED, state);
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <blinkingLed_Update+0x28>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fb30 	bl	8000ccc <LED_SetState>
    state = !state;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <blinkingLed_Update+0x28>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf0c      	ite	eq
 8000674:	2301      	moveq	r3, #1
 8000676:	2300      	movne	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	4b01      	ldr	r3, [pc, #4]	; (8000684 <blinkingLed_Update+0x28>)
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000080 	.word	0x20000080

08000688 <Latch>:
 * It also handles the case of 8-bit mode and 4-bit mode
 * 
 * @param byte The byte to be written on LCD pins
 */
static void Latch(u8 byte)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
    #endif

    static u8 EnablePinState = ENABLE_PIN_LOW;      /* State of the Enable Pin */
    u8 iter;

    if(EnablePinState == ENABLE_PIN_LOW)
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <Latch+0x8c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d125      	bne.n	80006e6 <Latch+0x5e>
    {
        for(iter = 0; iter < LCD_PINS_NUM; iter++)
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]
 800069e:	e01b      	b.n	80006d8 <Latch+0x50>
            /* set the lcd pin state with the value corresponding to the bit in the sent byte */

            #if LCD_MODE == LCD_8_BIT_MODE
            GPIO_SetPinState( LCD_Pins[iter].Port, LCD_Pins[iter].Pin, (byte >> iter)&1 );
            #elif LCD_MODE == LCD_4_BIT_MODE
            GPIO_SetPinState( LCD_Pins[iter].Port, LCD_Pins[iter].Pin, (byte >> (iter+currNibble))&1 );
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <Latch+0x90>)
 80006a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <Latch+0x90>)
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	4413      	add	r3, r2
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	461c      	mov	r4, r3
 80006b4:	79fa      	ldrb	r2, [r7, #7]
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	4918      	ldr	r1, [pc, #96]	; (800071c <Latch+0x94>)
 80006ba:	7809      	ldrb	r1, [r1, #0]
 80006bc:	440b      	add	r3, r1
 80006be:	fa42 f303 	asr.w	r3, r2, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	4621      	mov	r1, r4
 80006ce:	f000 fce3 	bl	8001098 <GPIO_SetPinState>
        for(iter = 0; iter < LCD_PINS_NUM; iter++)
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	3301      	adds	r3, #1
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d9e0      	bls.n	80006a0 <Latch+0x18>
            #endif

        }

        EnablePinState = ENABLE_PIN_HIGH;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <Latch+0x8c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e00b      	b.n	80006fe <Latch+0x76>
    }
    else
    {
        EnablePinState = ENABLE_PIN_LOW;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <Latch+0x8c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
        #if LCD_MODE == LCD_4_BIT_MODE
        /* Change the Nibble to be latched to the opposite Nibble
            Since in 4-bit mode, the high nibble is handled first then
            low nibble, then each time a nibble is latched we need to change
            the nibble to be latched to the opposite nibble */
        currNibble = (currNibble == HIGH_NIBBLE)? LOW_NIBBLE : HIGH_NIBBLE;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <Latch+0x94>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d101      	bne.n	80006f8 <Latch+0x70>
 80006f4:	2200      	movs	r2, #0
 80006f6:	e000      	b.n	80006fa <Latch+0x72>
 80006f8:	2204      	movs	r2, #4
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <Latch+0x94>)
 80006fc:	701a      	strb	r2, [r3, #0]
        #endif
    }
    GPIO_SetPinState(LCD_PORT_E, LCD_PIN_E, EnablePinState);
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <Latch+0x8c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	210a      	movs	r1, #10
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <Latch+0x98>)
 8000708:	f000 fcc6 	bl	8001098 <GPIO_SetPinState>
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	20000098 	.word	0x20000098
 8000718:	08001d24 	.word	0x08001d24
 800071c:	20000001 	.word	0x20000001
 8000720:	40020000 	.word	0x40020000

08000724 <WriteCommand>:


static void WriteCommand(u8 command)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
    GPIO_SetPinState(LCD_PORT_RS, LCD_PIN_RS, 0);   
 800072e:	2200      	movs	r2, #0
 8000730:	2108      	movs	r1, #8
 8000732:	4808      	ldr	r0, [pc, #32]	; (8000754 <WriteCommand+0x30>)
 8000734:	f000 fcb0 	bl	8001098 <GPIO_SetPinState>
    GPIO_SetPinState(LCD_PORT_RW, LCD_PIN_RW, 0);   
 8000738:	2200      	movs	r2, #0
 800073a:	2109      	movs	r1, #9
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <WriteCommand+0x30>)
 800073e:	f000 fcab 	bl	8001098 <GPIO_SetPinState>
    Latch(command);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff9f 	bl	8000688 <Latch>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020000 	.word	0x40020000

08000758 <WriteData>:


static void WriteData(u8 data)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]

    GPIO_SetPinState(LCD_PORT_RS, LCD_PIN_RS, 1);   
 8000762:	2201      	movs	r2, #1
 8000764:	2108      	movs	r1, #8
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <WriteData+0x30>)
 8000768:	f000 fc96 	bl	8001098 <GPIO_SetPinState>
    GPIO_SetPinState(LCD_PORT_RW, LCD_PIN_RW, 0); 
 800076c:	2200      	movs	r2, #0
 800076e:	2109      	movs	r1, #9
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <WriteData+0x30>)
 8000772:	f000 fc91 	bl	8001098 <GPIO_SetPinState>

    Latch(data);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff85 	bl	8000688 <Latch>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40020000 	.word	0x40020000

0800078c <InitProcess>:
}

#elif LCD_MODE == LCD_4_BIT_MODE

static void InitProcess(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    static LCD_Init_States_t InitState = POWER_ON_STATE;
    static u8 counter = 0;

    switch(InitState)
 8000790:	4b63      	ldr	r3, [pc, #396]	; (8000920 <InitProcess+0x194>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b06      	cmp	r3, #6
 8000796:	f200 80bb 	bhi.w	8000910 <InitProcess+0x184>
 800079a:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <InitProcess+0x14>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	080007bd 	.word	0x080007bd
 80007a4:	080007e1 	.word	0x080007e1
 80007a8:	08000869 	.word	0x08000869
 80007ac:	08000891 	.word	0x08000891
 80007b0:	080008b9 	.word	0x080008b9
 80007b4:	080008e1 	.word	0x080008e1
 80007b8:	08000909 	.word	0x08000909
    {
        case POWER_ON_STATE:
            /* Delay for 30 ms */
            counter += LCD_UPDATE_PERIODICITY_MS;
 80007bc:	4b59      	ldr	r3, [pc, #356]	; (8000924 <InitProcess+0x198>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3302      	adds	r3, #2
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b57      	ldr	r3, [pc, #348]	; (8000924 <InitProcess+0x198>)
 80007c6:	701a      	strb	r2, [r3, #0]

            if(counter >= 30)
 80007c8:	4b56      	ldr	r3, [pc, #344]	; (8000924 <InitProcess+0x198>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b1d      	cmp	r3, #29
 80007ce:	f240 80a1 	bls.w	8000914 <InitProcess+0x188>
            {
                /* Move to next state if dealy reaches 30ms */
                counter = 0;
 80007d2:	4b54      	ldr	r3, [pc, #336]	; (8000924 <InitProcess+0x198>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
                InitState = PRE_FUNCTIONAL_SET_STATE;
 80007d8:	4b51      	ldr	r3, [pc, #324]	; (8000920 <InitProcess+0x194>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80007de:	e099      	b.n	8000914 <InitProcess+0x188>

        /* The first latch in the Functional Set step as it needs to be done manually */
        case PRE_FUNCTIONAL_SET_STATE:
            counter++;
 80007e0:	4b50      	ldr	r3, [pc, #320]	; (8000924 <InitProcess+0x198>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b4e      	ldr	r3, [pc, #312]	; (8000924 <InitProcess+0x198>)
 80007ea:	701a      	strb	r2, [r3, #0]
            if(counter == 1)
 80007ec:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <InitProcess+0x198>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d129      	bne.n	8000848 <InitProcess+0xbc>
            {
                GPIO_SetPinState(LCD_Pins[0].Port, LCD_Pins[0].Pin, GPIO_STATE_LOW);
 80007f4:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <InitProcess+0x19c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a4b      	ldr	r2, [pc, #300]	; (8000928 <InitProcess+0x19c>)
 80007fa:	7912      	ldrb	r2, [r2, #4]
 80007fc:	4611      	mov	r1, r2
 80007fe:	2200      	movs	r2, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fc49 	bl	8001098 <GPIO_SetPinState>
                GPIO_SetPinState(LCD_Pins[1].Port, LCD_Pins[1].Pin, GPIO_STATE_HIGH);
 8000806:	4b48      	ldr	r3, [pc, #288]	; (8000928 <InitProcess+0x19c>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4a47      	ldr	r2, [pc, #284]	; (8000928 <InitProcess+0x19c>)
 800080c:	7b12      	ldrb	r2, [r2, #12]
 800080e:	4611      	mov	r1, r2
 8000810:	2201      	movs	r2, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc40 	bl	8001098 <GPIO_SetPinState>
                GPIO_SetPinState(LCD_Pins[2].Port, LCD_Pins[2].Pin, GPIO_STATE_LOW);
 8000818:	4b43      	ldr	r3, [pc, #268]	; (8000928 <InitProcess+0x19c>)
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	4a42      	ldr	r2, [pc, #264]	; (8000928 <InitProcess+0x19c>)
 800081e:	7d12      	ldrb	r2, [r2, #20]
 8000820:	4611      	mov	r1, r2
 8000822:	2200      	movs	r2, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fc37 	bl	8001098 <GPIO_SetPinState>
                GPIO_SetPinState(LCD_Pins[3].Port, LCD_Pins[3].Pin, GPIO_STATE_LOW);
 800082a:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <InitProcess+0x19c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a3e      	ldr	r2, [pc, #248]	; (8000928 <InitProcess+0x19c>)
 8000830:	7f12      	ldrb	r2, [r2, #28]
 8000832:	4611      	mov	r1, r2
 8000834:	2200      	movs	r2, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fc2e 	bl	8001098 <GPIO_SetPinState>

                GPIO_SetPinState(LCD_PORT_E, LCD_PIN_E, GPIO_STATE_HIGH);
 800083c:	2201      	movs	r2, #1
 800083e:	210a      	movs	r1, #10
 8000840:	483a      	ldr	r0, [pc, #232]	; (800092c <InitProcess+0x1a0>)
 8000842:	f000 fc29 	bl	8001098 <GPIO_SetPinState>
                GPIO_SetPinState(LCD_PORT_E, LCD_PIN_E, GPIO_STATE_LOW);

                counter = 0;
                InitState = FUNCTIONAL_SET_STATE;
            }
            break;
 8000846:	e067      	b.n	8000918 <InitProcess+0x18c>
            else if(counter == 2)
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <InitProcess+0x198>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d163      	bne.n	8000918 <InitProcess+0x18c>
                GPIO_SetPinState(LCD_PORT_E, LCD_PIN_E, GPIO_STATE_LOW);
 8000850:	2200      	movs	r2, #0
 8000852:	210a      	movs	r1, #10
 8000854:	4835      	ldr	r0, [pc, #212]	; (800092c <InitProcess+0x1a0>)
 8000856:	f000 fc1f 	bl	8001098 <GPIO_SetPinState>
                counter = 0;
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <InitProcess+0x198>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
                InitState = FUNCTIONAL_SET_STATE;
 8000860:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <InitProcess+0x194>)
 8000862:	2202      	movs	r2, #2
 8000864:	701a      	strb	r2, [r3, #0]
            break;
 8000866:	e057      	b.n	8000918 <InitProcess+0x18c>

        case FUNCTIONAL_SET_STATE:
            counter++;
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <InitProcess+0x198>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	3301      	adds	r3, #1
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <InitProcess+0x198>)
 8000872:	701a      	strb	r2, [r3, #0]
            if(counter == LATCH_TARGET_COUNT)
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <InitProcess+0x198>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d105      	bne.n	8000888 <InitProcess+0xfc>
            {
                counter = 0;
 800087c:	4b29      	ldr	r3, [pc, #164]	; (8000924 <InitProcess+0x198>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
                InitState = DISPLAY_CTRL_STATE;
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <InitProcess+0x194>)
 8000884:	2203      	movs	r2, #3
 8000886:	701a      	strb	r2, [r3, #0]
            }
            WriteCommand(FUNCTION_SET);
 8000888:	2028      	movs	r0, #40	; 0x28
 800088a:	f7ff ff4b 	bl	8000724 <WriteCommand>
            break;
 800088e:	e044      	b.n	800091a <InitProcess+0x18e>

        case DISPLAY_CTRL_STATE:
            counter++;
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <InitProcess+0x198>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <InitProcess+0x198>)
 800089a:	701a      	strb	r2, [r3, #0]
            if(counter == LATCH_TARGET_COUNT)
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <InitProcess+0x198>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d105      	bne.n	80008b0 <InitProcess+0x124>
            {
                counter = 0;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <InitProcess+0x198>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
                InitState = CLEAR_DISPLAY_STATE;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <InitProcess+0x194>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	701a      	strb	r2, [r3, #0]
            }
            WriteCommand(LCD_DISPLAY_CONTROL);
 80008b0:	200c      	movs	r0, #12
 80008b2:	f7ff ff37 	bl	8000724 <WriteCommand>
            break;
 80008b6:	e030      	b.n	800091a <InitProcess+0x18e>

        case CLEAR_DISPLAY_STATE:
            counter++;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <InitProcess+0x198>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <InitProcess+0x198>)
 80008c2:	701a      	strb	r2, [r3, #0]
            if(counter == LATCH_TARGET_COUNT)
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <InitProcess+0x198>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d105      	bne.n	80008d8 <InitProcess+0x14c>
            {
                counter = 0;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <InitProcess+0x198>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
                InitState = ENTRY_MODE_STATE;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <InitProcess+0x194>)
 80008d4:	2205      	movs	r2, #5
 80008d6:	701a      	strb	r2, [r3, #0]
            }
            WriteCommand(LCD_CLEAR_DISPLAY);
 80008d8:	2001      	movs	r0, #1
 80008da:	f7ff ff23 	bl	8000724 <WriteCommand>
            break;
 80008de:	e01c      	b.n	800091a <InitProcess+0x18e>
                    
        case ENTRY_MODE_STATE:
            counter++;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <InitProcess+0x198>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <InitProcess+0x198>)
 80008ea:	701a      	strb	r2, [r3, #0]
            if(counter == LATCH_TARGET_COUNT)
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <InitProcess+0x198>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b04      	cmp	r3, #4
 80008f2:	d105      	bne.n	8000900 <InitProcess+0x174>
            {
                counter = 0;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <InitProcess+0x198>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
                InitState = END_STATE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <InitProcess+0x194>)
 80008fc:	2206      	movs	r2, #6
 80008fe:	701a      	strb	r2, [r3, #0]
            }
            WriteCommand(LCD_ENTRY_MODE);
 8000900:	2006      	movs	r0, #6
 8000902:	f7ff ff0f 	bl	8000724 <WriteCommand>
            break;
 8000906:	e008      	b.n	800091a <InitProcess+0x18e>

        case END_STATE:
            G_LCDState = LCD_OPERATION;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <InitProcess+0x1a4>)
 800090a:	2202      	movs	r2, #2
 800090c:	701a      	strb	r2, [r3, #0]
            break;
 800090e:	e004      	b.n	800091a <InitProcess+0x18e>
        
        default:
            break;
 8000910:	bf00      	nop
 8000912:	e002      	b.n	800091a <InitProcess+0x18e>
            break;
 8000914:	bf00      	nop
 8000916:	e000      	b.n	800091a <InitProcess+0x18e>
            break;
 8000918:	bf00      	nop
    }
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000099 	.word	0x20000099
 8000924:	2000009a 	.word	0x2000009a
 8000928:	08001d24 	.word	0x08001d24
 800092c:	40020000 	.word	0x40020000
 8000930:	20000081 	.word	0x20000081

08000934 <WriteString>:
} */


/* Iterates through the string and prints each character */
static void WriteString(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

    if(G_WriteReq.data[G_WriteReq.currIndex] != '\0')
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <WriteString+0x6c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <WriteString+0x6c>)
 800093e:	7952      	ldrb	r2, [r2, #5]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d022      	beq.n	800098e <WriteString+0x5a>
    {
        WriteData(G_WriteReq.data[G_WriteReq.currIndex]);
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <WriteString+0x6c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <WriteString+0x6c>)
 800094e:	7952      	ldrb	r2, [r2, #5]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff feff 	bl	8000758 <WriteData>
        G_OperationLatchCount++;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <WriteString+0x70>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <WriteString+0x70>)
 8000964:	701a      	strb	r2, [r3, #0]

        if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <WriteString+0x70>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b04      	cmp	r3, #4
 800096c:	d115      	bne.n	800099a <WriteString+0x66>
        {
            G_WriteReq.currIndex++;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <WriteString+0x6c>)
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	3301      	adds	r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <WriteString+0x6c>)
 8000978:	715a      	strb	r2, [r3, #5]
            G_OperationLatchCount = 0;
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <WriteString+0x70>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]

            G_CharCount++;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <WriteString+0x74>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <WriteString+0x74>)
 800098a:	701a      	strb	r2, [r3, #0]
    {
        G_Request.state = AVAILABLE;
        G_Request.type = NONE;

    }
}
 800098c:	e005      	b.n	800099a <WriteString+0x66>
        G_Request.state = AVAILABLE;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <WriteString+0x78>)
 8000990:	2200      	movs	r2, #0
 8000992:	705a      	strb	r2, [r3, #1]
        G_Request.type = NONE;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <WriteString+0x78>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	20000096 	.word	0x20000096
 80009a8:	20000097 	.word	0x20000097
 80009ac:	20000084 	.word	0x20000084

080009b0 <WriteBuffer>:

static void WriteBuffer(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0

    if(G_WriteReq.currIndex < G_WriteReq.length)
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <WriteBuffer+0x68>)
 80009b6:	795a      	ldrb	r2, [r3, #5]
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <WriteBuffer+0x68>)
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d222      	bcs.n	8000a06 <WriteBuffer+0x56>
    {
        WriteData(G_WriteReq.data[G_WriteReq.currIndex]);
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <WriteBuffer+0x68>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <WriteBuffer+0x68>)
 80009c6:	7952      	ldrb	r2, [r2, #5]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fec3 	bl	8000758 <WriteData>
        G_OperationLatchCount++;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <WriteBuffer+0x6c>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <WriteBuffer+0x6c>)
 80009dc:	701a      	strb	r2, [r3, #0]

        if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <WriteBuffer+0x6c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d115      	bne.n	8000a12 <WriteBuffer+0x62>
        {
            G_WriteReq.currIndex++;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <WriteBuffer+0x68>)
 80009e8:	795b      	ldrb	r3, [r3, #5]
 80009ea:	3301      	adds	r3, #1
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <WriteBuffer+0x68>)
 80009f0:	715a      	strb	r2, [r3, #5]
            G_OperationLatchCount = 0;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <WriteBuffer+0x6c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

            G_CharCount++;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <WriteBuffer+0x70>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <WriteBuffer+0x70>)
 8000a02:	701a      	strb	r2, [r3, #0]
    {
        G_Request.state = AVAILABLE;
        G_Request.type = NONE;

    }
}
 8000a04:	e005      	b.n	8000a12 <WriteBuffer+0x62>
        G_Request.state = AVAILABLE;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <WriteBuffer+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	705a      	strb	r2, [r3, #1]
        G_Request.type = NONE;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <WriteBuffer+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000008c 	.word	0x2000008c
 8000a1c:	20000096 	.word	0x20000096
 8000a20:	20000097 	.word	0x20000097
 8000a24:	20000084 	.word	0x20000084

08000a28 <ClearScreen>:

static void ClearScreen(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <ClearScreen+0x38>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d109      	bne.n	8000a48 <ClearScreen+0x20>
    {
        G_OperationLatchCount = 0;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <ClearScreen+0x38>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]

        G_Request.state = AVAILABLE;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <ClearScreen+0x3c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	705a      	strb	r2, [r3, #1]
        G_Request.type = NONE;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <ClearScreen+0x3c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
    {
        WriteCommand(LCD_CLEAR_DISPLAY);
        G_OperationLatchCount++;
    }

}
 8000a46:	e008      	b.n	8000a5a <ClearScreen+0x32>
        WriteCommand(LCD_CLEAR_DISPLAY);
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fe6b 	bl	8000724 <WriteCommand>
        G_OperationLatchCount++;
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <ClearScreen+0x38>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <ClearScreen+0x38>)
 8000a58:	701a      	strb	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000096 	.word	0x20000096
 8000a64:	20000084 	.word	0x20000084

08000a68 <SetCursorPos>:

static void SetCursorPos(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

    if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <SetCursorPos+0x60>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d109      	bne.n	8000a88 <SetCursorPos+0x20>
    {
        G_OperationLatchCount = 0;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <SetCursorPos+0x60>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

        G_Request.state = AVAILABLE;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <SetCursorPos+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	705a      	strb	r2, [r3, #1]
        G_Request.type = NONE;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <SetCursorPos+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]

        G_OperationLatchCount++;

    }

}
 8000a86:	e01c      	b.n	8000ac2 <SetCursorPos+0x5a>
        if(G_Pos.row == 0)
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <SetCursorPos+0x68>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d107      	bne.n	8000aa0 <SetCursorPos+0x38>
            WriteCommand(LCD_SET_DDR_ADDRESS + G_Pos.col);
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <SetCursorPos+0x68>)
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	3b80      	subs	r3, #128	; 0x80
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fe43 	bl	8000724 <WriteCommand>
 8000a9e:	e00a      	b.n	8000ab6 <SetCursorPos+0x4e>
        else if (G_Pos.row == 1)
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <SetCursorPos+0x68>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d106      	bne.n	8000ab6 <SetCursorPos+0x4e>
            WriteCommand(LCD_SET_DDR_ADDRESS + (G_Pos.col + 0x40) );
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <SetCursorPos+0x68>)
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	3b40      	subs	r3, #64	; 0x40
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fe37 	bl	8000724 <WriteCommand>
        G_OperationLatchCount++;
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SetCursorPos+0x60>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <SetCursorPos+0x60>)
 8000ac0:	701a      	strb	r2, [r3, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000096 	.word	0x20000096
 8000acc:	20000084 	.word	0x20000084
 8000ad0:	20000094 	.word	0x20000094

08000ad4 <OperationProcess>:


/* If the LCD finished Initialization and is in Operation mode */
static void OperationProcess(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    if(G_Request.type == WRITE_STRING)
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <OperationProcess+0x40>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d102      	bne.n	8000ae6 <OperationProcess+0x12>
    {
        WriteString();
 8000ae0:	f7ff ff28 	bl	8000934 <WriteString>
    }
    else if(G_Request.type == SET_CURSOR_POS)
    {
        SetCursorPos();
    }
}
 8000ae4:	e013      	b.n	8000b0e <OperationProcess+0x3a>
    else if(G_Request.type == WRITE_BUFFER)
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <OperationProcess+0x40>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d102      	bne.n	8000af4 <OperationProcess+0x20>
        WriteBuffer();
 8000aee:	f7ff ff5f 	bl	80009b0 <WriteBuffer>
}
 8000af2:	e00c      	b.n	8000b0e <OperationProcess+0x3a>
    else if(G_Request.type == CLEAR_SCREEN)
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <OperationProcess+0x40>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d102      	bne.n	8000b02 <OperationProcess+0x2e>
        ClearScreen();
 8000afc:	f7ff ff94 	bl	8000a28 <ClearScreen>
}
 8000b00:	e005      	b.n	8000b0e <OperationProcess+0x3a>
    else if(G_Request.type == SET_CURSOR_POS)
 8000b02:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <OperationProcess+0x40>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d101      	bne.n	8000b0e <OperationProcess+0x3a>
        SetCursorPos();
 8000b0a:	f7ff ffad 	bl	8000a68 <SetCursorPos>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000084 	.word	0x20000084

08000b18 <LCD_Update>:
/*                                 IMPLEMENTATION                           	*/
/* ============================================================================ */

/* The runnable of LCD */
void LCD_Update(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    if(G_LCDState == LCD_INIT)
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <LCD_Update+0x24>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d102      	bne.n	8000b2a <LCD_Update+0x12>
    {
        InitProcess();
 8000b24:	f7ff fe32 	bl	800078c <InitProcess>
    }
    else
    {
        /* do nothing */
    }
}
 8000b28:	e005      	b.n	8000b36 <LCD_Update+0x1e>
    else if(G_LCDState == LCD_OPERATION)
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <LCD_Update+0x24>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d101      	bne.n	8000b36 <LCD_Update+0x1e>
        OperationProcess();
 8000b32:	f7ff ffcf 	bl	8000ad4 <OperationProcess>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000081 	.word	0x20000081

08000b40 <LCD_Init>:


LCD_ErrorStatus_t LCD_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
    LCD_ErrorStatus_t Ret_ErrorStatus = LCD_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	75bb      	strb	r3, [r7, #22]
    u8 iter;
    GPIO_Pin_t lcdPin;
    lcdPin.Mode = GPIO_MODE_OP_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
    lcdPin.AF = GPIO_AF_SYSTEM;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
    lcdPin.Speed = GPIO_SPEED_HIGH;
 8000b52:	2302      	movs	r3, #2
 8000b54:	60fb      	str	r3, [r7, #12]

    /* Initialize the LCD pins */
    for(iter = 0; iter < LCD_PINS_NUM; iter++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]
 8000b5a:	e011      	b.n	8000b80 <LCD_Init+0x40>
    {
        lcdPin.Pin = LCD_Pins[iter].Pin;
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <LCD_Init+0x88>)
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	607b      	str	r3, [r7, #4]
        lcdPin.Port = LCD_Pins[iter].Port;
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <LCD_Init+0x88>)
 8000b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b70:	603b      	str	r3, [r7, #0]

        GPIO_Init(&lcdPin);
 8000b72:	463b      	mov	r3, r7
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f8ed 	bl	8000d54 <GPIO_Init>
    for(iter = 0; iter < LCD_PINS_NUM; iter++)
 8000b7a:	7dfb      	ldrb	r3, [r7, #23]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	75fb      	strb	r3, [r7, #23]
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d9ea      	bls.n	8000b5c <LCD_Init+0x1c>
    }

    lcdPin.Pin = LCD_PIN_RS;
 8000b86:	2308      	movs	r3, #8
 8000b88:	607b      	str	r3, [r7, #4]
    lcdPin.Port = LCD_PORT_RS;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <LCD_Init+0x8c>)
 8000b8c:	603b      	str	r3, [r7, #0]
    GPIO_Init(&lcdPin);
 8000b8e:	463b      	mov	r3, r7
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f8df 	bl	8000d54 <GPIO_Init>

    lcdPin.Pin = LCD_PIN_RW;
 8000b96:	2309      	movs	r3, #9
 8000b98:	607b      	str	r3, [r7, #4]
    lcdPin.Port = LCD_PORT_RW;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <LCD_Init+0x8c>)
 8000b9c:	603b      	str	r3, [r7, #0]
    GPIO_Init(&lcdPin);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f8d7 	bl	8000d54 <GPIO_Init>

    lcdPin.Pin = LCD_PIN_E;
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	607b      	str	r3, [r7, #4]
    lcdPin.Port = LCD_PORT_E;
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <LCD_Init+0x8c>)
 8000bac:	603b      	str	r3, [r7, #0]
    GPIO_Init(&lcdPin);
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f8cf 	bl	8000d54 <GPIO_Init>


    /* Change LCD state from OFF to Init */
    G_LCDState = LCD_INIT;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <LCD_Init+0x90>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]

    return Ret_ErrorStatus;
 8000bbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	08001d24 	.word	0x08001d24
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	20000081 	.word	0x20000081

08000bd4 <LED_Init>:
/* ============================================================================ */
/*                                  IMPLEMENTATION                           	*/
/* ============================================================================ */

LED_ErrorStatus_t LED_Init(void)
{
 8000bd4:	b5b0      	push	{r4, r5, r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
    LED_ErrorStatus_t Ret_ErrorStatus = LED_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	75fb      	strb	r3, [r7, #23]
    GPIO_Pin_t Local_Led;
    u8 Local_iter;
    Local_Led.Mode = GPIO_MODE_OP_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
    Local_Led.Speed = GPIO_SPEED_HIGH;
 8000be2:	2302      	movs	r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
    Local_Led.AF = GPIO_AF_SYSTEM;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]

    for(Local_iter = 0; Local_iter < _LED_NUM; Local_iter++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	75bb      	strb	r3, [r7, #22]
 8000bee:	e060      	b.n	8000cb2 <LED_Init+0xde>
    {
        if(!IS_LED_STATE(Leds[Local_iter].InitState))
 8000bf0:	7dba      	ldrb	r2, [r7, #22]
 8000bf2:	4935      	ldr	r1, [pc, #212]	; (8000cc8 <LED_Init+0xf4>)
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	3309      	adds	r3, #9
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d00d      	beq.n	8000c22 <LED_Init+0x4e>
 8000c06:	7dba      	ldrb	r2, [r7, #22]
 8000c08:	492f      	ldr	r1, [pc, #188]	; (8000cc8 <LED_Init+0xf4>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3309      	adds	r3, #9
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <LED_Init+0x4e>
        {
            Ret_ErrorStatus = LED_INVALID_STATE;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	75fb      	strb	r3, [r7, #23]
 8000c20:	e041      	b.n	8000ca6 <LED_Init+0xd2>
        }
        else
        {
            Local_Led.Port = Leds[Local_iter].Port;
 8000c22:	7dba      	ldrb	r2, [r7, #22]
 8000c24:	4928      	ldr	r1, [pc, #160]	; (8000cc8 <LED_Init+0xf4>)
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	603b      	str	r3, [r7, #0]
            Local_Led.Pin = Leds[Local_iter].Pin;
 8000c34:	7dba      	ldrb	r2, [r7, #22]
 8000c36:	4924      	ldr	r1, [pc, #144]	; (8000cc8 <LED_Init+0xf4>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	607b      	str	r3, [r7, #4]
            Ret_ErrorStatus = GPIO_Init(&Local_Led);
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f882 	bl	8000d54 <GPIO_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	75fb      	strb	r3, [r7, #23]
            GPIO_SetPinState(Leds[Local_iter].Port, Leds[Local_iter].Pin, Leds[Local_iter].InitState ^ Leds[Local_iter].Connection);
 8000c54:	7dba      	ldrb	r2, [r7, #22]
 8000c56:	491c      	ldr	r1, [pc, #112]	; (8000cc8 <LED_Init+0xf4>)
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	440b      	add	r3, r1
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	7dba      	ldrb	r2, [r7, #22]
 8000c66:	4918      	ldr	r1, [pc, #96]	; (8000cc8 <LED_Init+0xf4>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	440b      	add	r3, r1
 8000c72:	3304      	adds	r3, #4
 8000c74:	681c      	ldr	r4, [r3, #0]
 8000c76:	7dba      	ldrb	r2, [r7, #22]
 8000c78:	4913      	ldr	r1, [pc, #76]	; (8000cc8 <LED_Init+0xf4>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	440b      	add	r3, r1
 8000c84:	3309      	adds	r3, #9
 8000c86:	7819      	ldrb	r1, [r3, #0]
 8000c88:	7dba      	ldrb	r2, [r7, #22]
 8000c8a:	4d0f      	ldr	r5, [pc, #60]	; (8000cc8 <LED_Init+0xf4>)
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	3308      	adds	r3, #8
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	404b      	eors	r3, r1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	f000 f9f9 	bl	8001098 <GPIO_SetPinState>
        }

        if(Ret_ErrorStatus != LED_OK)
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d106      	bne.n	8000cba <LED_Init+0xe6>
    for(Local_iter = 0; Local_iter < _LED_NUM; Local_iter++)
 8000cac:	7dbb      	ldrb	r3, [r7, #22]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	75bb      	strb	r3, [r7, #22]
 8000cb2:	7dbb      	ldrb	r3, [r7, #22]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d99b      	bls.n	8000bf0 <LED_Init+0x1c>
 8000cb8:	e000      	b.n	8000cbc <LED_Init+0xe8>
        {
            break;
 8000cba:	bf00      	nop
        }
    }

    return Ret_ErrorStatus;
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	08001d44 	.word	0x08001d44

08000ccc <LED_SetState>:


LED_ErrorStatus_t LED_SetState(LED_ID_t Copy_LedID, u8 Copy_State)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
    LED_ErrorStatus_t Ret_ErrorStatus = LED_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

    if(Copy_LedID >= _LED_NUM)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d902      	bls.n	8000cec <LED_SetState+0x20>
    {
        Ret_ErrorStatus = LED_INVALID_ID;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e007      	b.n	8000cfc <LED_SetState+0x30>
    }
    else if(!IS_LED_STATE(Copy_State))
 8000cec:	79bb      	ldrb	r3, [r7, #6]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d004      	beq.n	8000cfc <LED_SetState+0x30>
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <LED_SetState+0x30>
    {
        Ret_ErrorStatus = LED_INVALID_STATE;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == LED_OK)
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d121      	bne.n	8000d46 <LED_SetState+0x7a>
    {
        Ret_ErrorStatus = GPIO_SetPinState(Leds[Copy_LedID].Port, Leds[Copy_LedID].Pin, Copy_State ^ Leds[Copy_LedID].Connection);
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	4912      	ldr	r1, [pc, #72]	; (8000d50 <LED_SetState+0x84>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	440b      	add	r3, r1
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LED_SetState+0x84>)
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	3304      	adds	r3, #4
 8000d22:	6819      	ldr	r1, [r3, #0]
 8000d24:	79fa      	ldrb	r2, [r7, #7]
 8000d26:	4c0a      	ldr	r4, [pc, #40]	; (8000d50 <LED_SetState+0x84>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4423      	add	r3, r4
 8000d32:	3308      	adds	r3, #8
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	4053      	eors	r3, r2
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f000 f9ab 	bl	8001098 <GPIO_SetPinState>
 8000d42:	4603      	mov	r3, r0
 8000d44:	73fb      	strb	r3, [r7, #15]
    }

    return Ret_ErrorStatus;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	08001d44 	.word	0x08001d44

08000d54 <GPIO_Init>:
/* ========================================================================================= */
/*                                      IMPLEMENTATION                                       */
/* ========================================================================================= */

GPIO_ErrorStatus_t GPIO_Init(GPIO_Pin_t* ADD_Config)
{
 8000d54:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d58:	b08c      	sub	sp, #48	; 0x30
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	61f8      	str	r0, [r7, #28]
    GPIO_ErrorStatus_t Ret_ErrorStatus = GPIO_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    u32 Local_TmpReg;
    u64 Local_AFTmpReg; /* AFH and AFL are treated as one 64bit Register */

    if(ADD_Config == NULL)
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d103      	bne.n	8000d72 <GPIO_Init+0x1e>
    {
        Ret_ErrorStatus = GPIO_NULLPTR;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d70:	e0af      	b.n	8000ed2 <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_PORT(ADD_Config->Port))
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a38      	ldr	r2, [pc, #224]	; (8000e58 <GPIO_Init+0x104>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <GPIO_Init+0x44>
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a36      	ldr	r2, [pc, #216]	; (8000e5c <GPIO_Init+0x108>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d008      	beq.n	8000d98 <GPIO_Init+0x44>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a35      	ldr	r2, [pc, #212]	; (8000e60 <GPIO_Init+0x10c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d003      	beq.n	8000d98 <GPIO_Init+0x44>
    {
        Ret_ErrorStatus = GPIO_INVALID_PORT;
 8000d90:	2305      	movs	r3, #5
 8000d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d96:	e09c      	b.n	8000ed2 <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_PIN(ADD_Config->Pin))
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d903      	bls.n	8000da8 <GPIO_Init+0x54>
    {
        Ret_ErrorStatus = GPIO_INVALID_PIN;
 8000da0:	2306      	movs	r3, #6
 8000da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000da6:	e094      	b.n	8000ed2 <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_MODE(ADD_Config->Mode))
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d04b      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d047      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d043      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	d03f      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d03b      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d037      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b09      	cmp	r3, #9
 8000dde:	d033      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b11      	cmp	r3, #17
 8000de6:	d02f      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b05      	cmp	r3, #5
 8000dee:	d02b      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b0d      	cmp	r3, #13
 8000df6:	d027      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b15      	cmp	r3, #21
 8000dfe:	d023      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d01f      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d01b      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b0a      	cmp	r3, #10
 8000e16:	d017      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	2b12      	cmp	r3, #18
 8000e1e:	d013      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d00f      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b0e      	cmp	r3, #14
 8000e2e:	d00b      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2b16      	cmp	r3, #22
 8000e36:	d007      	beq.n	8000e48 <GPIO_Init+0xf4>
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d003      	beq.n	8000e48 <GPIO_Init+0xf4>
    {
        Ret_ErrorStatus = GPIO_INVALID_MODE;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e46:	e044      	b.n	8000ed2 <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_SPEED(ADD_Config->Speed))
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d909      	bls.n	8000e64 <GPIO_Init+0x110>
    {
        Ret_ErrorStatus = GPIO_INVALID_SPEED;
 8000e50:	2307      	movs	r3, #7
 8000e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e56:	e03c      	b.n	8000ed2 <GPIO_Init+0x17e>
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800
    }
    else if(!IS_GPIO_AF(ADD_Config->AF))
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d032      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d02e      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d02a      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d026      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d022      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d01e      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	2b06      	cmp	r3, #6
 8000e9a:	d01a      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b07      	cmp	r3, #7
 8000ea2:	d016      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d012      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	2b09      	cmp	r3, #9
 8000eb2:	d00e      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	2b0a      	cmp	r3, #10
 8000eba:	d00a      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	2b0c      	cmp	r3, #12
 8000ec2:	d006      	beq.n	8000ed2 <GPIO_Init+0x17e>
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d002      	beq.n	8000ed2 <GPIO_Init+0x17e>
    {
        Ret_ErrorStatus = GPIO_INVALID_AF;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == GPIO_OK)
 8000ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 80d5 	bne.w	8001086 <GPIO_Init+0x332>
    {
        /* Set the Pin Mode (Input, Output, AF, Analog)*/
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->MODER;
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( GPIO_2_BIT_MASK << (ADD_Config->Pin * GPIO_PIN_OFFSET_2)) ;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( (ADD_Config->Mode & GPIO_MODE_MASK) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0203 	and.w	r2, r3, #3
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->MODER = Local_TmpReg;
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f18:	601a      	str	r2, [r3, #0]

        /* Set the Pin output type (Push Pull or Open Drain)*/
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->OTYPER;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~ ( 1 << (ADD_Config->Pin) );
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f32:	4013      	ands	r3, r2
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( ((ADD_Config->Mode & GPIO_OTYPE_MASK) >> GPIO_OTYPE_POS_IN_MODE) << (ADD_Config->Pin) );
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	f003 0201 	and.w	r2, r3, #1
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->OTYPER = Local_TmpReg;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f54:	605a      	str	r2, [r3, #4]

        /* Set pin pullup/pulldown/floating */
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->PUPDR;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( (GPIO_2_BIT_MASK)<< (ADD_Config->Pin*GPIO_PIN_OFFSET_2) );
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	4013      	ands	r3, r2
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( ((ADD_Config->Mode & GPIO_PUPD_MASK) >> GPIO_PUPD_POS_IN_MODE) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	f003 0203 	and.w	r2, r3, #3
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->PUPDR = Local_TmpReg;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f94:	60da      	str	r2, [r3, #12]

        /* Set Pin speed */
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->OSPEEDR;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( (GPIO_2_BIT_MASK)<< (ADD_Config->Pin*GPIO_PIN_OFFSET_2) );
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( (ADD_Config->Speed) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->OSPEEDR = Local_TmpReg;
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fce:	609a      	str	r2, [r3, #8]


        /* Set AF */
        Local_AFTmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->AFR;
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        Local_AFTmpReg &= ~( ((u64)GPIO_4_BIT_MASK) << (ADD_Config->Pin*GPIO_PIN_OFFSET_4) );
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	009c      	lsls	r4, r3, #2
 8000fe2:	f04f 020f 	mov.w	r2, #15
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	f1a4 0120 	sub.w	r1, r4, #32
 8000fee:	f1c4 0020 	rsb	r0, r4, #32
 8000ff2:	fa03 fb04 	lsl.w	fp, r3, r4
 8000ff6:	fa02 f101 	lsl.w	r1, r2, r1
 8000ffa:	ea4b 0b01 	orr.w	fp, fp, r1
 8000ffe:	fa22 f000 	lsr.w	r0, r2, r0
 8001002:	ea4b 0b00 	orr.w	fp, fp, r0
 8001006:	fa02 fa04 	lsl.w	sl, r2, r4
 800100a:	ea6f 030a 	mvn.w	r3, sl
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	ea6f 030b 	mvn.w	r3, fp
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800101a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800101e:	4651      	mov	r1, sl
 8001020:	4011      	ands	r1, r2
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	4659      	mov	r1, fp
 8001026:	4019      	ands	r1, r3
 8001028:	60f9      	str	r1, [r7, #12]
 800102a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800102e:	e9c7 3408 	strd	r3, r4, [r7, #32]
        Local_AFTmpReg |= ( ((u64)ADD_Config->AF) << (ADD_Config->Pin*GPIO_PIN_OFFSET_4) );
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2200      	movs	r2, #0
 8001038:	461d      	mov	r5, r3
 800103a:	4616      	mov	r6, r2
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	f1a3 0120 	sub.w	r1, r3, #32
 8001046:	f1c3 0220 	rsb	r2, r3, #32
 800104a:	fa06 f903 	lsl.w	r9, r6, r3
 800104e:	fa05 f101 	lsl.w	r1, r5, r1
 8001052:	ea49 0901 	orr.w	r9, r9, r1
 8001056:	fa25 f202 	lsr.w	r2, r5, r2
 800105a:	ea49 0902 	orr.w	r9, r9, r2
 800105e:	fa05 f803 	lsl.w	r8, r5, r3
 8001062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001066:	ea42 0108 	orr.w	r1, r2, r8
 800106a:	6039      	str	r1, [r7, #0]
 800106c:	ea43 0309 	orr.w	r3, r3, r9
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001076:	e9c7 3408 	strd	r3, r4, [r7, #32]
        ((GPIO_Registers_t *)(ADD_Config->Port))->AFR = Local_AFTmpReg;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	6819      	ldr	r1, [r3, #0]
 800107e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001082:	e9c1 2308 	strd	r2, r3, [r1, #32]
    //		((GPIO_Registers_t *)(ADD_Config->Port))->AFRH = Local_TmpReg;
    //    }

    }

    return Ret_ErrorStatus;
 8001086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800108a:	4618      	mov	r0, r3
 800108c:	3730      	adds	r7, #48	; 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <GPIO_SetPinState>:


GPIO_ErrorStatus_t GPIO_SetPinState(void * Copy_Port, u32 Copy_Pin, u8 Copy_State)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	4613      	mov	r3, r2
 80010a4:	71fb      	strb	r3, [r7, #7]
    GPIO_ErrorStatus_t Ret_ErrorStatus = GPIO_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]
    
    if(!IS_GPIO_PORT(Copy_Port))
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4a1f      	ldr	r2, [pc, #124]	; (800112c <GPIO_SetPinState+0x94>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00a      	beq.n	80010c8 <GPIO_SetPinState+0x30>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <GPIO_SetPinState+0x98>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d006      	beq.n	80010c8 <GPIO_SetPinState+0x30>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <GPIO_SetPinState+0x9c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d002      	beq.n	80010c8 <GPIO_SetPinState+0x30>
    {
        Ret_ErrorStatus = GPIO_INVALID_PORT;
 80010c2:	2305      	movs	r3, #5
 80010c4:	75fb      	strb	r3, [r7, #23]
 80010c6:	e00d      	b.n	80010e4 <GPIO_SetPinState+0x4c>
    }
    else if(!IS_GPIO_PIN(Copy_Pin))
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	d902      	bls.n	80010d4 <GPIO_SetPinState+0x3c>
    {
        Ret_ErrorStatus = GPIO_INVALID_PIN;
 80010ce:	2306      	movs	r3, #6
 80010d0:	75fb      	strb	r3, [r7, #23]
 80010d2:	e007      	b.n	80010e4 <GPIO_SetPinState+0x4c>
    }
    else if(!IS_GPIO_STATE(Copy_State))
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d004      	beq.n	80010e4 <GPIO_SetPinState+0x4c>
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <GPIO_SetPinState+0x4c>
    {
        Ret_ErrorStatus = GPIO_INVALID_STATE;
 80010e0:	2308      	movs	r3, #8
 80010e2:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == GPIO_OK)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d118      	bne.n	800111c <GPIO_SetPinState+0x84>
    {
        switch(Copy_State)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <GPIO_SetPinState+0x5e>
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d009      	beq.n	8001108 <GPIO_SetPinState+0x70>
 80010f4:	e010      	b.n	8001118 <GPIO_SetPinState+0x80>
        {
            case GPIO_STATE_LOW:
                ((GPIO_Registers_t *)Copy_Port)->BSRR = ( 1<< (Copy_Pin+GPIO_BSRR_RESET_OFFSET) );
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3310      	adds	r3, #16
 80010fa:	2201      	movs	r2, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	461a      	mov	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	619a      	str	r2, [r3, #24]
                break;
 8001106:	e009      	b.n	800111c <GPIO_SetPinState+0x84>

            case GPIO_STATE_HIGH:
                ((GPIO_Registers_t *)Copy_Port)->BSRR = (1<< Copy_Pin);
 8001108:	2201      	movs	r2, #1
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	461a      	mov	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	619a      	str	r2, [r3, #24]
                break;
 8001116:	e001      	b.n	800111c <GPIO_SetPinState+0x84>

            default:
                Ret_ErrorStatus = GPIO_NOK;
 8001118:	2301      	movs	r3, #1
 800111a:	75fb      	strb	r3, [r7, #23]
        }
    }
    

    return Ret_ErrorStatus;
 800111c:	7dfb      	ldrb	r3, [r7, #23]
}
 800111e:	4618      	mov	r0, r3
 8001120:	371c      	adds	r7, #28
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800

08001138 <NVIC_SetBitInReg>:
/* ============================================================================ */
/*                                STATIC FUNCTIONS                   	        */
/* ============================================================================ */

static NVIC_ErrorStatus_t NVIC_SetBitInReg(NVIC_InterruptID_t Copy_InterruptID, volatile u32* const Add_Reg)
{
 8001138:	b4b0      	push	{r4, r5, r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
    NVIC_ErrorStatus_t Ret_ErrorStatus = NVIC_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	75fb      	strb	r3, [r7, #23]
    u8 Local_RegNumber;
    u8 Local_BitNmber;
    if(!IS_INTERRUPT_ID(Copy_InterruptID))
 8001148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800114c:	2400      	movs	r4, #0
 800114e:	f003 050f 	and.w	r5, r3, #15
 8001152:	f1a5 030f 	sub.w	r3, r5, #15
 8001156:	4323      	orrs	r3, r4
 8001158:	d001      	beq.n	800115e <NVIC_SetBitInReg+0x26>
    {
        Ret_ErrorStatus = NVIC_INVALID_INTERRUPT_ID;
 800115a:	2302      	movs	r3, #2
 800115c:	75fb      	strb	r3, [r7, #23]
    }

    if(Ret_ErrorStatus == NVIC_OK)
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d119      	bne.n	8001198 <NVIC_SetBitInReg+0x60>
    {
        Local_RegNumber = Copy_InterruptID / 32;
 8001164:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	0942      	lsrs	r2, r0, #5
 8001172:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8001176:	094b      	lsrs	r3, r1, #5
 8001178:	4613      	mov	r3, r2
 800117a:	75bb      	strb	r3, [r7, #22]
        Local_BitNmber  = Copy_InterruptID % 32;
 800117c:	7a3b      	ldrb	r3, [r7, #8]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	757b      	strb	r3, [r7, #21]
        Add_Reg[Local_RegNumber] = (1 << Local_BitNmber);
 8001184:	7d7b      	ldrb	r3, [r7, #21]
 8001186:	2201      	movs	r2, #1
 8001188:	fa02 f103 	lsl.w	r1, r2, r3
 800118c:	7dbb      	ldrb	r3, [r7, #22]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	460a      	mov	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
    }

    return Ret_ErrorStatus;
 8001198:	7dfb      	ldrb	r3, [r7, #23]
}
 800119a:	4618      	mov	r0, r3
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bcb0      	pop	{r4, r5, r7}
 80011a2:	4770      	bx	lr

080011a4 <NVIC_EnableInterrupt>:
/*                                  APIS IMPLEMENTATION                       	*/
/* ============================================================================ */


NVIC_ErrorStatus_t NVIC_EnableInterrupt(NVIC_InterruptID_t Copy_InterruptID)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	e9c7 0100 	strd	r0, r1, [r7]
    NVIC_ErrorStatus_t Ret_ErrorStatus = NVIC_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]
    
    Ret_ErrorStatus = NVIC_SetBitInReg(Copy_InterruptID, NVIC->ISER);
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <NVIC_EnableInterrupt+0x28>)
 80011b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011b8:	f7ff ffbe 	bl	8001138 <NVIC_SetBitInReg>
 80011bc:	4603      	mov	r3, r0
 80011be:	73fb      	strb	r3, [r7, #15]

    return Ret_ErrorStatus;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <RCC_EnableClk>:
    RCC_IWDGRSTF = 29,
    RCC_WWDGRSTF = 30,
    RCC_LPWRRSTF = 31,

}RCC_CSR_Bits_t;

 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
RCC_ErrorStatus_t RCC_EnableClk(u8 Copy_Clk)
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
{
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d863      	bhi.n	80012ac <RCC_EnableClk+0xdc>
 80011e4:	a201      	add	r2, pc, #4	; (adr r2, 80011ec <RCC_EnableClk+0x1c>)
 80011e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ea:	bf00      	nop
 80011ec:	08001205 	.word	0x08001205
 80011f0:	08001221 	.word	0x08001221
 80011f4:	0800123d 	.word	0x0800123d
 80011f8:	08001259 	.word	0x08001259
 80011fc:	08001275 	.word	0x08001275
 8001200:	08001291 	.word	0x08001291
    u16 Local_Timeout = RCC_TIMEOUT_PERIOD;
    switch(Copy_Clk)
    {
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <RCC_EnableClk+0xf0>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]
        case RCC_CLK_HSI:
            RCC->CR |= (1<<RCC_HSION);
 8001210:	bf00      	nop
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f9      	beq.n	8001212 <RCC_EnableClk+0x42>
            /* Wait till Ready */
 800121e:	e047      	b.n	80012b0 <RCC_EnableClk+0xe0>
            while( (((RCC->CR >> RCC_HSIRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
            break;

 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
        case RCC_CLK_HSE:
            RCC->CR |= (1<<RCC_HSEON);
 800122c:	bf00      	nop
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f9      	beq.n	800122e <RCC_EnableClk+0x5e>
            /* Wait till Ready */
 800123a:	e039      	b.n	80012b0 <RCC_EnableClk+0xe0>
            while( (((RCC->CR >> RCC_HSERDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
            break;

 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <RCC_EnableClk+0xf0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001246:	6013      	str	r3, [r2, #0]
        case RCC_CLK_PLL:
            RCC->CR |= (1<<RCC_PLLON);
 8001248:	bf00      	nop
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <RCC_EnableClk+0xf0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f9      	beq.n	800124a <RCC_EnableClk+0x7a>
            /* Wait till Ready */
 8001256:	e02b      	b.n	80012b0 <RCC_EnableClk+0xe0>
            while( (((RCC->CR >> RCC_PLLRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
            break;

 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <RCC_EnableClk+0xf0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <RCC_EnableClk+0xf0>)
 800125e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001262:	6013      	str	r3, [r2, #0]
        case RCC_CLK_PLL2:
            RCC->CR |= (1<<RCC_PLLI2SON);
 8001264:	bf00      	nop
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f9      	beq.n	8001266 <RCC_EnableClk+0x96>
            /* Wait till Ready */
 8001272:	e01d      	b.n	80012b0 <RCC_EnableClk+0xe0>
            while( (((RCC->CR >> RCC_PLLI2SRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
            break;

 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <RCC_EnableClk+0xf0>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]
        case RCC_CLK_LSE:
            RCC->BDCR |= (1<<RCC_LSEON);
 8001280:	bf00      	nop
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f9      	beq.n	8001282 <RCC_EnableClk+0xb2>
            /* Wait till Ready */
 800128e:	e00f      	b.n	80012b0 <RCC_EnableClk+0xe0>
            while( (((RCC->BDCR >> RCC_LSERDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
            break;

 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <RCC_EnableClk+0xf0>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]
        case RCC_CLK_LSI:
            RCC->CSR |= (1<<RCC_LSION);
 800129c:	bf00      	nop
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <RCC_EnableClk+0xf0>)
 80012a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f9      	beq.n	800129e <RCC_EnableClk+0xce>
            /* Wait till Ready */
 80012aa:	e001      	b.n	80012b0 <RCC_EnableClk+0xe0>
            while( (((RCC->CSR >> RCC_LSIRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
            break;

 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
        default:
            Ret_ErrorStatus = RCC_NOK;
    }

 80012b0:	7bfb      	ldrb	r3, [r7, #15]

 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800

080012c4 <RCC_SetSystemClk>:
    return Ret_ErrorStatus;
}




 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
RCC_ErrorStatus_t RCC_SetSystemClk(u8 Copy_SystemClk)
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
{
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
    u32 Local_TmpReg;
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d105      	bne.n	80012e4 <RCC_SetSystemClk+0x20>

 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <RCC_SetSystemClk+0x74>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d011      	beq.n	8001308 <RCC_SetSystemClk+0x44>
    if(
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d105      	bne.n	80012f6 <RCC_SetSystemClk+0x32>
        ( (Copy_SystemClk == RCC_SYSCLK_HSI) && !( (RCC->CR >> RCC_HSION) & 1 ) )
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <RCC_SetSystemClk+0x74>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d008      	beq.n	8001308 <RCC_SetSystemClk+0x44>
        ||
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d108      	bne.n	800130e <RCC_SetSystemClk+0x4a>
        ( (Copy_SystemClk == RCC_SYSCLK_HSE) && !( (RCC->CR >> RCC_HSEON) & 1 ) )
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <RCC_SetSystemClk+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <RCC_SetSystemClk+0x4a>
        ||
        ( (Copy_SystemClk == RCC_SYSCLK_PLL) && !( (RCC->CR >> RCC_PLLON) & 1 ) )
                                                                                )

 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e00d      	b.n	800132a <RCC_SetSystemClk+0x66>
    {
        Ret_ErrorStatus = RCC_NOK;
    }
    else
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <RCC_SetSystemClk+0x74>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	60bb      	str	r3, [r7, #8]
    {
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f023 0303 	bic.w	r3, r3, #3
 800131a:	60bb      	str	r3, [r7, #8]
        Local_TmpReg = RCC->CFGR;
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	4313      	orrs	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
        Local_TmpReg &= (~RCC_SYSCLK_MASK);
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <RCC_SetSystemClk+0x74>)
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	6093      	str	r3, [r2, #8]
        Local_TmpReg |= Copy_SystemClk;
        RCC->CFGR = Local_TmpReg;

    }
 800132a:	7bfb      	ldrb	r3, [r7, #15]

 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40023800 	.word	0x40023800

0800133c <RCC_EnablePeripheral>:
    }

    return Ret_ErrorStatus;
}


 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
RCC_ErrorStatus_t RCC_EnablePeripheral(RCC_Peripheral_t Copy_Peripheral)
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
{
    u32 Local_PeripheralCode = ((u32*)&Copy_Peripheral)[1];         /* Code part of the peripheral enum */      
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b1f      	cmp	r3, #31
 800134e:	d80a      	bhi.n	8001366 <RCC_EnablePeripheral+0x2a>
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;

 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <RCC_EnablePeripheral+0x98>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	79fa      	ldrb	r2, [r7, #7]
 8001356:	2101      	movs	r1, #1
 8001358:	fa01 f202 	lsl.w	r2, r1, r2
 800135c:	4611      	mov	r1, r2
 800135e:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <RCC_EnablePeripheral+0x98>)
 8001360:	430b      	orrs	r3, r1
 8001362:	6313      	str	r3, [r2, #48]	; 0x30
 8001364:	e02f      	b.n	80013c6 <RCC_EnablePeripheral+0x8a>
    /* Check for the Peripherals enums Specific code to make sure
     * that the recived argument is only a Peripheral enum */
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b3f      	cmp	r3, #63	; 0x3f
 800136a:	d80b      	bhi.n	8001384 <RCC_EnablePeripheral+0x48>
    if(Local_PeripheralCode != 3)
    {
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <RCC_EnablePeripheral+0x98>)
 800136e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001370:	79fa      	ldrb	r2, [r7, #7]
 8001372:	3a20      	subs	r2, #32
 8001374:	2101      	movs	r1, #1
 8001376:	fa01 f202 	lsl.w	r2, r1, r2
 800137a:	4611      	mov	r1, r2
 800137c:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <RCC_EnablePeripheral+0x98>)
 800137e:	430b      	orrs	r3, r1
 8001380:	6353      	str	r3, [r2, #52]	; 0x34
 8001382:	e020      	b.n	80013c6 <RCC_EnablePeripheral+0x8a>
        Ret_ErrorStatus = RCC_NOK;
    }
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b5f      	cmp	r3, #95	; 0x5f
 8001388:	d80b      	bhi.n	80013a2 <RCC_EnablePeripheral+0x66>
    else
    {
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <RCC_EnablePeripheral+0x98>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	79fa      	ldrb	r2, [r7, #7]
 8001390:	3a40      	subs	r2, #64	; 0x40
 8001392:	2101      	movs	r1, #1
 8001394:	fa01 f202 	lsl.w	r2, r1, r2
 8001398:	4611      	mov	r1, r2
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <RCC_EnablePeripheral+0x98>)
 800139c:	430b      	orrs	r3, r1
 800139e:	6413      	str	r3, [r2, #64]	; 0x40
 80013a0:	e011      	b.n	80013c6 <RCC_EnablePeripheral+0x8a>
        if((u32)Copy_Peripheral < 32)        /* AHB1 REG peripherals */
        {
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db0b      	blt.n	80013c2 <RCC_EnablePeripheral+0x86>
            RCC->AHB1ENR |= (1<<(u32)Copy_Peripheral);
        }
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <RCC_EnablePeripheral+0x98>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	79fa      	ldrb	r2, [r7, #7]
 80013b0:	3a60      	subs	r2, #96	; 0x60
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	4611      	mov	r1, r2
 80013ba:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <RCC_EnablePeripheral+0x98>)
 80013bc:	430b      	orrs	r3, r1
 80013be:	6453      	str	r3, [r2, #68]	; 0x44
 80013c0:	e001      	b.n	80013c6 <RCC_EnablePeripheral+0x8a>
        else if((u32)Copy_Peripheral < 64)   /* AHB2 REG peripherals */
        {
            RCC->AHB2ENR |= (1<< ((u32)Copy_Peripheral - 32) );
        }
 80013c2:	2301      	movs	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
        else if((u32)Copy_Peripheral < 96)   /* APB1 REG peripherals */
        {
            RCC->APB1ENR |= (1<< ((u32)Copy_Peripheral - 64) );
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
        }
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40023800 	.word	0x40023800

080013d8 <SYSTICK_SetTicks>:
/* ============================================================================ */
/*                                  STATIC FUNCTIONS                    	    */
/* ============================================================================ */

static SYSTICK_ErrorStatus_t SYSTICK_SetTicks(u32 Copy_Ticks)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    SYSTICK_ErrorStatus_t Ret_ErrorStatus = SYSTICK_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]

    if(Copy_Ticks > SYSTICK_MAX_TICKS)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ea:	d301      	bcc.n	80013f0 <SYSTICK_SetTicks+0x18>
    {
        Ret_ErrorStatus = SYSTICK_NOK;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
    }

    if(Ret_ErrorStatus == SYSTICK_OK)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d102      	bne.n	80013fc <SYSTICK_SetTicks+0x24>
    {
        SYSTICK->LOAD = Copy_Ticks;
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SYSTICK_SetTicks+0x34>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6053      	str	r3, [r2, #4]
    }

    return Ret_ErrorStatus;
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <SYSTICK_SetTimeMs>:
    return Ret_ErrorStatus;
}


SYSTICK_ErrorStatus_t SYSTICK_SetTimeMs(u32 Copy_Time)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    SYSTICK_ErrorStatus_t Ret_ErrorStatus = SYSTICK_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	74fb      	strb	r3, [r7, #19]
    u32 Local_ClockSpeed;
    u32 Local_LoadTicks;

    if( (SYSTICK->CTRL & SYSTICK_CLKSOURCE_PROCESSOR) == SYSTICK_CLKSOURCE_PROCESSOR )
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <SYSTICK_SetTimeMs+0x4c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b04      	cmp	r3, #4
 8001426:	d102      	bne.n	800142e <SYSTICK_SetTimeMs+0x1e>
    {
        Local_ClockSpeed = SYSTICK_PROCESSOR_CLOCK;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <SYSTICK_SetTimeMs+0x50>)
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e001      	b.n	8001432 <SYSTICK_SetTimeMs+0x22>
    }
    else
    {
        Local_ClockSpeed = SYSTICK_EXTERNAL_CLOCK;
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <SYSTICK_SetTimeMs+0x54>)
 8001430:	617b      	str	r3, [r7, #20]
    }

//    Local_LoadTicks = Local_ClockSpeed * ((f32)Copy_Time/1000) ;

    Local_LoadTicks = ( (Local_ClockSpeed/1000) * Copy_Time ) - 1 ;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <SYSTICK_SetTimeMs+0x58>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	099b      	lsrs	r3, r3, #6
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
    

    Ret_ErrorStatus = SYSTICK_SetTicks(Local_LoadTicks);
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ffc6 	bl	80013d8 <SYSTICK_SetTicks>
 800144c:	4603      	mov	r3, r0
 800144e:	74fb      	strb	r3, [r7, #19]

    return Ret_ErrorStatus;
 8001450:	7cfb      	ldrb	r3, [r7, #19]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010
 8001460:	017d7840 	.word	0x017d7840
 8001464:	002faf08 	.word	0x002faf08
 8001468:	10624dd3 	.word	0x10624dd3

0800146c <SYSTICK_Start>:


SYSTICK_ErrorStatus_t SYSTICK_Start(u8 Copy_Mode)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]

    SYSTICK_ErrorStatus_t Ret_ErrorStatus = SYSTICK_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]

    if(!IS_VALID_MODE(Copy_Mode))
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d004      	beq.n	800148a <SYSTICK_Start+0x1e>
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SYSTICK_Start+0x1e>
    {
        Ret_ErrorStatus = SYSTICK_NOK;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
    }

    if(Ret_ErrorStatus == SYSTICK_OK)
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d112      	bne.n	80014b6 <SYSTICK_Start+0x4a>
    {
        /* clear the curr timer value */
        SYSTICK->VAL = 1U;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <SYSTICK_Start+0x58>)
 8001492:	2201      	movs	r2, #1
 8001494:	609a      	str	r2, [r3, #8]

        /* Clear the Interrupt bit then set it according to mode
         if mode is periodic Int bit will be set if not it will stay cleared */
        SYSTICK->CTRL &= ~SYSTICK_INT_MASK;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <SYSTICK_Start+0x58>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SYSTICK_Start+0x58>)
 800149c:	f023 0302 	bic.w	r3, r3, #2
 80014a0:	6013      	str	r3, [r2, #0]

        /* Enable the systick timer to start it*/
        SYSTICK->CTRL |= (SYSTICK_TIMER_START | Copy_Mode);
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SYSTICK_Start+0x58>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	4611      	mov	r1, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <SYSTICK_Start+0x58>)
 80014b2:	430b      	orrs	r3, r1
 80014b4:	6013      	str	r3, [r2, #0]

    }

    return Ret_ErrorStatus;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]

}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <SYSTICK_SetCallback>:
	SYSTICK->CTRL = 0;

}

SYSTICK_ErrorStatus_t SYSTICK_SetCallback(systickcbf_t cbf)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    SYSTICK_ErrorStatus_t Ret_ErrorStatus = SYSTICK_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]

    if(cbf == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <SYSTICK_SetCallback+0x16>
    {
        Ret_ErrorStatus = SYSTICK_NULL_PTR;
 80014da:	2302      	movs	r3, #2
 80014dc:	73fb      	strb	r3, [r7, #15]
    }

    if(Ret_ErrorStatus == SYSTICK_OK)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <SYSTICK_SetCallback+0x22>
    {
        G_systickcbf = cbf;
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <SYSTICK_SetCallback+0x30>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
    }

    return Ret_ErrorStatus;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	2000009c 	.word	0x2000009c

080014fc <SysTick_Handler>:


void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    if(G_systickcbf)
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Handler+0x18>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <SysTick_Handler+0x12>
    {
        G_systickcbf();
 8001508:	4b02      	ldr	r3, [pc, #8]	; (8001514 <SysTick_Handler+0x18>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4798      	blx	r3
    }
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000009c 	.word	0x2000009c

08001518 <UART_SetConfig>:
/*                                  IMPLEMENTATION                           	*/
/* ============================================================================ */


UART_ErrorStatus_t  UART_SetConfig(u8 UARTx, UART_Config_t* config)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6039      	str	r1, [r7, #0]
 8001520:	4601      	mov	r1, r0
 8001522:	71f9      	strb	r1, [r7, #7]
    UART_ErrorStatus_t Ret_ErrorStatus = UART_OK;
 8001524:	2100      	movs	r1, #0
 8001526:	75f9      	strb	r1, [r7, #23]
    u32 tmpReg;
    u32 uartdiv;
    u8 mantissa;
    u32 fraction;

    if(!IS_VALID_UART(UARTx))
 8001528:	79f9      	ldrb	r1, [r7, #7]
 800152a:	2900      	cmp	r1, #0
 800152c:	d008      	beq.n	8001540 <UART_SetConfig+0x28>
 800152e:	79f9      	ldrb	r1, [r7, #7]
 8001530:	2901      	cmp	r1, #1
 8001532:	d005      	beq.n	8001540 <UART_SetConfig+0x28>
 8001534:	79f9      	ldrb	r1, [r7, #7]
 8001536:	2902      	cmp	r1, #2
 8001538:	d002      	beq.n	8001540 <UART_SetConfig+0x28>
    {
        Ret_ErrorStatus = UART_INVALID_UART;
 800153a:	2102      	movs	r1, #2
 800153c:	75f9      	strb	r1, [r7, #23]
 800153e:	e03e      	b.n	80015be <UART_SetConfig+0xa6>
    }
    else if(!IS_VALID_BAUDRATE(config->BaudRate))
 8001540:	6839      	ldr	r1, [r7, #0]
 8001542:	6809      	ldr	r1, [r1, #0]
 8001544:	4872      	ldr	r0, [pc, #456]	; (8001710 <UART_SetConfig+0x1f8>)
 8001546:	4281      	cmp	r1, r0
 8001548:	d902      	bls.n	8001550 <UART_SetConfig+0x38>
    {
        Ret_ErrorStatus = UART_INVALID_BAUDRATE;
 800154a:	2103      	movs	r1, #3
 800154c:	75f9      	strb	r1, [r7, #23]
 800154e:	e036      	b.n	80015be <UART_SetConfig+0xa6>
    }
    else if(!IS_VALID_LENGTH(config->WordLength))
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	6849      	ldr	r1, [r1, #4]
 8001554:	2900      	cmp	r1, #0
 8001556:	d007      	beq.n	8001568 <UART_SetConfig+0x50>
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6849      	ldr	r1, [r1, #4]
 800155c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001560:	d002      	beq.n	8001568 <UART_SetConfig+0x50>
    {
        Ret_ErrorStatus = UART_INVALID_WORD_LENGTH;
 8001562:	2104      	movs	r1, #4
 8001564:	75f9      	strb	r1, [r7, #23]
 8001566:	e02a      	b.n	80015be <UART_SetConfig+0xa6>
    }
    else if(!IS_VALID_MODE(config->Mode))
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	68c9      	ldr	r1, [r1, #12]
 800156c:	2908      	cmp	r1, #8
 800156e:	d00a      	beq.n	8001586 <UART_SetConfig+0x6e>
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	68c9      	ldr	r1, [r1, #12]
 8001574:	2904      	cmp	r1, #4
 8001576:	d006      	beq.n	8001586 <UART_SetConfig+0x6e>
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	68c9      	ldr	r1, [r1, #12]
 800157c:	290c      	cmp	r1, #12
 800157e:	d002      	beq.n	8001586 <UART_SetConfig+0x6e>
    {
        Ret_ErrorStatus = UART_INVALID_MODE;
 8001580:	2105      	movs	r1, #5
 8001582:	75f9      	strb	r1, [r7, #23]
 8001584:	e01b      	b.n	80015be <UART_SetConfig+0xa6>
    }
    else if(!IS_VALID_PARITY(config->Parity))
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	6889      	ldr	r1, [r1, #8]
 800158a:	2900      	cmp	r1, #0
 800158c:	d00c      	beq.n	80015a8 <UART_SetConfig+0x90>
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	6889      	ldr	r1, [r1, #8]
 8001592:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001596:	d007      	beq.n	80015a8 <UART_SetConfig+0x90>
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	6889      	ldr	r1, [r1, #8]
 800159c:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80015a0:	d002      	beq.n	80015a8 <UART_SetConfig+0x90>
    {
        Ret_ErrorStatus = UART_INVALID_PARITY;
 80015a2:	2106      	movs	r1, #6
 80015a4:	75f9      	strb	r1, [r7, #23]
 80015a6:	e00a      	b.n	80015be <UART_SetConfig+0xa6>
    }
    else if(!IS_VALID_SAMPLING(config->Sampling))
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	6909      	ldr	r1, [r1, #16]
 80015ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80015b0:	d005      	beq.n	80015be <UART_SetConfig+0xa6>
 80015b2:	6839      	ldr	r1, [r7, #0]
 80015b4:	6909      	ldr	r1, [r1, #16]
 80015b6:	2900      	cmp	r1, #0
 80015b8:	d001      	beq.n	80015be <UART_SetConfig+0xa6>
    {
        Ret_ErrorStatus = UART_INVALID_SAMPLING;
 80015ba:	2107      	movs	r1, #7
 80015bc:	75f9      	strb	r1, [r7, #23]
    {
        /* do nothing */
    }


    if(Ret_ErrorStatus == UART_OK)
 80015be:	7df9      	ldrb	r1, [r7, #23]
 80015c0:	2900      	cmp	r1, #0
 80015c2:	f040 809a 	bne.w	80016fa <UART_SetConfig+0x1e2>
    {
        tmpReg = UARTs[UARTx]->CR1;
 80015c6:	79f9      	ldrb	r1, [r7, #7]
 80015c8:	4852      	ldr	r0, [pc, #328]	; (8001714 <UART_SetConfig+0x1fc>)
 80015ca:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80015ce:	68c9      	ldr	r1, [r1, #12]
 80015d0:	60f9      	str	r1, [r7, #12]
        tmpReg &= (~UART_MODE_MASK) | (~UART_RXNEIE_MASK) | (~UART_TXEIE_MASK) | (~UART_PARITY_MASK)|\
                    (~UART_LENGTH_MASK) | (~UART_SAMPLING_MASK);
        tmpReg |= (config->Mode) | (config->Parity) | (config->WordLength) | (config->Sampling) | (UART_UE_MASK);
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	68c8      	ldr	r0, [r1, #12]
 80015d6:	6839      	ldr	r1, [r7, #0]
 80015d8:	6889      	ldr	r1, [r1, #8]
 80015da:	4308      	orrs	r0, r1
 80015dc:	6839      	ldr	r1, [r7, #0]
 80015de:	6849      	ldr	r1, [r1, #4]
 80015e0:	4308      	orrs	r0, r1
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	6909      	ldr	r1, [r1, #16]
 80015e6:	4308      	orrs	r0, r1
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	4301      	orrs	r1, r0
 80015ec:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80015f0:	60f9      	str	r1, [r7, #12]
        UARTs[UARTx]->CR1 = tmpReg;
 80015f2:	79f9      	ldrb	r1, [r7, #7]
 80015f4:	4847      	ldr	r0, [pc, #284]	; (8001714 <UART_SetConfig+0x1fc>)
 80015f6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	60c8      	str	r0, [r1, #12]

        /* Calculate Mantissa and Fraction for BaudRate*/

        uartdiv = ((u64)_CLK_FREQ * 1000)/((2-(UARTs[UARTx]->CR1 & UART_SAMPLING_MASK)) * 8 * config->BaudRate);
 80015fe:	79f9      	ldrb	r1, [r7, #7]
 8001600:	4844      	ldr	r0, [pc, #272]	; (8001714 <UART_SetConfig+0x1fc>)
 8001602:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001606:	68c9      	ldr	r1, [r1, #12]
 8001608:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
 800160c:	f1c1 0102 	rsb	r1, r1, #2
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	6800      	ldr	r0, [r0, #0]
 8001614:	fb00 f101 	mul.w	r1, r0, r1
 8001618:	00c9      	lsls	r1, r1, #3
 800161a:	2000      	movs	r0, #0
 800161c:	460a      	mov	r2, r1
 800161e:	4603      	mov	r3, r0
 8001620:	a139      	add	r1, pc, #228	; (adr r1, 8001708 <UART_SetConfig+0x1f0>)
 8001622:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001626:	f7fe fdd7 	bl	80001d8 <__aeabi_uldivmod>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4613      	mov	r3, r2
 8001630:	60bb      	str	r3, [r7, #8]

        mantissa = uartdiv/1000;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4a38      	ldr	r2, [pc, #224]	; (8001718 <UART_SetConfig+0x200>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	75bb      	strb	r3, [r7, #22]

        fraction = (uartdiv % 1000) * ((2-(UARTs[UARTx]->CR1 & UART_SAMPLING_MASK)) * 8);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4a34      	ldr	r2, [pc, #208]	; (8001714 <UART_SetConfig+0x1fc>)
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800164c:	f1c3 0102 	rsb	r1, r3, #2
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <UART_SetConfig+0x200>)
 8001654:	fba3 0302 	umull	r0, r3, r3, r2
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165e:	fb00 f303 	mul.w	r3, r0, r3
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	613b      	str	r3, [r7, #16]
        

        if(fraction % 1000 >= 500)
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <UART_SetConfig+0x200>)
 8001670:	fba3 1302 	umull	r1, r3, r3, r2
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001684:	d307      	bcc.n	8001696 <UART_SetConfig+0x17e>
        {
            fraction = (fraction/1000) + 1 ;          
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4a23      	ldr	r2, [pc, #140]	; (8001718 <UART_SetConfig+0x200>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	099b      	lsrs	r3, r3, #6
 8001690:	3301      	adds	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	e005      	b.n	80016a2 <UART_SetConfig+0x18a>
        }
        else
        {
            fraction = fraction/1000;
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <UART_SetConfig+0x200>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	613b      	str	r3, [r7, #16]
        }

        if( ((UARTs[UARTx]->CR1 & UART_SAMPLING_MASK) == UART_SAMPLING_16) && (fraction > 15) )
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <UART_SetConfig+0x1fc>)
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <UART_SetConfig+0x1ac>
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d904      	bls.n	80016c4 <UART_SetConfig+0x1ac>
        {
            fraction = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
            mantissa++;
 80016be:	7dbb      	ldrb	r3, [r7, #22]
 80016c0:	3301      	adds	r3, #1
 80016c2:	75bb      	strb	r3, [r7, #22]
        }

        if( ((UARTs[UARTx]->CR1 & UART_SAMPLING_MASK) == UART_SAMPLING_8) && (fraction > 7) )
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <UART_SetConfig+0x1fc>)
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <UART_SetConfig+0x1ce>
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	2b07      	cmp	r3, #7
 80016da:	d904      	bls.n	80016e6 <UART_SetConfig+0x1ce>
        {
            fraction = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
            mantissa++;
 80016e0:	7dbb      	ldrb	r3, [r7, #22]
 80016e2:	3301      	adds	r3, #1
 80016e4:	75bb      	strb	r3, [r7, #22]
        }

        UARTs[UARTx]->BRR = (mantissa << MANTISSA_POS) | fraction;
 80016e6:	7dbb      	ldrb	r3, [r7, #22]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <UART_SetConfig+0x1fc>)
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]

    }

    return Ret_ErrorStatus;
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	f3af 8000 	nop.w
 8001708:	d21dba00 	.word	0xd21dba00
 800170c:	00000005 	.word	0x00000005
 8001710:	000f423f 	.word	0x000f423f
 8001714:	20000004 	.word	0x20000004
 8001718:	10624dd3 	.word	0x10624dd3

0800171c <UART_ConfigLIN>:
/*                      LIN FUNCTIONALITIES                            */
/* =================================================================== */


UART_ErrorStatus_t UART_ConfigLIN(u8 UARTx, UART_LIN_Config_t* Config)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
    UART_ErrorStatus_t Ret_ErrorStatus = UART_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
    u32 tempReg;

    if(!IS_VALID_UART(UARTx))
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d008      	beq.n	8001744 <UART_ConfigLIN+0x28>
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d005      	beq.n	8001744 <UART_ConfigLIN+0x28>
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d002      	beq.n	8001744 <UART_ConfigLIN+0x28>
    {
        Ret_ErrorStatus = UART_INVALID_UART;
 800173e:	2302      	movs	r3, #2
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e004      	b.n	800174e <UART_ConfigLIN+0x32>
    }
    else if( Config == NULL )
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <UART_ConfigLIN+0x32>
    {
        Ret_ErrorStatus = UART_NULL_PTR;
 800174a:	2308      	movs	r3, #8
 800174c:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == UART_OK)
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d116      	bne.n	8001782 <UART_ConfigLIN+0x66>
    {
        tempReg = UARTs[UARTx]->CR2;
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <UART_ConfigLIN+0x74>)
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	60bb      	str	r3, [r7, #8]
        tempReg &= (~UART_LINEN_MASK) | (~UART_LBDIE_MASK) | (~UART_LBDL_MASK);
        tempReg |= (Config->State) | (Config->BreakDetectLength) | (Config->BreakDetectInterrupt);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	431a      	orrs	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	4313      	orrs	r3, r2
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	4313      	orrs	r3, r2
 8001774:	60bb      	str	r3, [r7, #8]
        UARTs[UARTx]->CR2 = tempReg;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4a05      	ldr	r2, [pc, #20]	; (8001790 <UART_ConfigLIN+0x74>)
 800177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	611a      	str	r2, [r3, #16]
    }
}
 8001782:	bf00      	nop
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	20000004 	.word	0x20000004

08001794 <UART_TXLINBreak>:



UART_ErrorStatus_t UART_TXLINBreak(u8 UARTx)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
    UART_ErrorStatus_t Ret_ErrorStatus = UART_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]

    if(!IS_VALID_UART(UARTx))
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <UART_TXLINBreak+0x24>
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d004      	beq.n	80017b8 <UART_TXLINBreak+0x24>
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d001      	beq.n	80017b8 <UART_TXLINBreak+0x24>
    {
        Ret_ErrorStatus = UART_INVALID_UART;
 80017b4:	2302      	movs	r3, #2
 80017b6:	73fb      	strb	r3, [r7, #15]
    {
        /* do nothing */
    }


    if(Ret_ErrorStatus == UART_OK)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10b      	bne.n	80017d6 <UART_TXLINBreak+0x42>
    {
        /* send break */
        UARTs[UARTx]->CR1 |= UART_LIN_SEND_BREAK;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <UART_TXLINBreak+0x50>)
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4906      	ldr	r1, [pc, #24]	; (80017e4 <UART_TXLINBreak+0x50>)
 80017cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	60da      	str	r2, [r3, #12]
    }

    return Ret_ErrorStatus;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20000004 	.word	0x20000004

080017e8 <UART_SetLBDCallback>:


UART_ErrorStatus_t UART_SetLBDCallback(u8 UARTx, UART_LBDCallback_t cb)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
    UART_ErrorStatus_t Ret_ErrorStatus = UART_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]

    if(!IS_VALID_UART(UARTx))
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <UART_SetLBDCallback+0x26>
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d004      	beq.n	800180e <UART_SetLBDCallback+0x26>
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d001      	beq.n	800180e <UART_SetLBDCallback+0x26>
    {
        Ret_ErrorStatus = UART_INVALID_UART;
 800180a:	2302      	movs	r3, #2
 800180c:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == UART_OK)
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d104      	bne.n	800181e <UART_SetLBDCallback+0x36>
    {
        LBDCallbacks[UARTx] = cb;
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4905      	ldr	r1, [pc, #20]	; (800182c <UART_SetLBDCallback+0x44>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }

    return Ret_ErrorStatus;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000100 	.word	0x20000100

08001830 <USART1_IRQHandler>:
/*                              HANDLERS                               */
/* =================================================================== */


void USART1_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
    /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */
    if(UARTs[UART1]->SR & UART_LBD_MASK)
 8001834:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <USART1_IRQHandler+0xf0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00f      	beq.n	8001862 <USART1_IRQHandler+0x32>
    {
        /* Clear LBD Flag */
        UARTs[UART1]->SR &= ~UART_LBD_MASK;
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <USART1_IRQHandler+0xf0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <USART1_IRQHandler+0xf0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001850:	601a      	str	r2, [r3, #0]

        /* Call LBD Interrupt CB function if not NULL*/
        if(LBDCallbacks[UART1])
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <USART1_IRQHandler+0xf4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d05f      	beq.n	800191a <USART1_IRQHandler+0xea>
        {
            LBDCallbacks[UART1]();
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <USART1_IRQHandler+0xf4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4798      	blx	r3
                }

            }    
        }
    }    
} 
 8001860:	e05b      	b.n	800191a <USART1_IRQHandler+0xea>
        if(UARTs[UART1]->SR & UART_TXE_MASK)
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <USART1_IRQHandler+0xf0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186c:	2b00      	cmp	r3, #0
 800186e:	d023      	beq.n	80018b8 <USART1_IRQHandler+0x88>
            if(TXRequests[UART1_INDEX].Buffer.CurrIdx < TXRequests[UART1_INDEX].Buffer.Length)
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <USART1_IRQHandler+0xf8>)
 8001872:	88da      	ldrh	r2, [r3, #6]
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <USART1_IRQHandler+0xf8>)
 8001876:	889b      	ldrh	r3, [r3, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d20f      	bcs.n	800189c <USART1_IRQHandler+0x6c>
                UARTs[UART1]->DR = TXRequests[UART1_INDEX].Buffer.Data[TXRequests[UART1_INDEX].Buffer.CurrIdx];
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <USART1_IRQHandler+0xf8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a29      	ldr	r2, [pc, #164]	; (8001928 <USART1_IRQHandler+0xf8>)
 8001882:	88d2      	ldrh	r2, [r2, #6]
 8001884:	4413      	add	r3, r2
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <USART1_IRQHandler+0xf0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
                TXRequests[UART1_INDEX].Buffer.CurrIdx++;
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <USART1_IRQHandler+0xf8>)
 8001890:	88db      	ldrh	r3, [r3, #6]
 8001892:	3301      	adds	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <USART1_IRQHandler+0xf8>)
 8001898:	80da      	strh	r2, [r3, #6]
 800189a:	e00d      	b.n	80018b8 <USART1_IRQHandler+0x88>
                TXRequests[UART1_INDEX].State = READY;
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <USART1_IRQHandler+0xf8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	721a      	strb	r2, [r3, #8]
                UARTs[UART1]->CR1 &= ~UART_TXEIE_MASK;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <USART1_IRQHandler+0xf0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <USART1_IRQHandler+0xf0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b0:	60da      	str	r2, [r3, #12]
                TXRequests[UART1_INDEX].Cb();
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <USART1_IRQHandler+0xf8>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4798      	blx	r3
        if(UARTs[UART1]->SR & UART_RXNE_MASK)
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <USART1_IRQHandler+0xf0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d029      	beq.n	800191a <USART1_IRQHandler+0xea>
            if(RXRequests[UART1_INDEX].Buffer.CurrIdx < RXRequests[UART1_INDEX].Buffer.Length)
 80018c6:	4b19      	ldr	r3, [pc, #100]	; (800192c <USART1_IRQHandler+0xfc>)
 80018c8:	88da      	ldrh	r2, [r3, #6]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <USART1_IRQHandler+0xfc>)
 80018cc:	889b      	ldrh	r3, [r3, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d223      	bcs.n	800191a <USART1_IRQHandler+0xea>
                RXRequests[UART1_INDEX].Buffer.Data[RXRequests[UART1_INDEX].Buffer.CurrIdx] = UARTs[UART1]->DR;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <USART1_IRQHandler+0xf0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <USART1_IRQHandler+0xfc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a13      	ldr	r2, [pc, #76]	; (800192c <USART1_IRQHandler+0xfc>)
 80018de:	88d2      	ldrh	r2, [r2, #6]
 80018e0:	4413      	add	r3, r2
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
                RXRequests[UART1_INDEX].Buffer.CurrIdx++;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <USART1_IRQHandler+0xfc>)
 80018e8:	88db      	ldrh	r3, [r3, #6]
 80018ea:	3301      	adds	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <USART1_IRQHandler+0xfc>)
 80018f0:	80da      	strh	r2, [r3, #6]
                if(RXRequests[UART1_INDEX].Buffer.CurrIdx == RXRequests[UART1_INDEX].Buffer.Length)
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <USART1_IRQHandler+0xfc>)
 80018f4:	88da      	ldrh	r2, [r3, #6]
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <USART1_IRQHandler+0xfc>)
 80018f8:	889b      	ldrh	r3, [r3, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d10d      	bne.n	800191a <USART1_IRQHandler+0xea>
                    RXRequests[UART1_INDEX].State = READY;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <USART1_IRQHandler+0xfc>)
 8001900:	2200      	movs	r2, #0
 8001902:	721a      	strb	r2, [r3, #8]
                    UARTs[UART1]->CR1 &= ~UART_RXNEIE_MASK;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <USART1_IRQHandler+0xf0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <USART1_IRQHandler+0xf0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0220 	bic.w	r2, r2, #32
 8001912:	60da      	str	r2, [r3, #12]
                    RXRequests[UART1_INDEX].Cb();
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <USART1_IRQHandler+0xfc>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4798      	blx	r3
} 
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000004 	.word	0x20000004
 8001924:	20000100 	.word	0x20000100
 8001928:	200000a0 	.word	0x200000a0
 800192c:	200000d0 	.word	0x200000d0

08001930 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
    /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */
	if(UARTs[UART2]->SR & UART_LBD_MASK)
 8001934:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <USART2_IRQHandler+0xf0>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00f      	beq.n	8001962 <USART2_IRQHandler+0x32>
	{
		/* Clear LBD Flag */
		UARTs[UART2]->SR &= ~UART_LBD_MASK;
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <USART2_IRQHandler+0xf0>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <USART2_IRQHandler+0xf0>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001950:	601a      	str	r2, [r3, #0]

		/* Call LBD Interrupt CB function if not NULL*/
		if(LBDCallbacks[UART2])
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <USART2_IRQHandler+0xf4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d05f      	beq.n	8001a1a <USART2_IRQHandler+0xea>
		{
			LBDCallbacks[UART2]();
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <USART2_IRQHandler+0xf4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4798      	blx	r3
	            }

	        }
	    }
	}
} 
 8001960:	e05b      	b.n	8001a1a <USART2_IRQHandler+0xea>
	    if(UARTs[UART2]->SR & UART_TXE_MASK)
 8001962:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <USART2_IRQHandler+0xf0>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196c:	2b00      	cmp	r3, #0
 800196e:	d023      	beq.n	80019b8 <USART2_IRQHandler+0x88>
	        if(TXRequests[UART2_INDEX].Buffer.CurrIdx < TXRequests[UART2_INDEX].Buffer.Length)
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <USART2_IRQHandler+0xf8>)
 8001972:	8ada      	ldrh	r2, [r3, #22]
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <USART2_IRQHandler+0xf8>)
 8001976:	8a9b      	ldrh	r3, [r3, #20]
 8001978:	429a      	cmp	r2, r3
 800197a:	d20f      	bcs.n	800199c <USART2_IRQHandler+0x6c>
	            UARTs[UART2]->DR = TXRequests[UART2_INDEX].Buffer.Data[TXRequests[UART2_INDEX].Buffer.CurrIdx];
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <USART2_IRQHandler+0xf8>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	4a29      	ldr	r2, [pc, #164]	; (8001a28 <USART2_IRQHandler+0xf8>)
 8001982:	8ad2      	ldrh	r2, [r2, #22]
 8001984:	4413      	add	r3, r2
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <USART2_IRQHandler+0xf0>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	605a      	str	r2, [r3, #4]
	            TXRequests[UART2_INDEX].Buffer.CurrIdx++;
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <USART2_IRQHandler+0xf8>)
 8001990:	8adb      	ldrh	r3, [r3, #22]
 8001992:	3301      	adds	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <USART2_IRQHandler+0xf8>)
 8001998:	82da      	strh	r2, [r3, #22]
 800199a:	e00d      	b.n	80019b8 <USART2_IRQHandler+0x88>
	            TXRequests[UART2_INDEX].State = READY;
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <USART2_IRQHandler+0xf8>)
 800199e:	2200      	movs	r2, #0
 80019a0:	761a      	strb	r2, [r3, #24]
	            UARTs[UART2]->CR1 &= ~UART_TXEIE_MASK;
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <USART2_IRQHandler+0xf0>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <USART2_IRQHandler+0xf0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019b0:	60da      	str	r2, [r3, #12]
	            TXRequests[UART2_INDEX].Cb();
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <USART2_IRQHandler+0xf8>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4798      	blx	r3
	    if(UARTs[UART2]->SR & UART_RXNE_MASK)
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <USART2_IRQHandler+0xf0>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d029      	beq.n	8001a1a <USART2_IRQHandler+0xea>
	        if(RXRequests[UART2_INDEX].Buffer.CurrIdx < RXRequests[UART2_INDEX].Buffer.Length)
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <USART2_IRQHandler+0xfc>)
 80019c8:	8ada      	ldrh	r2, [r3, #22]
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <USART2_IRQHandler+0xfc>)
 80019cc:	8a9b      	ldrh	r3, [r3, #20]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d223      	bcs.n	8001a1a <USART2_IRQHandler+0xea>
	            RXRequests[UART2_INDEX].Buffer.Data[RXRequests[UART2_INDEX].Buffer.CurrIdx] = UARTs[UART2]->DR;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <USART2_IRQHandler+0xf0>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <USART2_IRQHandler+0xfc>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <USART2_IRQHandler+0xfc>)
 80019de:	8ad2      	ldrh	r2, [r2, #22]
 80019e0:	4413      	add	r3, r2
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
	            RXRequests[UART2_INDEX].Buffer.CurrIdx++;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <USART2_IRQHandler+0xfc>)
 80019e8:	8adb      	ldrh	r3, [r3, #22]
 80019ea:	3301      	adds	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <USART2_IRQHandler+0xfc>)
 80019f0:	82da      	strh	r2, [r3, #22]
	            if(RXRequests[UART2_INDEX].Buffer.CurrIdx == RXRequests[UART2_INDEX].Buffer.Length)
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <USART2_IRQHandler+0xfc>)
 80019f4:	8ada      	ldrh	r2, [r3, #22]
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <USART2_IRQHandler+0xfc>)
 80019f8:	8a9b      	ldrh	r3, [r3, #20]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d10d      	bne.n	8001a1a <USART2_IRQHandler+0xea>
	                RXRequests[UART2_INDEX].State = READY;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <USART2_IRQHandler+0xfc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	761a      	strb	r2, [r3, #24]
	                UARTs[UART2]->CR1 &= ~UART_RXNEIE_MASK;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <USART2_IRQHandler+0xf0>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <USART2_IRQHandler+0xf0>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f022 0220 	bic.w	r2, r2, #32
 8001a12:	60da      	str	r2, [r3, #12]
	                RXRequests[UART2_INDEX].Cb();
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <USART2_IRQHandler+0xfc>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	4798      	blx	r3
} 
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000004 	.word	0x20000004
 8001a24:	20000100 	.word	0x20000100
 8001a28:	200000a0 	.word	0x200000a0
 8001a2c:	200000d0 	.word	0x200000d0

08001a30 <USART6_IRQHandler>:


void USART6_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
    /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */

    if(UARTs[UART6]->SR & UART_LBD_MASK)
 8001a34:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00f      	beq.n	8001a62 <USART6_IRQHandler+0x32>
    {
        /* Clear LBD Flag */
        UARTs[UART6]->SR &= ~UART_LBD_MASK;
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a50:	601a      	str	r2, [r3, #0]

        /* Call LBD Interrupt CB function if not NULL*/
        if(LBDCallbacks[UART6])
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <USART6_IRQHandler+0xf8>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d061      	beq.n	8001b1e <USART6_IRQHandler+0xee>
        {
            LBDCallbacks[UART6]();
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <USART6_IRQHandler+0xf8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4798      	blx	r3

            }    
        }

    }  
} 
 8001a60:	e05d      	b.n	8001b1e <USART6_IRQHandler+0xee>
        if(UARTs[UART6]->SR & UART_TXE_MASK)
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d024      	beq.n	8001aba <USART6_IRQHandler+0x8a>
            if(TXRequests[UART6_INDEX].Buffer.CurrIdx < TXRequests[UART6_INDEX].Buffer.Length)
 8001a70:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <USART6_IRQHandler+0xfc>)
 8001a72:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <USART6_IRQHandler+0xfc>)
 8001a76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d20f      	bcs.n	8001a9c <USART6_IRQHandler+0x6c>
                UARTs[UART6]->DR = TXRequests[UART6_INDEX].Buffer.Data[TXRequests[UART6_INDEX].Buffer.CurrIdx];
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <USART6_IRQHandler+0xfc>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <USART6_IRQHandler+0xfc>)
 8001a82:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001a84:	4413      	add	r3, r2
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	605a      	str	r2, [r3, #4]
                TXRequests[UART6_INDEX].Buffer.CurrIdx++;
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <USART6_IRQHandler+0xfc>)
 8001a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a92:	3301      	adds	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <USART6_IRQHandler+0xfc>)
 8001a98:	84da      	strh	r2, [r3, #38]	; 0x26
 8001a9a:	e00e      	b.n	8001aba <USART6_IRQHandler+0x8a>
                TXRequests[UART6_INDEX].State = READY;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <USART6_IRQHandler+0xfc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                UARTs[UART6]->CR1 &= ~UART_TXEIE_MASK;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ab2:	60da      	str	r2, [r3, #12]
                TXRequests[UART6_INDEX].Cb();
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <USART6_IRQHandler+0xfc>)
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	4798      	blx	r3
        if(UARTs[UART6]->SR & UART_RXNE_MASK)
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d02a      	beq.n	8001b1e <USART6_IRQHandler+0xee>
            if(RXRequests[UART6_INDEX].Buffer.CurrIdx < RXRequests[UART6_INDEX].Buffer.Length)
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001aca:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001ace:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d224      	bcs.n	8001b1e <USART6_IRQHandler+0xee>
                RXRequests[UART6_INDEX].Buffer.Data[RXRequests[UART6_INDEX].Buffer.CurrIdx] = UARTs[UART6]->DR;
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001ae0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
                RXRequests[UART6_INDEX].Buffer.CurrIdx++;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aec:	3301      	adds	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001af2:	84da      	strh	r2, [r3, #38]	; 0x26
                if(RXRequests[UART6_INDEX].Buffer.CurrIdx == RXRequests[UART6_INDEX].Buffer.Length)
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001af6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001af8:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10e      	bne.n	8001b1e <USART6_IRQHandler+0xee>
                    RXRequests[UART6_INDEX].State = READY;
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    UARTs[UART6]->CR1 &= ~UART_RXNEIE_MASK;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <USART6_IRQHandler+0xf4>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f022 0220 	bic.w	r2, r2, #32
 8001b16:	60da      	str	r2, [r3, #12]
                    RXRequests[UART6_INDEX].Cb();
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <USART6_IRQHandler+0x100>)
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	4798      	blx	r3
} 
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000004 	.word	0x20000004
 8001b28:	20000100 	.word	0x20000100
 8001b2c:	200000a0 	.word	0x200000a0
 8001b30:	200000d0 	.word	0x200000d0

08001b34 <SCHED_IncTicksPending>:
/* ============================================================================ */
/*                                  STATIC FUNCTIONS                           	*/
/* ============================================================================ */

static void SCHED_IncTicksPending(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
    G_SchedTicksPending++;
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SCHED_IncTicksPending+0x18>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	4a03      	ldr	r2, [pc, #12]	; (8001b4c <SCHED_IncTicksPending+0x18>)
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	20000010 	.word	0x20000010

08001b50 <SCHED_Scheduler>:

static void SCHED_Scheduler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
    u16 currRun;

    for(currRun =0; currRun < _NUM_RUNNABLE; currRun++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	80fb      	strh	r3, [r7, #6]
 8001b5a:	e02b      	b.n	8001bb4 <SCHED_Scheduler+0x64>
    {
        if( (RunnablesInfo[currRun].runnable->cb) && (RunnablesInfo[currRun].remainingTimeMs == 0) )
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <SCHED_Scheduler+0x74>)
 8001b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d016      	beq.n	8001b98 <SCHED_Scheduler+0x48>
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4a15      	ldr	r2, [pc, #84]	; (8001bc4 <SCHED_Scheduler+0x74>)
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10f      	bne.n	8001b98 <SCHED_Scheduler+0x48>
        {
            RunnablesInfo[currRun].runnable->cb();
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <SCHED_Scheduler+0x74>)
 8001b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	4798      	blx	r3
            RunnablesInfo[currRun].remainingTimeMs = RunnablesInfo[currRun].runnable->periodicityMs;
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	4a0f      	ldr	r2, [pc, #60]	; (8001bc4 <SCHED_Scheduler+0x74>)
 8001b88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	6852      	ldr	r2, [r2, #4]
 8001b90:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <SCHED_Scheduler+0x74>)
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	605a      	str	r2, [r3, #4]
        }

        RunnablesInfo[currRun].remainingTimeMs -= SCHED_TICK_PERIOD_MS;
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SCHED_Scheduler+0x74>)
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	3a02      	subs	r2, #2
 8001ba6:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <SCHED_Scheduler+0x74>)
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	605a      	str	r2, [r3, #4]
    for(currRun =0; currRun < _NUM_RUNNABLE; currRun++)
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	80fb      	strh	r3, [r7, #6]
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d9d0      	bls.n	8001b5c <SCHED_Scheduler+0xc>
    }
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2000010c 	.word	0x2000010c

08001bc8 <SCHED_Init>:
/*                                  IMPLEMENTATION                           	*/
/* ============================================================================ */


void SCHED_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
    u16 currRun;

    for(currRun = 0; currRun < _NUM_RUNNABLE; currRun++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	e017      	b.n	8001c04 <SCHED_Init+0x3c>
    {
        RunnablesInfo[currRun].runnable = &Runnables[currRun];
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	88f9      	ldrh	r1, [r7, #6]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <SCHED_Init+0x58>)
 8001be2:	4413      	add	r3, r2
 8001be4:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <SCHED_Init+0x5c>)
 8001be6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        RunnablesInfo[currRun].remainingTimeMs = RunnablesInfo[currRun].runnable->delayMs;
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <SCHED_Init+0x5c>)
 8001bee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	68d2      	ldr	r2, [r2, #12]
 8001bf6:	490b      	ldr	r1, [pc, #44]	; (8001c24 <SCHED_Init+0x5c>)
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	605a      	str	r2, [r3, #4]
    for(currRun = 0; currRun < _NUM_RUNNABLE; currRun++)
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	3301      	adds	r3, #1
 8001c02:	80fb      	strh	r3, [r7, #6]
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d9e4      	bls.n	8001bd4 <SCHED_Init+0xc>
    }

    SYSTICK_SetTimeMs(SCHED_TICK_PERIOD_MS);
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f7ff fc00 	bl	8001410 <SYSTICK_SetTimeMs>
    SYSTICK_SetCallback(SCHED_IncTicksPending);
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <SCHED_Init+0x60>)
 8001c12:	f7ff fc59 	bl	80014c8 <SYSTICK_SetCallback>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000014 	.word	0x20000014
 8001c24:	2000010c 	.word	0x2000010c
 8001c28:	08001b35 	.word	0x08001b35

08001c2c <SCHED_Start>:

void SCHED_Start(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    SYSTICK_Start(SYSTICK_MODE_PERIODIC);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff fc1b 	bl	800146c <SYSTICK_Start>

    while(1)
    {
        if(G_SchedTicksPending != 0)
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <SCHED_Start+0x24>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0fb      	beq.n	8001c36 <SCHED_Start+0xa>
        {
            G_SchedTicksPending--;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SCHED_Start+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	4a02      	ldr	r2, [pc, #8]	; (8001c50 <SCHED_Start+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
            SCHED_Scheduler();
 8001c48:	f7ff ff82 	bl	8001b50 <SCHED_Scheduler>
        if(G_SchedTicksPending != 0)
 8001c4c:	e7f3      	b.n	8001c36 <SCHED_Start+0xa>
 8001c4e:	bf00      	nop
 8001c50:	20000010 	.word	0x20000010

08001c54 <Reset_Handler>:
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <LoopForever+0x2>)
 8001c56:	4685      	mov	sp, r0
 8001c58:	f3af 8000 	nop.w
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <LoopForever+0x6>)
 8001c5e:	490d      	ldr	r1, [pc, #52]	; (8001c94 <LoopForever+0xa>)
 8001c60:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <LoopForever+0xe>)
 8001c62:	2300      	movs	r3, #0
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:
 8001c66:	58d4      	ldr	r4, [r2, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:
 8001c6c:	18c4      	adds	r4, r0, r3
 8001c6e:	428c      	cmp	r4, r1
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <LoopForever+0x12>)
 8001c74:	4c0a      	ldr	r4, [pc, #40]	; (8001ca0 <LoopForever+0x16>)
 8001c76:	2300      	movs	r3, #0
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:
 8001c7e:	42a2      	cmp	r2, r4
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>
 8001c82:	f000 f811 	bl	8001ca8 <__libc_init_array>
 8001c86:	f7fe fc3f 	bl	8000508 <main>

08001c8a <LoopForever>:
 8001c8a:	e7fe      	b.n	8001c8a <LoopForever>
 8001c8c:	20010000 	.word	0x20010000
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000064 	.word	0x20000064
 8001c98:	08001d6c 	.word	0x08001d6c
 8001c9c:	20000064 	.word	0x20000064
 8001ca0:	2000012c 	.word	0x2000012c

08001ca4 <ADC_IRQHandler>:
 8001ca4:	e7fe      	b.n	8001ca4 <ADC_IRQHandler>
	...

08001ca8 <__libc_init_array>:
 8001ca8:	b570      	push	{r4, r5, r6, lr}
 8001caa:	4d0d      	ldr	r5, [pc, #52]	; (8001ce0 <__libc_init_array+0x38>)
 8001cac:	4c0d      	ldr	r4, [pc, #52]	; (8001ce4 <__libc_init_array+0x3c>)
 8001cae:	1b64      	subs	r4, r4, r5
 8001cb0:	10a4      	asrs	r4, r4, #2
 8001cb2:	2600      	movs	r6, #0
 8001cb4:	42a6      	cmp	r6, r4
 8001cb6:	d109      	bne.n	8001ccc <__libc_init_array+0x24>
 8001cb8:	4d0b      	ldr	r5, [pc, #44]	; (8001ce8 <__libc_init_array+0x40>)
 8001cba:	4c0c      	ldr	r4, [pc, #48]	; (8001cec <__libc_init_array+0x44>)
 8001cbc:	f000 f818 	bl	8001cf0 <_init>
 8001cc0:	1b64      	subs	r4, r4, r5
 8001cc2:	10a4      	asrs	r4, r4, #2
 8001cc4:	2600      	movs	r6, #0
 8001cc6:	42a6      	cmp	r6, r4
 8001cc8:	d105      	bne.n	8001cd6 <__libc_init_array+0x2e>
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cd0:	4798      	blx	r3
 8001cd2:	3601      	adds	r6, #1
 8001cd4:	e7ee      	b.n	8001cb4 <__libc_init_array+0xc>
 8001cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cda:	4798      	blx	r3
 8001cdc:	3601      	adds	r6, #1
 8001cde:	e7f2      	b.n	8001cc6 <__libc_init_array+0x1e>
 8001ce0:	08001d64 	.word	0x08001d64
 8001ce4:	08001d64 	.word	0x08001d64
 8001ce8:	08001d64 	.word	0x08001d64
 8001cec:	08001d68 	.word	0x08001d68

08001cf0 <_init>:
 8001cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf2:	bf00      	nop
 8001cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf6:	bc08      	pop	{r3}
 8001cf8:	469e      	mov	lr, r3
 8001cfa:	4770      	bx	lr

08001cfc <_fini>:
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfe:	bf00      	nop
 8001d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d02:	bc08      	pop	{r3}
 8001d04:	469e      	mov	lr, r3
 8001d06:	4770      	bx	lr
