
stm32f401Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002018  08002018  00012018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002048  08002048  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002048  08002048  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002048  08002048  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002048  08002048  00012048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800204c  0800204c  0001204c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003dc4  20000014  08002064  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003dd8  08002064  00023dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004237  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f29  00000000  00000000  000242be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000448  00000000  00000000  000251e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000322  00000000  00000000  00025630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001df8  00000000  00000000  00025952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004705  00000000  00000000  0002774a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00010ad7  00000000  00000000  0002be4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f74  00000000  00000000  0003c928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0003d89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002000 	.word	0x08002000

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08002000 	.word	0x08002000

080001e0 <vTaskCode>:

#include "HAL/LED/LED.h"


void vTaskCode( void * pvParameters )
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]

	configASSERT( ( ( uint32_t ) pvParameters ) == 1 );
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d00a      	beq.n	8000204 <vTaskCode+0x24>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80001ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001f2:	f383 8811 	msr	BASEPRI, r3
 80001f6:	f3bf 8f6f 	isb	sy
 80001fa:	f3bf 8f4f 	dsb	sy
 80001fe:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000200:	bf00      	nop
 8000202:	e7fe      	b.n	8000202 <vTaskCode+0x22>
	u8 state = LED_STATE_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	75fb      	strb	r3, [r7, #23]


	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000208:	f001 fbf0 	bl	80019ec <xTaskGetTickCount>
 800020c:	4603      	mov	r3, r0
 800020e:	60bb      	str	r3, [r7, #8]
	const TickType_t xFrequency = pdMS_TO_TICKS(1000);
 8000210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000214:	613b      	str	r3, [r7, #16]

	for (;;) {
	    // Perform task operation
	    vTaskDelayUntil(&xLastWakeTime, xFrequency); // Wait until next 1000 milliseconds
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	6939      	ldr	r1, [r7, #16]
 800021c:	4618      	mov	r0, r3
 800021e:	f001 fa11 	bl	8001644 <xTaskDelayUntil>
		LED_SetState(BLINKING_LED, state);
 8000222:	7dfb      	ldrb	r3, [r7, #23]
 8000224:	4619      	mov	r1, r3
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8ac 	bl	8000384 <LED_SetState>
		state = !state;
 800022c:	7dfb      	ldrb	r3, [r7, #23]
 800022e:	2b00      	cmp	r3, #0
 8000230:	bf0c      	ite	eq
 8000232:	2301      	moveq	r3, #1
 8000234:	2300      	movne	r3, #0
 8000236:	b2db      	uxtb	r3, r3
 8000238:	75fb      	strb	r3, [r7, #23]
	    vTaskDelayUntil(&xLastWakeTime, xFrequency); // Wait until next 1000 milliseconds
 800023a:	e7ec      	b.n	8000216 <vTaskCode+0x36>

0800023c <main>:


}

int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af02      	add	r7, sp, #8

    RCC_EnableClk(RCC_CLK_HSE);
 8000242:	2001      	movs	r0, #1
 8000244:	f000 fad4 	bl	80007f0 <RCC_EnableClk>
    RCC_SetSystemClk(RCC_SYSCLK_HSE);
 8000248:	2001      	movs	r0, #1
 800024a:	f000 fb7f 	bl	800094c <RCC_SetSystemClk>

    RCC_EnablePeripheral(RCC_GPIOA);
 800024e:	f04f 0000 	mov.w	r0, #0
 8000252:	f04f 0103 	mov.w	r1, #3
 8000256:	f000 fbb5 	bl	80009c4 <RCC_EnablePeripheral>
    RCC_EnablePeripheral(RCC_GPIOC);
 800025a:	f04f 0002 	mov.w	r0, #2
 800025e:	f04f 0103 	mov.w	r1, #3
 8000262:	f000 fbaf 	bl	80009c4 <RCC_EnablePeripheral>


    LED_Init();
 8000266:	f000 f811 	bl	800028c <LED_Init>

    xTaskCreate(vTaskCode,             // Task function
 800026a:	2300      	movs	r3, #0
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	2301      	movs	r3, #1
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	2301      	movs	r3, #1
 8000274:	2280      	movs	r2, #128	; 0x80
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <main+0x48>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <main+0x4c>)
 800027a:	f001 f885 	bl	8001388 <xTaskCreate>
                   (void*)1,                     // Task parameters (not used here)
                   tskIDLE_PRIORITY + 1,     // Priority
                   NULL);


    vTaskStartScheduler();
 800027e:	f001 fa5f 	bl	8001740 <vTaskStartScheduler>

    while(1)
 8000282:	e7fe      	b.n	8000282 <main+0x46>
 8000284:	08002018 	.word	0x08002018
 8000288:	080001e1 	.word	0x080001e1

0800028c <LED_Init>:
/* ============================================================================ */
/*                                  IMPLEMENTATION                           	*/
/* ============================================================================ */

LED_ErrorStatus_t LED_Init(void)
{
 800028c:	b5b0      	push	{r4, r5, r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
    LED_ErrorStatus_t Ret_ErrorStatus = LED_OK;
 8000292:	2300      	movs	r3, #0
 8000294:	75fb      	strb	r3, [r7, #23]
    GPIO_Pin_t Local_Led;
    u8 Local_iter;
    Local_Led.Mode = GPIO_MODE_OP_PP;
 8000296:	2301      	movs	r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
    Local_Led.Speed = GPIO_SPEED_HIGH;
 800029a:	2302      	movs	r3, #2
 800029c:	60fb      	str	r3, [r7, #12]
    Local_Led.AF = GPIO_AF_SYSTEM;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]

    for(Local_iter = 0; Local_iter < _LED_NUM; Local_iter++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	75bb      	strb	r3, [r7, #22]
 80002a6:	e060      	b.n	800036a <LED_Init+0xde>
    {
        if(!IS_LED_STATE(Leds[Local_iter].InitState))
 80002a8:	7dba      	ldrb	r2, [r7, #22]
 80002aa:	4935      	ldr	r1, [pc, #212]	; (8000380 <LED_Init+0xf4>)
 80002ac:	4613      	mov	r3, r2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	4413      	add	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	440b      	add	r3, r1
 80002b6:	3309      	adds	r3, #9
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d00d      	beq.n	80002da <LED_Init+0x4e>
 80002be:	7dba      	ldrb	r2, [r7, #22]
 80002c0:	492f      	ldr	r1, [pc, #188]	; (8000380 <LED_Init+0xf4>)
 80002c2:	4613      	mov	r3, r2
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	4413      	add	r3, r2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	440b      	add	r3, r1
 80002cc:	3309      	adds	r3, #9
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d002      	beq.n	80002da <LED_Init+0x4e>
        {
            Ret_ErrorStatus = LED_INVALID_STATE;
 80002d4:	2302      	movs	r3, #2
 80002d6:	75fb      	strb	r3, [r7, #23]
 80002d8:	e041      	b.n	800035e <LED_Init+0xd2>
        }
        else
        {
            Local_Led.Port = Leds[Local_iter].Port;
 80002da:	7dba      	ldrb	r2, [r7, #22]
 80002dc:	4928      	ldr	r1, [pc, #160]	; (8000380 <LED_Init+0xf4>)
 80002de:	4613      	mov	r3, r2
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	4413      	add	r3, r2
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	440b      	add	r3, r1
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	603b      	str	r3, [r7, #0]
            Local_Led.Pin = Leds[Local_iter].Pin;
 80002ec:	7dba      	ldrb	r2, [r7, #22]
 80002ee:	4924      	ldr	r1, [pc, #144]	; (8000380 <LED_Init+0xf4>)
 80002f0:	4613      	mov	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	4413      	add	r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	440b      	add	r3, r1
 80002fa:	3304      	adds	r3, #4
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	607b      	str	r3, [r7, #4]
            Ret_ErrorStatus = GPIO_Init(&Local_Led);
 8000300:	463b      	mov	r3, r7
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f882 	bl	800040c <GPIO_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	75fb      	strb	r3, [r7, #23]
            GPIO_SetPinState(Leds[Local_iter].Port, Leds[Local_iter].Pin, Leds[Local_iter].InitState ^ Leds[Local_iter].Connection);
 800030c:	7dba      	ldrb	r2, [r7, #22]
 800030e:	491c      	ldr	r1, [pc, #112]	; (8000380 <LED_Init+0xf4>)
 8000310:	4613      	mov	r3, r2
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	4413      	add	r3, r2
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	440b      	add	r3, r1
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	7dba      	ldrb	r2, [r7, #22]
 800031e:	4918      	ldr	r1, [pc, #96]	; (8000380 <LED_Init+0xf4>)
 8000320:	4613      	mov	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	440b      	add	r3, r1
 800032a:	3304      	adds	r3, #4
 800032c:	681c      	ldr	r4, [r3, #0]
 800032e:	7dba      	ldrb	r2, [r7, #22]
 8000330:	4913      	ldr	r1, [pc, #76]	; (8000380 <LED_Init+0xf4>)
 8000332:	4613      	mov	r3, r2
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	4413      	add	r3, r2
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	440b      	add	r3, r1
 800033c:	3309      	adds	r3, #9
 800033e:	7819      	ldrb	r1, [r3, #0]
 8000340:	7dba      	ldrb	r2, [r7, #22]
 8000342:	4d0f      	ldr	r5, [pc, #60]	; (8000380 <LED_Init+0xf4>)
 8000344:	4613      	mov	r3, r2
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	4413      	add	r3, r2
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	442b      	add	r3, r5
 800034e:	3308      	adds	r3, #8
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	404b      	eors	r3, r1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	4621      	mov	r1, r4
 800035a:	f000 f9f9 	bl	8000750 <GPIO_SetPinState>
        }

        if(Ret_ErrorStatus != LED_OK)
 800035e:	7dfb      	ldrb	r3, [r7, #23]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d106      	bne.n	8000372 <LED_Init+0xe6>
    for(Local_iter = 0; Local_iter < _LED_NUM; Local_iter++)
 8000364:	7dbb      	ldrb	r3, [r7, #22]
 8000366:	3301      	adds	r3, #1
 8000368:	75bb      	strb	r3, [r7, #22]
 800036a:	7dbb      	ldrb	r3, [r7, #22]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d99b      	bls.n	80002a8 <LED_Init+0x1c>
 8000370:	e000      	b.n	8000374 <LED_Init+0xe8>
        {
            break;
 8000372:	bf00      	nop
        }
    }

    return Ret_ErrorStatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bdb0      	pop	{r4, r5, r7, pc}
 800037e:	bf00      	nop
 8000380:	08002030 	.word	0x08002030

08000384 <LED_SetState>:


LED_ErrorStatus_t LED_SetState(LED_ID_t Copy_LedID, u8 Copy_State)
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	460a      	mov	r2, r1
 800038e:	71fb      	strb	r3, [r7, #7]
 8000390:	4613      	mov	r3, r2
 8000392:	71bb      	strb	r3, [r7, #6]
    LED_ErrorStatus_t Ret_ErrorStatus = LED_OK;
 8000394:	2300      	movs	r3, #0
 8000396:	73fb      	strb	r3, [r7, #15]

    if(Copy_LedID >= _LED_NUM)
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d902      	bls.n	80003a4 <LED_SetState+0x20>
    {
        Ret_ErrorStatus = LED_INVALID_ID;
 800039e:	2303      	movs	r3, #3
 80003a0:	73fb      	strb	r3, [r7, #15]
 80003a2:	e007      	b.n	80003b4 <LED_SetState+0x30>
    }
    else if(!IS_LED_STATE(Copy_State))
 80003a4:	79bb      	ldrb	r3, [r7, #6]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d004      	beq.n	80003b4 <LED_SetState+0x30>
 80003aa:	79bb      	ldrb	r3, [r7, #6]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <LED_SetState+0x30>
    {
        Ret_ErrorStatus = LED_INVALID_STATE;
 80003b0:	2302      	movs	r3, #2
 80003b2:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == LED_OK)
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d121      	bne.n	80003fe <LED_SetState+0x7a>
    {
        Ret_ErrorStatus = GPIO_SetPinState(Leds[Copy_LedID].Port, Leds[Copy_LedID].Pin, Copy_State ^ Leds[Copy_LedID].Connection);
 80003ba:	79fa      	ldrb	r2, [r7, #7]
 80003bc:	4912      	ldr	r1, [pc, #72]	; (8000408 <LED_SetState+0x84>)
 80003be:	4613      	mov	r3, r2
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	6818      	ldr	r0, [r3, #0]
 80003ca:	79fa      	ldrb	r2, [r7, #7]
 80003cc:	490e      	ldr	r1, [pc, #56]	; (8000408 <LED_SetState+0x84>)
 80003ce:	4613      	mov	r3, r2
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	4413      	add	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	440b      	add	r3, r1
 80003d8:	3304      	adds	r3, #4
 80003da:	6819      	ldr	r1, [r3, #0]
 80003dc:	79fa      	ldrb	r2, [r7, #7]
 80003de:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <LED_SetState+0x84>)
 80003e0:	4613      	mov	r3, r2
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	4413      	add	r3, r2
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	4423      	add	r3, r4
 80003ea:	3308      	adds	r3, #8
 80003ec:	781a      	ldrb	r2, [r3, #0]
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	4053      	eors	r3, r2
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	461a      	mov	r2, r3
 80003f6:	f000 f9ab 	bl	8000750 <GPIO_SetPinState>
 80003fa:	4603      	mov	r3, r0
 80003fc:	73fb      	strb	r3, [r7, #15]
    }

    return Ret_ErrorStatus;
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	bd90      	pop	{r4, r7, pc}
 8000408:	08002030 	.word	0x08002030

0800040c <GPIO_Init>:
/* ========================================================================================= */
/*                                      IMPLEMENTATION                                       */
/* ========================================================================================= */

GPIO_ErrorStatus_t GPIO_Init(GPIO_Pin_t* ADD_Config)
{
 800040c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000410:	b08c      	sub	sp, #48	; 0x30
 8000412:	af00      	add	r7, sp, #0
 8000414:	61f8      	str	r0, [r7, #28]
    GPIO_ErrorStatus_t Ret_ErrorStatus = GPIO_OK;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    u32 Local_TmpReg;
    u64 Local_AFTmpReg; /* AFH and AFL are treated as one 64bit Register */

    if(ADD_Config == NULL)
 800041c:	69fb      	ldr	r3, [r7, #28]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d103      	bne.n	800042a <GPIO_Init+0x1e>
    {
        Ret_ErrorStatus = GPIO_NULLPTR;
 8000422:	2302      	movs	r3, #2
 8000424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000428:	e0af      	b.n	800058a <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_PORT(ADD_Config->Port))
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a38      	ldr	r2, [pc, #224]	; (8000510 <GPIO_Init+0x104>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d00d      	beq.n	8000450 <GPIO_Init+0x44>
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a36      	ldr	r2, [pc, #216]	; (8000514 <GPIO_Init+0x108>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d008      	beq.n	8000450 <GPIO_Init+0x44>
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a35      	ldr	r2, [pc, #212]	; (8000518 <GPIO_Init+0x10c>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d003      	beq.n	8000450 <GPIO_Init+0x44>
    {
        Ret_ErrorStatus = GPIO_INVALID_PORT;
 8000448:	2305      	movs	r3, #5
 800044a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800044e:	e09c      	b.n	800058a <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_PIN(ADD_Config->Pin))
 8000450:	69fb      	ldr	r3, [r7, #28]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	2b0f      	cmp	r3, #15
 8000456:	d903      	bls.n	8000460 <GPIO_Init+0x54>
    {
        Ret_ErrorStatus = GPIO_INVALID_PIN;
 8000458:	2306      	movs	r3, #6
 800045a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800045e:	e094      	b.n	800058a <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_MODE(ADD_Config->Mode))
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d04b      	beq.n	8000500 <GPIO_Init+0xf4>
 8000468:	69fb      	ldr	r3, [r7, #28]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d047      	beq.n	8000500 <GPIO_Init+0xf4>
 8000470:	69fb      	ldr	r3, [r7, #28]
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	2b08      	cmp	r3, #8
 8000476:	d043      	beq.n	8000500 <GPIO_Init+0xf4>
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	2b10      	cmp	r3, #16
 800047e:	d03f      	beq.n	8000500 <GPIO_Init+0xf4>
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d03b      	beq.n	8000500 <GPIO_Init+0xf4>
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d037      	beq.n	8000500 <GPIO_Init+0xf4>
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	2b09      	cmp	r3, #9
 8000496:	d033      	beq.n	8000500 <GPIO_Init+0xf4>
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	2b11      	cmp	r3, #17
 800049e:	d02f      	beq.n	8000500 <GPIO_Init+0xf4>
 80004a0:	69fb      	ldr	r3, [r7, #28]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	2b05      	cmp	r3, #5
 80004a6:	d02b      	beq.n	8000500 <GPIO_Init+0xf4>
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	2b0d      	cmp	r3, #13
 80004ae:	d027      	beq.n	8000500 <GPIO_Init+0xf4>
 80004b0:	69fb      	ldr	r3, [r7, #28]
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	2b15      	cmp	r3, #21
 80004b6:	d023      	beq.n	8000500 <GPIO_Init+0xf4>
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	689b      	ldr	r3, [r3, #8]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d01f      	beq.n	8000500 <GPIO_Init+0xf4>
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d01b      	beq.n	8000500 <GPIO_Init+0xf4>
 80004c8:	69fb      	ldr	r3, [r7, #28]
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	2b0a      	cmp	r3, #10
 80004ce:	d017      	beq.n	8000500 <GPIO_Init+0xf4>
 80004d0:	69fb      	ldr	r3, [r7, #28]
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	2b12      	cmp	r3, #18
 80004d6:	d013      	beq.n	8000500 <GPIO_Init+0xf4>
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b06      	cmp	r3, #6
 80004de:	d00f      	beq.n	8000500 <GPIO_Init+0xf4>
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	2b0e      	cmp	r3, #14
 80004e6:	d00b      	beq.n	8000500 <GPIO_Init+0xf4>
 80004e8:	69fb      	ldr	r3, [r7, #28]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b16      	cmp	r3, #22
 80004ee:	d007      	beq.n	8000500 <GPIO_Init+0xf4>
 80004f0:	69fb      	ldr	r3, [r7, #28]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d003      	beq.n	8000500 <GPIO_Init+0xf4>
    {
        Ret_ErrorStatus = GPIO_INVALID_MODE;
 80004f8:	2303      	movs	r3, #3
 80004fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004fe:	e044      	b.n	800058a <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_SPEED(ADD_Config->Speed))
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d909      	bls.n	800051c <GPIO_Init+0x110>
    {
        Ret_ErrorStatus = GPIO_INVALID_SPEED;
 8000508:	2307      	movs	r3, #7
 800050a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800050e:	e03c      	b.n	800058a <GPIO_Init+0x17e>
 8000510:	40020000 	.word	0x40020000
 8000514:	40020400 	.word	0x40020400
 8000518:	40020800 	.word	0x40020800
    }
    else if(!IS_GPIO_AF(ADD_Config->AF))
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	691b      	ldr	r3, [r3, #16]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d032      	beq.n	800058a <GPIO_Init+0x17e>
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d02e      	beq.n	800058a <GPIO_Init+0x17e>
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	2b02      	cmp	r3, #2
 8000532:	d02a      	beq.n	800058a <GPIO_Init+0x17e>
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d026      	beq.n	800058a <GPIO_Init+0x17e>
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	2b04      	cmp	r3, #4
 8000542:	d022      	beq.n	800058a <GPIO_Init+0x17e>
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	691b      	ldr	r3, [r3, #16]
 8000548:	2b05      	cmp	r3, #5
 800054a:	d01e      	beq.n	800058a <GPIO_Init+0x17e>
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	691b      	ldr	r3, [r3, #16]
 8000550:	2b06      	cmp	r3, #6
 8000552:	d01a      	beq.n	800058a <GPIO_Init+0x17e>
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	691b      	ldr	r3, [r3, #16]
 8000558:	2b07      	cmp	r3, #7
 800055a:	d016      	beq.n	800058a <GPIO_Init+0x17e>
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	691b      	ldr	r3, [r3, #16]
 8000560:	2b08      	cmp	r3, #8
 8000562:	d012      	beq.n	800058a <GPIO_Init+0x17e>
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	691b      	ldr	r3, [r3, #16]
 8000568:	2b09      	cmp	r3, #9
 800056a:	d00e      	beq.n	800058a <GPIO_Init+0x17e>
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	2b0a      	cmp	r3, #10
 8000572:	d00a      	beq.n	800058a <GPIO_Init+0x17e>
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	2b0c      	cmp	r3, #12
 800057a:	d006      	beq.n	800058a <GPIO_Init+0x17e>
 800057c:	69fb      	ldr	r3, [r7, #28]
 800057e:	691b      	ldr	r3, [r3, #16]
 8000580:	2b0f      	cmp	r3, #15
 8000582:	d002      	beq.n	800058a <GPIO_Init+0x17e>
    {
        Ret_ErrorStatus = GPIO_INVALID_AF;
 8000584:	2304      	movs	r3, #4
 8000586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == GPIO_OK)
 800058a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800058e:	2b00      	cmp	r3, #0
 8000590:	f040 80d5 	bne.w	800073e <GPIO_Init+0x332>
    {
        /* Set the Pin Mode (Input, Output, AF, Analog)*/
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->MODER;
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( GPIO_2_BIT_MASK << (ADD_Config->Pin * GPIO_PIN_OFFSET_2)) ;
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	2203      	movs	r2, #3
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	461a      	mov	r2, r3
 80005ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ae:	4013      	ands	r3, r2
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( (ADD_Config->Mode & GPIO_MODE_MASK) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f003 0203 	and.w	r2, r3, #3
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005c6:	4313      	orrs	r3, r2
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->MODER = Local_TmpReg;
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005d0:	601a      	str	r2, [r3, #0]

        /* Set the Pin output type (Push Pull or Open Drain)*/
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->OTYPER;
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~ ( 1 << (ADD_Config->Pin) );
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	2201      	movs	r2, #1
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ea:	4013      	ands	r3, r2
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( ((ADD_Config->Mode & GPIO_OTYPE_MASK) >> GPIO_OTYPE_POS_IN_MODE) << (ADD_Config->Pin) );
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	f003 0201 	and.w	r2, r3, #1
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000602:	4313      	orrs	r3, r2
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->OTYPER = Local_TmpReg;
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800060c:	605a      	str	r2, [r3, #4]

        /* Set pin pullup/pulldown/floating */
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->PUPDR;
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( (GPIO_2_BIT_MASK)<< (ADD_Config->Pin*GPIO_PIN_OFFSET_2) );
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	2203      	movs	r2, #3
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	461a      	mov	r2, r3
 8000626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000628:	4013      	ands	r3, r2
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( ((ADD_Config->Mode & GPIO_PUPD_MASK) >> GPIO_PUPD_POS_IN_MODE) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	08db      	lsrs	r3, r3, #3
 8000632:	f003 0203 	and.w	r2, r3, #3
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000642:	4313      	orrs	r3, r2
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->PUPDR = Local_TmpReg;
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800064c:	60da      	str	r2, [r3, #12]

        /* Set Pin speed */
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->OSPEEDR;
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( (GPIO_2_BIT_MASK)<< (ADD_Config->Pin*GPIO_PIN_OFFSET_2) );
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	2203      	movs	r2, #3
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	461a      	mov	r2, r3
 8000666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000668:	4013      	ands	r3, r2
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( (ADD_Config->Speed) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067c:	4313      	orrs	r3, r2
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->OSPEEDR = Local_TmpReg;
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000686:	609a      	str	r2, [r3, #8]


        /* Set AF */
        Local_AFTmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->AFR;
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000690:	e9c7 2308 	strd	r2, r3, [r7, #32]
        Local_AFTmpReg &= ~( ((u64)GPIO_4_BIT_MASK) << (ADD_Config->Pin*GPIO_PIN_OFFSET_4) );
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	009c      	lsls	r4, r3, #2
 800069a:	f04f 020f 	mov.w	r2, #15
 800069e:	f04f 0300 	mov.w	r3, #0
 80006a2:	f1a4 0120 	sub.w	r1, r4, #32
 80006a6:	f1c4 0020 	rsb	r0, r4, #32
 80006aa:	fa03 fb04 	lsl.w	fp, r3, r4
 80006ae:	fa02 f101 	lsl.w	r1, r2, r1
 80006b2:	ea4b 0b01 	orr.w	fp, fp, r1
 80006b6:	fa22 f000 	lsr.w	r0, r2, r0
 80006ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80006be:	fa02 fa04 	lsl.w	sl, r2, r4
 80006c2:	ea6f 030a 	mvn.w	r3, sl
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	ea6f 030b 	mvn.w	r3, fp
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80006d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80006d6:	4651      	mov	r1, sl
 80006d8:	4011      	ands	r1, r2
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	4659      	mov	r1, fp
 80006de:	4019      	ands	r1, r3
 80006e0:	60f9      	str	r1, [r7, #12]
 80006e2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80006e6:	e9c7 3408 	strd	r3, r4, [r7, #32]
        Local_AFTmpReg |= ( ((u64)ADD_Config->AF) << (ADD_Config->Pin*GPIO_PIN_OFFSET_4) );
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	691b      	ldr	r3, [r3, #16]
 80006ee:	2200      	movs	r2, #0
 80006f0:	461d      	mov	r5, r3
 80006f2:	4616      	mov	r6, r2
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	f1a3 0120 	sub.w	r1, r3, #32
 80006fe:	f1c3 0220 	rsb	r2, r3, #32
 8000702:	fa06 f903 	lsl.w	r9, r6, r3
 8000706:	fa05 f101 	lsl.w	r1, r5, r1
 800070a:	ea49 0901 	orr.w	r9, r9, r1
 800070e:	fa25 f202 	lsr.w	r2, r5, r2
 8000712:	ea49 0902 	orr.w	r9, r9, r2
 8000716:	fa05 f803 	lsl.w	r8, r5, r3
 800071a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800071e:	ea42 0108 	orr.w	r1, r2, r8
 8000722:	6039      	str	r1, [r7, #0]
 8000724:	ea43 0309 	orr.w	r3, r3, r9
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800072e:	e9c7 3408 	strd	r3, r4, [r7, #32]
        ((GPIO_Registers_t *)(ADD_Config->Port))->AFR = Local_AFTmpReg;
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800073a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    //		((GPIO_Registers_t *)(ADD_Config->Port))->AFRH = Local_TmpReg;
    //    }

    }

    return Ret_ErrorStatus;
 800073e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000742:	4618      	mov	r0, r3
 8000744:	3730      	adds	r7, #48	; 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <GPIO_SetPinState>:


GPIO_ErrorStatus_t GPIO_SetPinState(void * Copy_Port, u32 Copy_Pin, u8 Copy_State)
{
 8000750:	b480      	push	{r7}
 8000752:	b087      	sub	sp, #28
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	4613      	mov	r3, r2
 800075c:	71fb      	strb	r3, [r7, #7]
    GPIO_ErrorStatus_t Ret_ErrorStatus = GPIO_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	75fb      	strb	r3, [r7, #23]
    
    if(!IS_GPIO_PORT(Copy_Port))
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <GPIO_SetPinState+0x94>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d00a      	beq.n	8000780 <GPIO_SetPinState+0x30>
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <GPIO_SetPinState+0x98>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d006      	beq.n	8000780 <GPIO_SetPinState+0x30>
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <GPIO_SetPinState+0x9c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d002      	beq.n	8000780 <GPIO_SetPinState+0x30>
    {
        Ret_ErrorStatus = GPIO_INVALID_PORT;
 800077a:	2305      	movs	r3, #5
 800077c:	75fb      	strb	r3, [r7, #23]
 800077e:	e00d      	b.n	800079c <GPIO_SetPinState+0x4c>
    }
    else if(!IS_GPIO_PIN(Copy_Pin))
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d902      	bls.n	800078c <GPIO_SetPinState+0x3c>
    {
        Ret_ErrorStatus = GPIO_INVALID_PIN;
 8000786:	2306      	movs	r3, #6
 8000788:	75fb      	strb	r3, [r7, #23]
 800078a:	e007      	b.n	800079c <GPIO_SetPinState+0x4c>
    }
    else if(!IS_GPIO_STATE(Copy_State))
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d004      	beq.n	800079c <GPIO_SetPinState+0x4c>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <GPIO_SetPinState+0x4c>
    {
        Ret_ErrorStatus = GPIO_INVALID_STATE;
 8000798:	2308      	movs	r3, #8
 800079a:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == GPIO_OK)
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d118      	bne.n	80007d4 <GPIO_SetPinState+0x84>
    {
        switch(Copy_State)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d002      	beq.n	80007ae <GPIO_SetPinState+0x5e>
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d009      	beq.n	80007c0 <GPIO_SetPinState+0x70>
 80007ac:	e010      	b.n	80007d0 <GPIO_SetPinState+0x80>
        {
            case GPIO_STATE_LOW:
                ((GPIO_Registers_t *)Copy_Port)->BSRR = ( 1<< (Copy_Pin+GPIO_BSRR_RESET_OFFSET) );
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	3310      	adds	r3, #16
 80007b2:	2201      	movs	r2, #1
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	619a      	str	r2, [r3, #24]
                break;
 80007be:	e009      	b.n	80007d4 <GPIO_SetPinState+0x84>

            case GPIO_STATE_HIGH:
                ((GPIO_Registers_t *)Copy_Port)->BSRR = (1<< Copy_Pin);
 80007c0:	2201      	movs	r2, #1
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	619a      	str	r2, [r3, #24]
                break;
 80007ce:	e001      	b.n	80007d4 <GPIO_SetPinState+0x84>

            default:
                Ret_ErrorStatus = GPIO_NOK;
 80007d0:	2301      	movs	r3, #1
 80007d2:	75fb      	strb	r3, [r7, #23]
        }
    }
    

    return Ret_ErrorStatus;
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	371c      	adds	r7, #28
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40020800 	.word	0x40020800

080007f0 <RCC_EnableClk>:
    RCC_LPWRRSTF = 31,

}RCC_CSR_Bits_t;

RCC_ErrorStatus_t RCC_EnableClk(u8 Copy_Clk)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
    u16 Local_Timeout = RCC_TIMEOUT_PERIOD;
 80007fe:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000802:	81bb      	strh	r3, [r7, #12]
    switch(Copy_Clk)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b05      	cmp	r3, #5
 8000808:	f200 8088 	bhi.w	800091c <RCC_EnableClk+0x12c>
 800080c:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <RCC_EnableClk+0x24>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	0800082d 	.word	0x0800082d
 8000818:	08000855 	.word	0x08000855
 800081c:	0800087d 	.word	0x0800087d
 8000820:	080008a5 	.word	0x080008a5
 8000824:	080008cd 	.word	0x080008cd
 8000828:	080008f5 	.word	0x080008f5
    {
        case RCC_CLK_HSI:
            RCC->CR |= (1<<RCC_HSION);
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <RCC_EnableClk+0x158>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a45      	ldr	r2, [pc, #276]	; (8000948 <RCC_EnableClk+0x158>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( (((RCC->CR >> RCC_HSIRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 8000838:	e002      	b.n	8000840 <RCC_EnableClk+0x50>
 800083a:	89bb      	ldrh	r3, [r7, #12]
 800083c:	3b01      	subs	r3, #1
 800083e:	81bb      	strh	r3, [r7, #12]
 8000840:	4b41      	ldr	r3, [pc, #260]	; (8000948 <RCC_EnableClk+0x158>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	2b00      	cmp	r3, #0
 800084a:	d16a      	bne.n	8000922 <RCC_EnableClk+0x132>
 800084c:	89bb      	ldrh	r3, [r7, #12]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f3      	beq.n	800083a <RCC_EnableClk+0x4a>
            break;
 8000852:	e066      	b.n	8000922 <RCC_EnableClk+0x132>

        case RCC_CLK_HSE:
            RCC->CR |= (1<<RCC_HSEON);
 8000854:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <RCC_EnableClk+0x158>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a3b      	ldr	r2, [pc, #236]	; (8000948 <RCC_EnableClk+0x158>)
 800085a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085e:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( (((RCC->CR >> RCC_HSERDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 8000860:	e002      	b.n	8000868 <RCC_EnableClk+0x78>
 8000862:	89bb      	ldrh	r3, [r7, #12]
 8000864:	3b01      	subs	r3, #1
 8000866:	81bb      	strh	r3, [r7, #12]
 8000868:	4b37      	ldr	r3, [pc, #220]	; (8000948 <RCC_EnableClk+0x158>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000870:	2b00      	cmp	r3, #0
 8000872:	d158      	bne.n	8000926 <RCC_EnableClk+0x136>
 8000874:	89bb      	ldrh	r3, [r7, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f3      	beq.n	8000862 <RCC_EnableClk+0x72>
            break;
 800087a:	e054      	b.n	8000926 <RCC_EnableClk+0x136>

        case RCC_CLK_PLL:
            RCC->CR |= (1<<RCC_PLLON);
 800087c:	4b32      	ldr	r3, [pc, #200]	; (8000948 <RCC_EnableClk+0x158>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a31      	ldr	r2, [pc, #196]	; (8000948 <RCC_EnableClk+0x158>)
 8000882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000886:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( (((RCC->CR >> RCC_PLLRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 8000888:	e002      	b.n	8000890 <RCC_EnableClk+0xa0>
 800088a:	89bb      	ldrh	r3, [r7, #12]
 800088c:	3b01      	subs	r3, #1
 800088e:	81bb      	strh	r3, [r7, #12]
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <RCC_EnableClk+0x158>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000898:	2b00      	cmp	r3, #0
 800089a:	d146      	bne.n	800092a <RCC_EnableClk+0x13a>
 800089c:	89bb      	ldrh	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0f3      	beq.n	800088a <RCC_EnableClk+0x9a>
            break;
 80008a2:	e042      	b.n	800092a <RCC_EnableClk+0x13a>

        case RCC_CLK_PLL2:
            RCC->CR |= (1<<RCC_PLLI2SON);
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <RCC_EnableClk+0x158>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a27      	ldr	r2, [pc, #156]	; (8000948 <RCC_EnableClk+0x158>)
 80008aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008ae:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( (((RCC->CR >> RCC_PLLI2SRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 80008b0:	e002      	b.n	80008b8 <RCC_EnableClk+0xc8>
 80008b2:	89bb      	ldrh	r3, [r7, #12]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	81bb      	strh	r3, [r7, #12]
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <RCC_EnableClk+0x158>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d134      	bne.n	800092e <RCC_EnableClk+0x13e>
 80008c4:	89bb      	ldrh	r3, [r7, #12]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d0f3      	beq.n	80008b2 <RCC_EnableClk+0xc2>
            break;
 80008ca:	e030      	b.n	800092e <RCC_EnableClk+0x13e>

        case RCC_CLK_LSE:
            RCC->BDCR |= (1<<RCC_LSEON);
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <RCC_EnableClk+0x158>)
 80008ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008d0:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <RCC_EnableClk+0x158>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6713      	str	r3, [r2, #112]	; 0x70
            /* Wait till Ready */
            while( (((RCC->BDCR >> RCC_LSERDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 80008d8:	e002      	b.n	80008e0 <RCC_EnableClk+0xf0>
 80008da:	89bb      	ldrh	r3, [r7, #12]
 80008dc:	3b01      	subs	r3, #1
 80008de:	81bb      	strh	r3, [r7, #12]
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <RCC_EnableClk+0x158>)
 80008e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d122      	bne.n	8000932 <RCC_EnableClk+0x142>
 80008ec:	89bb      	ldrh	r3, [r7, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f3      	beq.n	80008da <RCC_EnableClk+0xea>
            break;
 80008f2:	e01e      	b.n	8000932 <RCC_EnableClk+0x142>

        case RCC_CLK_LSI:
            RCC->CSR |= (1<<RCC_LSION);
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <RCC_EnableClk+0x158>)
 80008f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <RCC_EnableClk+0x158>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6753      	str	r3, [r2, #116]	; 0x74
            /* Wait till Ready */
            while( (((RCC->CSR >> RCC_LSIRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 8000900:	e002      	b.n	8000908 <RCC_EnableClk+0x118>
 8000902:	89bb      	ldrh	r3, [r7, #12]
 8000904:	3b01      	subs	r3, #1
 8000906:	81bb      	strh	r3, [r7, #12]
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <RCC_EnableClk+0x158>)
 800090a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d110      	bne.n	8000936 <RCC_EnableClk+0x146>
 8000914:	89bb      	ldrh	r3, [r7, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f3      	beq.n	8000902 <RCC_EnableClk+0x112>
            break;
 800091a:	e00c      	b.n	8000936 <RCC_EnableClk+0x146>

        default:
            Ret_ErrorStatus = RCC_NOK;
 800091c:	2301      	movs	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	e00a      	b.n	8000938 <RCC_EnableClk+0x148>
            break;
 8000922:	bf00      	nop
 8000924:	e008      	b.n	8000938 <RCC_EnableClk+0x148>
            break;
 8000926:	bf00      	nop
 8000928:	e006      	b.n	8000938 <RCC_EnableClk+0x148>
            break;
 800092a:	bf00      	nop
 800092c:	e004      	b.n	8000938 <RCC_EnableClk+0x148>
            break;
 800092e:	bf00      	nop
 8000930:	e002      	b.n	8000938 <RCC_EnableClk+0x148>
            break;
 8000932:	bf00      	nop
 8000934:	e000      	b.n	8000938 <RCC_EnableClk+0x148>
            break;
 8000936:	bf00      	nop
    }


    return Ret_ErrorStatus;
 8000938:	7bfb      	ldrb	r3, [r7, #15]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <RCC_SetSystemClk>:




RCC_ErrorStatus_t RCC_SetSystemClk(u8 Copy_SystemClk)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
    u32 Local_TmpReg;

    if(
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d105      	bne.n	800096c <RCC_SetSystemClk+0x20>
        ( (Copy_SystemClk == RCC_SYSCLK_HSI) && !( (RCC->CR >> RCC_HSION) & 1 ) )
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <RCC_SetSystemClk+0x74>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	2b00      	cmp	r3, #0
 800096a:	d011      	beq.n	8000990 <RCC_SetSystemClk+0x44>
        ||
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d105      	bne.n	800097e <RCC_SetSystemClk+0x32>
        ( (Copy_SystemClk == RCC_SYSCLK_HSE) && !( (RCC->CR >> RCC_HSEON) & 1 ) )
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <RCC_SetSystemClk+0x74>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d008      	beq.n	8000990 <RCC_SetSystemClk+0x44>
        ||
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d108      	bne.n	8000996 <RCC_SetSystemClk+0x4a>
        ( (Copy_SystemClk == RCC_SYSCLK_PLL) && !( (RCC->CR >> RCC_PLLON) & 1 ) )
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <RCC_SetSystemClk+0x74>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <RCC_SetSystemClk+0x4a>
                                                                                )

    {
        Ret_ErrorStatus = RCC_NOK;
 8000990:	2301      	movs	r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	e00d      	b.n	80009b2 <RCC_SetSystemClk+0x66>
    }
    else
    {
        Local_TmpReg = RCC->CFGR;
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <RCC_SetSystemClk+0x74>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	60bb      	str	r3, [r7, #8]
        Local_TmpReg &= (~RCC_SYSCLK_MASK);
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	f023 0303 	bic.w	r3, r3, #3
 80009a2:	60bb      	str	r3, [r7, #8]
        Local_TmpReg |= Copy_SystemClk;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
        RCC->CFGR = Local_TmpReg;
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <RCC_SetSystemClk+0x74>)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	6093      	str	r3, [r2, #8]

    }

    return Ret_ErrorStatus;
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	40023800 	.word	0x40023800

080009c4 <RCC_EnablePeripheral>:
    return Ret_ErrorStatus;
}


RCC_ErrorStatus_t RCC_EnablePeripheral(RCC_Peripheral_t Copy_Peripheral)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	e9c7 0100 	strd	r0, r1, [r7]
    u32 Local_PeripheralCode = ((u32*)&Copy_Peripheral)[1];         /* Code part of the peripheral enum */      
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60bb      	str	r3, [r7, #8]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	73fb      	strb	r3, [r7, #15]

    /* Check for the Peripherals enums Specific code to make sure
     * that the recived argument is only a Peripheral enum */
    if(Local_PeripheralCode != 3)
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d002      	beq.n	80009e2 <RCC_EnablePeripheral+0x1e>
    {
        Ret_ErrorStatus = RCC_NOK;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e046      	b.n	8000a70 <RCC_EnablePeripheral+0xac>
    }
    else
    {
        if((u32)Copy_Peripheral < 32)        /* AHB1 REG peripherals */
 80009e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009e6:	4613      	mov	r3, r2
 80009e8:	2b1f      	cmp	r3, #31
 80009ea:	d809      	bhi.n	8000a00 <RCC_EnablePeripheral+0x3c>
        {
            RCC->AHB1ENR |= (1<<(u32)Copy_Peripheral);
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <RCC_EnablePeripheral+0xbc>)
 80009ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009f4:	2301      	movs	r3, #1
 80009f6:	4093      	lsls	r3, r2
 80009f8:	4a21      	ldr	r2, [pc, #132]	; (8000a80 <RCC_EnablePeripheral+0xbc>)
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	e037      	b.n	8000a70 <RCC_EnablePeripheral+0xac>
        }
        else if((u32)Copy_Peripheral < 64)   /* AHB2 REG peripherals */
 8000a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a04:	4613      	mov	r3, r2
 8000a06:	2b3f      	cmp	r3, #63	; 0x3f
 8000a08:	d80c      	bhi.n	8000a24 <RCC_EnablePeripheral+0x60>
        {
            RCC->AHB2ENR |= (1<< ((u32)Copy_Peripheral - 32) );
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <RCC_EnablePeripheral+0xbc>)
 8000a0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a12:	4613      	mov	r3, r2
 8000a14:	3b20      	subs	r3, #32
 8000a16:	2201      	movs	r2, #1
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	4a18      	ldr	r2, [pc, #96]	; (8000a80 <RCC_EnablePeripheral+0xbc>)
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6353      	str	r3, [r2, #52]	; 0x34
 8000a22:	e025      	b.n	8000a70 <RCC_EnablePeripheral+0xac>
        }
        else if((u32)Copy_Peripheral < 96)   /* APB1 REG peripherals */
 8000a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	2b5f      	cmp	r3, #95	; 0x5f
 8000a2c:	d80c      	bhi.n	8000a48 <RCC_EnablePeripheral+0x84>
        {
            RCC->APB1ENR |= (1<< ((u32)Copy_Peripheral - 64) );
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <RCC_EnablePeripheral+0xbc>)
 8000a30:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a36:	4613      	mov	r3, r2
 8000a38:	3b40      	subs	r3, #64	; 0x40
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <RCC_EnablePeripheral+0xbc>)
 8000a42:	430b      	orrs	r3, r1
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	e013      	b.n	8000a70 <RCC_EnablePeripheral+0xac>
        }
        else if((u32)Copy_Peripheral < 128)  /* APB2 REG peripherals */
 8000a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a50:	d80c      	bhi.n	8000a6c <RCC_EnablePeripheral+0xa8>
        {
            RCC->APB2ENR |= (1<< ((u32)Copy_Peripheral - 96) );
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <RCC_EnablePeripheral+0xbc>)
 8000a54:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	3b60      	subs	r3, #96	; 0x60
 8000a5e:	2201      	movs	r2, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <RCC_EnablePeripheral+0xbc>)
 8000a66:	430b      	orrs	r3, r1
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	e001      	b.n	8000a70 <RCC_EnablePeripheral+0xac>
        }
        else
        {
            Ret_ErrorStatus = RCC_NOK;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return Ret_ErrorStatus;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <USART1_IRQHandler>:
/*                              HANDLERS                               */
/* =================================================================== */


void USART1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */
    if(UARTs[UART1]->SR & UART_LBD_MASK)
 8000a88:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00f      	beq.n	8000ab6 <USART1_IRQHandler+0x32>
    {
        /* Clear LBD Flag */
        UARTs[UART1]->SR &= ~UART_LBD_MASK;
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000aa4:	601a      	str	r2, [r3, #0]

        /* Call LBD Interrupt CB function if not NULL*/
        if(LBDCallbacks[UART1])
 8000aa6:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <USART1_IRQHandler+0xf4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d05f      	beq.n	8000b6e <USART1_IRQHandler+0xea>
        {
            LBDCallbacks[UART1]();
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <USART1_IRQHandler+0xf4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4798      	blx	r3
                }

            }    
        }
    }    
} 
 8000ab4:	e05b      	b.n	8000b6e <USART1_IRQHandler+0xea>
        if(UARTs[UART1]->SR & UART_TXE_MASK)
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d023      	beq.n	8000b0c <USART1_IRQHandler+0x88>
            if(TXRequests[UART1_INDEX].Buffer.CurrIdx < TXRequests[UART1_INDEX].Buffer.Length)
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <USART1_IRQHandler+0xf8>)
 8000ac6:	88da      	ldrh	r2, [r3, #6]
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <USART1_IRQHandler+0xf8>)
 8000aca:	889b      	ldrh	r3, [r3, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d20f      	bcs.n	8000af0 <USART1_IRQHandler+0x6c>
                UARTs[UART1]->DR = TXRequests[UART1_INDEX].Buffer.Data[TXRequests[UART1_INDEX].Buffer.CurrIdx];
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <USART1_IRQHandler+0xf8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <USART1_IRQHandler+0xf8>)
 8000ad6:	88d2      	ldrh	r2, [r2, #6]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781a      	ldrb	r2, [r3, #0]
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
                TXRequests[UART1_INDEX].Buffer.CurrIdx++;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <USART1_IRQHandler+0xf8>)
 8000ae4:	88db      	ldrh	r3, [r3, #6]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <USART1_IRQHandler+0xf8>)
 8000aec:	80da      	strh	r2, [r3, #6]
 8000aee:	e00d      	b.n	8000b0c <USART1_IRQHandler+0x88>
                TXRequests[UART1_INDEX].State = READY;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <USART1_IRQHandler+0xf8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	721a      	strb	r2, [r3, #8]
                UARTs[UART1]->CR1 &= ~UART_TXEIE_MASK;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b04:	60da      	str	r2, [r3, #12]
                TXRequests[UART1_INDEX].Cb();
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <USART1_IRQHandler+0xf8>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	4798      	blx	r3
        if(UARTs[UART1]->SR & UART_RXNE_MASK)
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d029      	beq.n	8000b6e <USART1_IRQHandler+0xea>
            if(RXRequests[UART1_INDEX].Buffer.CurrIdx < RXRequests[UART1_INDEX].Buffer.Length)
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b1c:	88da      	ldrh	r2, [r3, #6]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b20:	889b      	ldrh	r3, [r3, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d223      	bcs.n	8000b6e <USART1_IRQHandler+0xea>
                RXRequests[UART1_INDEX].Buffer.Data[RXRequests[UART1_INDEX].Buffer.CurrIdx] = UARTs[UART1]->DR;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6859      	ldr	r1, [r3, #4]
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b32:	88d2      	ldrh	r2, [r2, #6]
 8000b34:	4413      	add	r3, r2
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
                RXRequests[UART1_INDEX].Buffer.CurrIdx++;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b3c:	88db      	ldrh	r3, [r3, #6]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b44:	80da      	strh	r2, [r3, #6]
                if(RXRequests[UART1_INDEX].Buffer.CurrIdx == RXRequests[UART1_INDEX].Buffer.Length)
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b48:	88da      	ldrh	r2, [r3, #6]
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b4c:	889b      	ldrh	r3, [r3, #4]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d10d      	bne.n	8000b6e <USART1_IRQHandler+0xea>
                    RXRequests[UART1_INDEX].State = READY;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	721a      	strb	r2, [r3, #8]
                    UARTs[UART1]->CR1 &= ~UART_RXNEIE_MASK;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <USART1_IRQHandler+0xf0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 0220 	bic.w	r2, r2, #32
 8000b66:	60da      	str	r2, [r3, #12]
                    RXRequests[UART1_INDEX].Cb();
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <USART1_IRQHandler+0xfc>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4798      	blx	r3
} 
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000090 	.word	0x20000090
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	20000060 	.word	0x20000060

08000b84 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */
	if(UARTs[UART2]->SR & UART_LBD_MASK)
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d00f      	beq.n	8000bb6 <USART2_IRQHandler+0x32>
	{
		/* Clear LBD Flag */
		UARTs[UART2]->SR &= ~UART_LBD_MASK;
 8000b96:	4b37      	ldr	r3, [pc, #220]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ba4:	601a      	str	r2, [r3, #0]

		/* Call LBD Interrupt CB function if not NULL*/
		if(LBDCallbacks[UART2])
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <USART2_IRQHandler+0xf4>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d05f      	beq.n	8000c6e <USART2_IRQHandler+0xea>
		{
			LBDCallbacks[UART2]();
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <USART2_IRQHandler+0xf4>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4798      	blx	r3
	            }

	        }
	    }
	}
} 
 8000bb4:	e05b      	b.n	8000c6e <USART2_IRQHandler+0xea>
	    if(UARTs[UART2]->SR & UART_TXE_MASK)
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d023      	beq.n	8000c0c <USART2_IRQHandler+0x88>
	        if(TXRequests[UART2_INDEX].Buffer.CurrIdx < TXRequests[UART2_INDEX].Buffer.Length)
 8000bc4:	4b2d      	ldr	r3, [pc, #180]	; (8000c7c <USART2_IRQHandler+0xf8>)
 8000bc6:	8ada      	ldrh	r2, [r3, #22]
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <USART2_IRQHandler+0xf8>)
 8000bca:	8a9b      	ldrh	r3, [r3, #20]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d20f      	bcs.n	8000bf0 <USART2_IRQHandler+0x6c>
	            UARTs[UART2]->DR = TXRequests[UART2_INDEX].Buffer.Data[TXRequests[UART2_INDEX].Buffer.CurrIdx];
 8000bd0:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <USART2_IRQHandler+0xf8>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	4a29      	ldr	r2, [pc, #164]	; (8000c7c <USART2_IRQHandler+0xf8>)
 8000bd6:	8ad2      	ldrh	r2, [r2, #22]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	605a      	str	r2, [r3, #4]
	            TXRequests[UART2_INDEX].Buffer.CurrIdx++;
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <USART2_IRQHandler+0xf8>)
 8000be4:	8adb      	ldrh	r3, [r3, #22]
 8000be6:	3301      	adds	r3, #1
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <USART2_IRQHandler+0xf8>)
 8000bec:	82da      	strh	r2, [r3, #22]
 8000bee:	e00d      	b.n	8000c0c <USART2_IRQHandler+0x88>
	            TXRequests[UART2_INDEX].State = READY;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <USART2_IRQHandler+0xf8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	761a      	strb	r2, [r3, #24]
	            UARTs[UART2]->CR1 &= ~UART_TXEIE_MASK;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c04:	60da      	str	r2, [r3, #12]
	            TXRequests[UART2_INDEX].Cb();
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <USART2_IRQHandler+0xf8>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4798      	blx	r3
	    if(UARTs[UART2]->SR & UART_RXNE_MASK)
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d029      	beq.n	8000c6e <USART2_IRQHandler+0xea>
	        if(RXRequests[UART2_INDEX].Buffer.CurrIdx < RXRequests[UART2_INDEX].Buffer.Length)
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c1c:	8ada      	ldrh	r2, [r3, #22]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c20:	8a9b      	ldrh	r3, [r3, #20]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d223      	bcs.n	8000c6e <USART2_IRQHandler+0xea>
	            RXRequests[UART2_INDEX].Buffer.Data[RXRequests[UART2_INDEX].Buffer.CurrIdx] = UARTs[UART2]->DR;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	6859      	ldr	r1, [r3, #4]
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c32:	8ad2      	ldrh	r2, [r2, #22]
 8000c34:	4413      	add	r3, r2
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
	            RXRequests[UART2_INDEX].Buffer.CurrIdx++;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c3c:	8adb      	ldrh	r3, [r3, #22]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c44:	82da      	strh	r2, [r3, #22]
	            if(RXRequests[UART2_INDEX].Buffer.CurrIdx == RXRequests[UART2_INDEX].Buffer.Length)
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c48:	8ada      	ldrh	r2, [r3, #22]
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c4c:	8a9b      	ldrh	r3, [r3, #20]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d10d      	bne.n	8000c6e <USART2_IRQHandler+0xea>
	                RXRequests[UART2_INDEX].State = READY;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	761a      	strb	r2, [r3, #24]
	                UARTs[UART2]->CR1 &= ~UART_RXNEIE_MASK;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <USART2_IRQHandler+0xf0>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f022 0220 	bic.w	r2, r2, #32
 8000c66:	60da      	str	r2, [r3, #12]
	                RXRequests[UART2_INDEX].Cb();
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <USART2_IRQHandler+0xfc>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	4798      	blx	r3
} 
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000090 	.word	0x20000090
 8000c7c:	20000030 	.word	0x20000030
 8000c80:	20000060 	.word	0x20000060

08000c84 <USART6_IRQHandler>:


void USART6_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */

    if(UARTs[UART6]->SR & UART_LBD_MASK)
 8000c88:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00f      	beq.n	8000cb6 <USART6_IRQHandler+0x32>
    {
        /* Clear LBD Flag */
        UARTs[UART6]->SR &= ~UART_LBD_MASK;
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ca4:	601a      	str	r2, [r3, #0]

        /* Call LBD Interrupt CB function if not NULL*/
        if(LBDCallbacks[UART6])
 8000ca6:	4b35      	ldr	r3, [pc, #212]	; (8000d7c <USART6_IRQHandler+0xf8>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d061      	beq.n	8000d72 <USART6_IRQHandler+0xee>
        {
            LBDCallbacks[UART6]();
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <USART6_IRQHandler+0xf8>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	4798      	blx	r3

            }    
        }

    }  
} 
 8000cb4:	e05d      	b.n	8000d72 <USART6_IRQHandler+0xee>
        if(UARTs[UART6]->SR & UART_TXE_MASK)
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d024      	beq.n	8000d0e <USART6_IRQHandler+0x8a>
            if(TXRequests[UART6_INDEX].Buffer.CurrIdx < TXRequests[UART6_INDEX].Buffer.Length)
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <USART6_IRQHandler+0xfc>)
 8000cc6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <USART6_IRQHandler+0xfc>)
 8000cca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d20f      	bcs.n	8000cf0 <USART6_IRQHandler+0x6c>
                UARTs[UART6]->DR = TXRequests[UART6_INDEX].Buffer.Data[TXRequests[UART6_INDEX].Buffer.CurrIdx];
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <USART6_IRQHandler+0xfc>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	4a2a      	ldr	r2, [pc, #168]	; (8000d80 <USART6_IRQHandler+0xfc>)
 8000cd6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000cd8:	4413      	add	r3, r2
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	605a      	str	r2, [r3, #4]
                TXRequests[UART6_INDEX].Buffer.CurrIdx++;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <USART6_IRQHandler+0xfc>)
 8000ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <USART6_IRQHandler+0xfc>)
 8000cec:	84da      	strh	r2, [r3, #38]	; 0x26
 8000cee:	e00e      	b.n	8000d0e <USART6_IRQHandler+0x8a>
                TXRequests[UART6_INDEX].State = READY;
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <USART6_IRQHandler+0xfc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                UARTs[UART6]->CR1 &= ~UART_TXEIE_MASK;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d06:	60da      	str	r2, [r3, #12]
                TXRequests[UART6_INDEX].Cb();
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <USART6_IRQHandler+0xfc>)
 8000d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0c:	4798      	blx	r3
        if(UARTs[UART6]->SR & UART_RXNE_MASK)
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d02a      	beq.n	8000d72 <USART6_IRQHandler+0xee>
            if(RXRequests[UART6_INDEX].Buffer.CurrIdx < RXRequests[UART6_INDEX].Buffer.Length)
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d1e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d224      	bcs.n	8000d72 <USART6_IRQHandler+0xee>
                RXRequests[UART6_INDEX].Buffer.Data[RXRequests[UART6_INDEX].Buffer.CurrIdx] = UARTs[UART6]->DR;
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	6859      	ldr	r1, [r3, #4]
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d34:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000d36:	4413      	add	r3, r2
 8000d38:	b2ca      	uxtb	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
                RXRequests[UART6_INDEX].Buffer.CurrIdx++;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000d40:	3301      	adds	r3, #1
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d46:	84da      	strh	r2, [r3, #38]	; 0x26
                if(RXRequests[UART6_INDEX].Buffer.CurrIdx == RXRequests[UART6_INDEX].Buffer.Length)
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d4a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d10e      	bne.n	8000d72 <USART6_IRQHandler+0xee>
                    RXRequests[UART6_INDEX].State = READY;
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    UARTs[UART6]->CR1 &= ~UART_RXNEIE_MASK;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <USART6_IRQHandler+0xf4>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f022 0220 	bic.w	r2, r2, #32
 8000d6a:	60da      	str	r2, [r3, #12]
                    RXRequests[UART6_INDEX].Cb();
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <USART6_IRQHandler+0x100>)
 8000d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d70:	4798      	blx	r3
} 
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000090 	.word	0x20000090
 8000d80:	20000030 	.word	0x20000030
 8000d84:	20000060 	.word	0x20000060

08000d88 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00e      	beq.n	8000dbc <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f023 0307 	bic.w	r3, r3, #7
 8000da4:	3308      	adds	r3, #8
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d205      	bcs.n	8000db8 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f023 0307 	bic.w	r3, r3, #7
 8000db2:	3308      	adds	r3, #8
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e001      	b.n	8000dbc <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8000dbc:	f000 fd0c 	bl	80017d8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <pvPortMalloc+0x98>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d105      	bne.n	8000dd4 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <pvPortMalloc+0x9c>)
 8000dca:	f023 0307 	bic.w	r3, r3, #7
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <pvPortMalloc+0x98>)
 8000dd2:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d01b      	beq.n	8000e12 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <pvPortMalloc+0xa0>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8000de2:	f643 32f7 	movw	r2, #15351	; 0x3bf7
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d813      	bhi.n	8000e12 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <pvPortMalloc+0xa0>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	441a      	add	r2, r3
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <pvPortMalloc+0xa0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d90b      	bls.n	8000e12 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <pvPortMalloc+0x98>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <pvPortMalloc+0xa0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <pvPortMalloc+0xa0>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <pvPortMalloc+0xa0>)
 8000e10:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000e12:	f000 fcef 	bl	80017f4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20003ca0 	.word	0x20003ca0
 8000e24:	200000a3 	.word	0x200000a3
 8000e28:	20003c9c 	.word	0x20003c9c

08000e2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00a      	beq.n	8000e50 <vPortFree+0x24>
        __asm volatile
 8000e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	60fb      	str	r3, [r7, #12]
    }
 8000e4c:	bf00      	nop
 8000e4e:	e7fe      	b.n	8000e4e <vPortFree+0x22>
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f103 0208 	add.w	r2, r3, #8
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f103 0208 	add.w	r2, r3, #8
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f103 0208 	add.w	r2, r3, #8
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d103      	bne.n	8000ed6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	e00c      	b.n	8000ef0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3308      	adds	r3, #8
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e002      	b.n	8000ee4 <vListInsert+0x2e>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d2f6      	bcs.n	8000ede <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6892      	ldr	r2, [r2, #8]
 8000f3e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6852      	ldr	r2, [r2, #4]
 8000f48:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d103      	bne.n	8000f5c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3b04      	subs	r3, #4
 8000f9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f023 0201 	bic.w	r2, r3, #1
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3b04      	subs	r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <pxPortInitialiseStack+0x64>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3b14      	subs	r3, #20
 8000fb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	3b04      	subs	r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f06f 0202 	mvn.w	r2, #2
 8000fca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3b20      	subs	r3, #32
 8000fd0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	08000fe5 	.word	0x08000fe5

08000fe4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <prvTaskExitError+0x54>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff6:	d00a      	beq.n	800100e <prvTaskExitError+0x2a>
        __asm volatile
 8000ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffc:	f383 8811 	msr	BASEPRI, r3
 8001000:	f3bf 8f6f 	isb	sy
 8001004:	f3bf 8f4f 	dsb	sy
 8001008:	60fb      	str	r3, [r7, #12]
    }
 800100a:	bf00      	nop
 800100c:	e7fe      	b.n	800100c <prvTaskExitError+0x28>
        __asm volatile
 800100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001012:	f383 8811 	msr	BASEPRI, r3
 8001016:	f3bf 8f6f 	isb	sy
 800101a:	f3bf 8f4f 	dsb	sy
 800101e:	60bb      	str	r3, [r7, #8]
    }
 8001020:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001022:	bf00      	nop
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0fc      	beq.n	8001024 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	2000000c 	.word	0x2000000c
 800103c:	00000000 	.word	0x00000000

08001040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <pxCurrentTCBConst2>)
 8001042:	6819      	ldr	r1, [r3, #0]
 8001044:	6808      	ldr	r0, [r1, #0]
 8001046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800104a:	f380 8809 	msr	PSP, r0
 800104e:	f3bf 8f6f 	isb	sy
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	f380 8811 	msr	BASEPRI, r0
 800105a:	4770      	bx	lr
 800105c:	f3af 8000 	nop.w

08001060 <pxCurrentTCBConst2>:
 8001060:	20003cac 	.word	0x20003cac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop

08001068 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <prvPortStartFirstTask+0x24>)
 800106a:	6800      	ldr	r0, [r0, #0]
 800106c:	6800      	ldr	r0, [r0, #0]
 800106e:	f380 8808 	msr	MSP, r0
 8001072:	f04f 0000 	mov.w	r0, #0
 8001076:	f380 8814 	msr	CONTROL, r0
 800107a:	b662      	cpsie	i
 800107c:	b661      	cpsie	f
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	f3bf 8f6f 	isb	sy
 8001086:	df00      	svc	0
 8001088:	bf00      	nop
 800108a:	0000      	.short	0x0000
 800108c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop

08001094 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <xPortStartScheduler+0x120>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <xPortStartScheduler+0x124>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d10a      	bne.n	80010ba <xPortStartScheduler+0x26>
        __asm volatile
 80010a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a8:	f383 8811 	msr	BASEPRI, r3
 80010ac:	f3bf 8f6f 	isb	sy
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	613b      	str	r3, [r7, #16]
    }
 80010b6:	bf00      	nop
 80010b8:	e7fe      	b.n	80010b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <xPortStartScheduler+0x120>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a3f      	ldr	r2, [pc, #252]	; (80011bc <xPortStartScheduler+0x128>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d10a      	bne.n	80010da <xPortStartScheduler+0x46>
        __asm volatile
 80010c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010c8:	f383 8811 	msr	BASEPRI, r3
 80010cc:	f3bf 8f6f 	isb	sy
 80010d0:	f3bf 8f4f 	dsb	sy
 80010d4:	60fb      	str	r3, [r7, #12]
    }
 80010d6:	bf00      	nop
 80010d8:	e7fe      	b.n	80010d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <xPortStartScheduler+0x12c>)
 80010dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	22ff      	movs	r2, #255	; 0xff
 80010ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <xPortStartScheduler+0x130>)
 8001100:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001102:	4b31      	ldr	r3, [pc, #196]	; (80011c8 <xPortStartScheduler+0x134>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001108:	e009      	b.n	800111e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800110a:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <xPortStartScheduler+0x134>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3b01      	subs	r3, #1
 8001110:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <xPortStartScheduler+0x134>)
 8001112:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800111e:	78fb      	ldrb	r3, [r7, #3]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001126:	2b80      	cmp	r3, #128	; 0x80
 8001128:	d0ef      	beq.n	800110a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <xPortStartScheduler+0x134>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	d00a      	beq.n	800114c <xPortStartScheduler+0xb8>
        __asm volatile
 8001136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113a:	f383 8811 	msr	BASEPRI, r3
 800113e:	f3bf 8f6f 	isb	sy
 8001142:	f3bf 8f4f 	dsb	sy
 8001146:	60bb      	str	r3, [r7, #8]
    }
 8001148:	bf00      	nop
 800114a:	e7fe      	b.n	800114a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <xPortStartScheduler+0x134>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <xPortStartScheduler+0x134>)
 8001154:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <xPortStartScheduler+0x134>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <xPortStartScheduler+0x134>)
 8001160:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <xPortStartScheduler+0x138>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <xPortStartScheduler+0x138>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <xPortStartScheduler+0x138>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <xPortStartScheduler+0x138>)
 800117c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001180:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001182:	f000 f8db 	bl	800133c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <xPortStartScheduler+0x13c>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800118c:	f000 f8f0 	bl	8001370 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <xPortStartScheduler+0x140>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <xPortStartScheduler+0x140>)
 8001196:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800119a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800119c:	f7ff ff64 	bl	8001068 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80011a0:	f000 fd4a 	bl	8001c38 <vTaskSwitchContext>
    prvTaskExitError();
 80011a4:	f7ff ff1e 	bl	8000fe4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00
 80011b8:	410fc271 	.word	0x410fc271
 80011bc:	410fc270 	.word	0x410fc270
 80011c0:	e000e400 	.word	0xe000e400
 80011c4:	20003ca4 	.word	0x20003ca4
 80011c8:	20003ca8 	.word	0x20003ca8
 80011cc:	e000ed20 	.word	0xe000ed20
 80011d0:	2000000c 	.word	0x2000000c
 80011d4:	e000ef34 	.word	0xe000ef34

080011d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
        __asm volatile
 80011de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e2:	f383 8811 	msr	BASEPRI, r3
 80011e6:	f3bf 8f6f 	isb	sy
 80011ea:	f3bf 8f4f 	dsb	sy
 80011ee:	607b      	str	r3, [r7, #4]
    }
 80011f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <vPortEnterCritical+0x58>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <vPortEnterCritical+0x58>)
 80011fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <vPortEnterCritical+0x58>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d10f      	bne.n	8001224 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <vPortEnterCritical+0x5c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <vPortEnterCritical+0x4c>
        __asm volatile
 800120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001212:	f383 8811 	msr	BASEPRI, r3
 8001216:	f3bf 8f6f 	isb	sy
 800121a:	f3bf 8f4f 	dsb	sy
 800121e:	603b      	str	r3, [r7, #0]
    }
 8001220:	bf00      	nop
 8001222:	e7fe      	b.n	8001222 <vPortEnterCritical+0x4a>
    }
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	2000000c 	.word	0x2000000c
 8001234:	e000ed04 	.word	0xe000ed04

08001238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <vPortExitCritical+0x50>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10a      	bne.n	800125c <vPortExitCritical+0x24>
        __asm volatile
 8001246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800124a:	f383 8811 	msr	BASEPRI, r3
 800124e:	f3bf 8f6f 	isb	sy
 8001252:	f3bf 8f4f 	dsb	sy
 8001256:	607b      	str	r3, [r7, #4]
    }
 8001258:	bf00      	nop
 800125a:	e7fe      	b.n	800125a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <vPortExitCritical+0x50>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3b01      	subs	r3, #1
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <vPortExitCritical+0x50>)
 8001264:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <vPortExitCritical+0x50>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d105      	bne.n	800127a <vPortExitCritical+0x42>
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001278:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000000c 	.word	0x2000000c
 800128c:	00000000 	.word	0x00000000

08001290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001290:	f3ef 8009 	mrs	r0, PSP
 8001294:	f3bf 8f6f 	isb	sy
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <pxCurrentTCBConst>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	f01e 0f10 	tst.w	lr, #16
 80012a0:	bf08      	it	eq
 80012a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80012a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012aa:	6010      	str	r0, [r2, #0]
 80012ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80012b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80012b4:	f380 8811 	msr	BASEPRI, r0
 80012b8:	f3bf 8f4f 	dsb	sy
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f000 fcba 	bl	8001c38 <vTaskSwitchContext>
 80012c4:	f04f 0000 	mov.w	r0, #0
 80012c8:	f380 8811 	msr	BASEPRI, r0
 80012cc:	bc09      	pop	{r0, r3}
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	6808      	ldr	r0, [r1, #0]
 80012d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012d6:	f01e 0f10 	tst.w	lr, #16
 80012da:	bf08      	it	eq
 80012dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80012e0:	f380 8809 	msr	PSP, r0
 80012e4:	f3bf 8f6f 	isb	sy
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w

080012f0 <pxCurrentTCBConst>:
 80012f0:	20003cac 	.word	0x20003cac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop

080012f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
        __asm volatile
 80012fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001302:	f383 8811 	msr	BASEPRI, r3
 8001306:	f3bf 8f6f 	isb	sy
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	607b      	str	r3, [r7, #4]
    }
 8001310:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001312:	f000 fb7b 	bl	8001a0c <xTaskIncrementTick>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SysTick_Handler+0x40>)
 800131e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f383 8811 	msr	BASEPRI, r3
    }
 800132e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	e000ed04 	.word	0xe000ed04

0800133c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <vPortSetupTimerInterrupt+0x28>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <vPortSetupTimerInterrupt+0x2c>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <vPortSetupTimerInterrupt+0x30>)
 800134e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001352:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <vPortSetupTimerInterrupt+0x28>)
 8001356:	2207      	movs	r2, #7
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e010 	.word	0xe000e010
 8001368:	e000e018 	.word	0xe000e018
 800136c:	e000e014 	.word	0xe000e014

08001370 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001370:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001380 <vPortEnableVFP+0x10>
 8001374:	6801      	ldr	r1, [r0, #0]
 8001376:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800137a:	6001      	str	r1, [r0, #0]
 800137c:	4770      	bx	lr
 800137e:	0000      	.short	0x0000
 8001380:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop

08001388 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af04      	add	r7, sp, #16
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fcf3 	bl	8000d88 <pvPortMalloc>
 80013a2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d013      	beq.n	80013d2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80013aa:	2054      	movs	r0, #84	; 0x54
 80013ac:	f7ff fcec 	bl	8000d88 <pvPortMalloc>
 80013b0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80013b8:	2254      	movs	r2, #84	; 0x54
 80013ba:	2100      	movs	r1, #0
 80013bc:	69f8      	ldr	r0, [r7, #28]
 80013be:	f000 fdf2 	bl	8001fa6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
 80013c8:	e005      	b.n	80013d6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff fd2e 	bl	8000e2c <vPortFree>
 80013d0:	e001      	b.n	80013d6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d013      	beq.n	8001404 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80013dc:	88fa      	ldrh	r2, [r7, #6]
 80013de:	2300      	movs	r3, #0
 80013e0:	9303      	str	r3, [sp, #12]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	9302      	str	r3, [sp, #8]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 f80e 	bl	8001414 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80013f8:	69f8      	ldr	r0, [r7, #28]
 80013fa:	f000 f891 	bl	8001520 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	e002      	b.n	800140a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800140a:	69bb      	ldr	r3, [r7, #24]
    }
 800140c:	4618      	mov	r0, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800142c:	3b01      	subs	r3, #1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f023 0307 	bic.w	r3, r3, #7
 800143a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00a      	beq.n	800145c <prvInitialiseNewTask+0x48>
        __asm volatile
 8001446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800144a:	f383 8811 	msr	BASEPRI, r3
 800144e:	f3bf 8f6f 	isb	sy
 8001452:	f3bf 8f4f 	dsb	sy
 8001456:	617b      	str	r3, [r7, #20]
    }
 8001458:	bf00      	nop
 800145a:	e7fe      	b.n	800145a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01e      	beq.n	80014a0 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	e012      	b.n	800148e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	4413      	add	r3, r2
 800146e:	7819      	ldrb	r1, [r3, #0]
 8001470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	3334      	adds	r3, #52	; 0x34
 8001478:	460a      	mov	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	3301      	adds	r3, #1
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d9e9      	bls.n	8001468 <prvInitialiseNewTask+0x54>
 8001494:	e000      	b.n	8001498 <prvInitialiseNewTask+0x84>
            {
                break;
 8001496:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d90a      	bls.n	80014bc <prvInitialiseNewTask+0xa8>
        __asm volatile
 80014a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014aa:	f383 8811 	msr	BASEPRI, r3
 80014ae:	f3bf 8f6f 	isb	sy
 80014b2:	f3bf 8f4f 	dsb	sy
 80014b6:	613b      	str	r3, [r7, #16]
    }
 80014b8:	bf00      	nop
 80014ba:	e7fe      	b.n	80014ba <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d901      	bls.n	80014c6 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80014c2:	2306      	movs	r3, #6
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80014c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80014cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80014d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d4:	3304      	adds	r3, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fce0 	bl	8000e9c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80014dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014de:	3318      	adds	r3, #24
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fcdb 	bl	8000e9c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80014e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ee:	f1c3 0207 	rsb	r2, r3, #7
 80014f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80014f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	68f9      	ldr	r1, [r7, #12]
 8001500:	69b8      	ldr	r0, [r7, #24]
 8001502:	f7ff fd3b 	bl	8000f7c <pxPortInitialiseStack>
 8001506:	4602      	mov	r2, r0
 8001508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001516:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001528:	f7ff fe56 	bl	80011d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800152c:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <prvAddNewTaskToReadyList+0x108>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <prvAddNewTaskToReadyList+0x108>)
 8001534:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <prvAddNewTaskToReadyList+0x10c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800153e:	4a3b      	ldr	r2, [pc, #236]	; (800162c <prvAddNewTaskToReadyList+0x10c>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001544:	4b38      	ldr	r3, [pc, #224]	; (8001628 <prvAddNewTaskToReadyList+0x108>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d110      	bne.n	800156e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800154c:	f000 fbe8 	bl	8001d20 <prvInitialiseTaskLists>
 8001550:	e00d      	b.n	800156e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001552:	4b37      	ldr	r3, [pc, #220]	; (8001630 <prvAddNewTaskToReadyList+0x110>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800155a:	4b34      	ldr	r3, [pc, #208]	; (800162c <prvAddNewTaskToReadyList+0x10c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	429a      	cmp	r2, r3
 8001566:	d802      	bhi.n	800156e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001568:	4a30      	ldr	r2, [pc, #192]	; (800162c <prvAddNewTaskToReadyList+0x10c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <prvAddNewTaskToReadyList+0x114>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a2f      	ldr	r2, [pc, #188]	; (8001634 <prvAddNewTaskToReadyList+0x114>)
 8001576:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	2201      	movs	r2, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <prvAddNewTaskToReadyList+0x118>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4313      	orrs	r3, r2
 8001586:	4a2c      	ldr	r2, [pc, #176]	; (8001638 <prvAddNewTaskToReadyList+0x118>)
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800158e:	492b      	ldr	r1, [pc, #172]	; (800163c <prvAddNewTaskToReadyList+0x11c>)
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3304      	adds	r3, #4
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	3204      	adds	r2, #4
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	1d1a      	adds	r2, r3, #4
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <prvAddNewTaskToReadyList+0x11c>)
 80015ce:	441a      	add	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d8:	4918      	ldr	r1, [pc, #96]	; (800163c <prvAddNewTaskToReadyList+0x11c>)
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1c59      	adds	r1, r3, #1
 80015e8:	4814      	ldr	r0, [pc, #80]	; (800163c <prvAddNewTaskToReadyList+0x11c>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80015f6:	f7ff fe1f 	bl	8001238 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <prvAddNewTaskToReadyList+0x110>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00e      	beq.n	8001620 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <prvAddNewTaskToReadyList+0x10c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <prvAddNewTaskToReadyList+0x120>)
 8001612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20003dac 	.word	0x20003dac
 800162c:	20003cac 	.word	0x20003cac
 8001630:	20003db8 	.word	0x20003db8
 8001634:	20003dc8 	.word	0x20003dc8
 8001638:	20003db4 	.word	0x20003db4
 800163c:	20003cb0 	.word	0x20003cb0
 8001640:	e000ed04 	.word	0xe000ed04

08001644 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10a      	bne.n	800166e <xTaskDelayUntil+0x2a>
        __asm volatile
 8001658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800165c:	f383 8811 	msr	BASEPRI, r3
 8001660:	f3bf 8f6f 	isb	sy
 8001664:	f3bf 8f4f 	dsb	sy
 8001668:	617b      	str	r3, [r7, #20]
    }
 800166a:	bf00      	nop
 800166c:	e7fe      	b.n	800166c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <xTaskDelayUntil+0x46>
        __asm volatile
 8001674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001678:	f383 8811 	msr	BASEPRI, r3
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	f3bf 8f4f 	dsb	sy
 8001684:	613b      	str	r3, [r7, #16]
    }
 8001686:	bf00      	nop
 8001688:	e7fe      	b.n	8001688 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <xTaskDelayUntil+0xf0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00a      	beq.n	80016a8 <xTaskDelayUntil+0x64>
        __asm volatile
 8001692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001696:	f383 8811 	msr	BASEPRI, r3
 800169a:	f3bf 8f6f 	isb	sy
 800169e:	f3bf 8f4f 	dsb	sy
 80016a2:	60fb      	str	r3, [r7, #12]
    }
 80016a4:	bf00      	nop
 80016a6:	e7fe      	b.n	80016a6 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80016a8:	f000 f896 	bl	80017d8 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <xTaskDelayUntil+0xf4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6a3a      	ldr	r2, [r7, #32]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d20b      	bcs.n	80016de <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d211      	bcs.n	80016f4 <xTaskDelayUntil+0xb0>
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d90d      	bls.n	80016f4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80016d8:	2301      	movs	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
 80016dc:	e00a      	b.n	80016f4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d303      	bcc.n	80016f0 <xTaskDelayUntil+0xac>
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d901      	bls.n	80016f4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f000 fba3 	bl	8001e54 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800170e:	f000 f871 	bl	80017f4 <xTaskResumeAll>
 8001712:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d107      	bne.n	800172a <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <xTaskDelayUntil+0xf8>)
 800171c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	f3bf 8f4f 	dsb	sy
 8001726:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800172c:	4618      	mov	r0, r3
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20003dd4 	.word	0x20003dd4
 8001738:	20003db0 	.word	0x20003db0
 800173c:	e000ed04 	.word	0xe000ed04

08001740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <vTaskStartScheduler+0x7c>)
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	2300      	movs	r3, #0
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2300      	movs	r3, #0
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	491b      	ldr	r1, [pc, #108]	; (80017c0 <vTaskStartScheduler+0x80>)
 8001754:	481b      	ldr	r0, [pc, #108]	; (80017c4 <vTaskStartScheduler+0x84>)
 8001756:	f7ff fe17 	bl	8001388 <xTaskCreate>
 800175a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d116      	bne.n	8001790 <vTaskStartScheduler+0x50>
        __asm volatile
 8001762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001766:	f383 8811 	msr	BASEPRI, r3
 800176a:	f3bf 8f6f 	isb	sy
 800176e:	f3bf 8f4f 	dsb	sy
 8001772:	60bb      	str	r3, [r7, #8]
    }
 8001774:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <vTaskStartScheduler+0x88>)
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <vTaskStartScheduler+0x8c>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <vTaskStartScheduler+0x90>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800178a:	f7ff fc83 	bl	8001094 <xPortStartScheduler>
 800178e:	e00e      	b.n	80017ae <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001796:	d10a      	bne.n	80017ae <vTaskStartScheduler+0x6e>
        __asm volatile
 8001798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179c:	f383 8811 	msr	BASEPRI, r3
 80017a0:	f3bf 8f6f 	isb	sy
 80017a4:	f3bf 8f4f 	dsb	sy
 80017a8:	607b      	str	r3, [r7, #4]
    }
 80017aa:	bf00      	nop
 80017ac:	e7fe      	b.n	80017ac <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <vTaskStartScheduler+0x94>)
 80017b0:	681b      	ldr	r3, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20003dd0 	.word	0x20003dd0
 80017c0:	08002028 	.word	0x08002028
 80017c4:	08001cf1 	.word	0x08001cf1
 80017c8:	20003dcc 	.word	0x20003dcc
 80017cc:	20003db8 	.word	0x20003db8
 80017d0:	20003db0 	.word	0x20003db0
 80017d4:	20000010 	.word	0x20000010

080017d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <vTaskSuspendAll+0x18>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <vTaskSuspendAll+0x18>)
 80017e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	20003dd4 	.word	0x20003dd4

080017f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001802:	4b71      	ldr	r3, [pc, #452]	; (80019c8 <xTaskResumeAll+0x1d4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <xTaskResumeAll+0x2c>
        __asm volatile
 800180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180e:	f383 8811 	msr	BASEPRI, r3
 8001812:	f3bf 8f6f 	isb	sy
 8001816:	f3bf 8f4f 	dsb	sy
 800181a:	607b      	str	r3, [r7, #4]
    }
 800181c:	bf00      	nop
 800181e:	e7fe      	b.n	800181e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001820:	f7ff fcda 	bl	80011d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001824:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <xTaskResumeAll+0x1d4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3b01      	subs	r3, #1
 800182a:	4a67      	ldr	r2, [pc, #412]	; (80019c8 <xTaskResumeAll+0x1d4>)
 800182c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800182e:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <xTaskResumeAll+0x1d4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 80c0 	bne.w	80019b8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001838:	4b64      	ldr	r3, [pc, #400]	; (80019cc <xTaskResumeAll+0x1d8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80bb 	beq.w	80019b8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001842:	e08a      	b.n	800195a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001844:	4b62      	ldr	r3, [pc, #392]	; (80019d0 <xTaskResumeAll+0x1dc>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	6a12      	ldr	r2, [r2, #32]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	69d2      	ldr	r2, [r2, #28]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3318      	adds	r3, #24
 800186e:	429a      	cmp	r2, r3
 8001870:	d103      	bne.n	800187a <xTaskResumeAll+0x86>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	6a1a      	ldr	r2, [r3, #32]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	1e5a      	subs	r2, r3, #1
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	68d2      	ldr	r2, [r2, #12]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	6892      	ldr	r2, [r2, #8]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	3304      	adds	r3, #4
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d103      	bne.n	80018b8 <xTaskResumeAll+0xc4>
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	1e5a      	subs	r2, r3, #1
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	2201      	movs	r2, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	4b40      	ldr	r3, [pc, #256]	; (80019d4 <xTaskResumeAll+0x1e0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	4a3f      	ldr	r2, [pc, #252]	; (80019d4 <xTaskResumeAll+0x1e0>)
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018de:	493e      	ldr	r1, [pc, #248]	; (80019d8 <xTaskResumeAll+0x1e4>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	3304      	adds	r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	3204      	adds	r2, #4
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	1d1a      	adds	r2, r3, #4
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4a2e      	ldr	r2, [pc, #184]	; (80019d8 <xTaskResumeAll+0x1e4>)
 800191e:	441a      	add	r2, r3
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001928:	492b      	ldr	r1, [pc, #172]	; (80019d8 <xTaskResumeAll+0x1e4>)
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1c59      	adds	r1, r3, #1
 8001938:	4827      	ldr	r0, [pc, #156]	; (80019d8 <xTaskResumeAll+0x1e4>)
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4403      	add	r3, r0
 8001944:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <xTaskResumeAll+0x1e8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	429a      	cmp	r2, r3
 8001952:	d302      	bcc.n	800195a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <xTaskResumeAll+0x1ec>)
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <xTaskResumeAll+0x1dc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f af70 	bne.w	8001844 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800196a:	f000 fa57 	bl	8001e1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800196e:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <xTaskResumeAll+0x1f0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d010      	beq.n	800199c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800197a:	f000 f847 	bl	8001a0c <xTaskIncrementTick>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <xTaskResumeAll+0x1ec>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3b01      	subs	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f1      	bne.n	800197a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <xTaskResumeAll+0x1f0>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <xTaskResumeAll+0x1ec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <xTaskResumeAll+0x1f4>)
 80019aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f3bf 8f4f 	dsb	sy
 80019b4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80019b8:	f7ff fc3e 	bl	8001238 <vPortExitCritical>

    return xAlreadyYielded;
 80019bc:	69bb      	ldr	r3, [r7, #24]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20003dd4 	.word	0x20003dd4
 80019cc:	20003dac 	.word	0x20003dac
 80019d0:	20003d6c 	.word	0x20003d6c
 80019d4:	20003db4 	.word	0x20003db4
 80019d8:	20003cb0 	.word	0x20003cb0
 80019dc:	20003cac 	.word	0x20003cac
 80019e0:	20003dc0 	.word	0x20003dc0
 80019e4:	20003dbc 	.word	0x20003dbc
 80019e8:	e000ed04 	.word	0xe000ed04

080019ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <xTaskGetTickCount+0x1c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20003db0 	.word	0x20003db0

08001a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a16:	4b7d      	ldr	r3, [pc, #500]	; (8001c0c <xTaskIncrementTick+0x200>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f040 80ec 	bne.w	8001bf8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a20:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <xTaskIncrementTick+0x204>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001a28:	4a79      	ldr	r2, [pc, #484]	; (8001c10 <xTaskIncrementTick+0x204>)
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d120      	bne.n	8001a76 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001a34:	4b77      	ldr	r3, [pc, #476]	; (8001c14 <xTaskIncrementTick+0x208>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <xTaskIncrementTick+0x48>
        __asm volatile
 8001a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a42:	f383 8811 	msr	BASEPRI, r3
 8001a46:	f3bf 8f6f 	isb	sy
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	607b      	str	r3, [r7, #4]
    }
 8001a50:	bf00      	nop
 8001a52:	e7fe      	b.n	8001a52 <xTaskIncrementTick+0x46>
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <xTaskIncrementTick+0x208>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <xTaskIncrementTick+0x20c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6d      	ldr	r2, [pc, #436]	; (8001c14 <xTaskIncrementTick+0x208>)
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4a6d      	ldr	r2, [pc, #436]	; (8001c18 <xTaskIncrementTick+0x20c>)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <xTaskIncrementTick+0x210>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	4a6b      	ldr	r2, [pc, #428]	; (8001c1c <xTaskIncrementTick+0x210>)
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	f000 f9d3 	bl	8001e1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001a76:	4b6a      	ldr	r3, [pc, #424]	; (8001c20 <xTaskIncrementTick+0x214>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a3a      	ldr	r2, [r7, #32]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	f0c0 80a6 	bcc.w	8001bce <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a82:	4b64      	ldr	r3, [pc, #400]	; (8001c14 <xTaskIncrementTick+0x208>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a8c:	4b64      	ldr	r3, [pc, #400]	; (8001c20 <xTaskIncrementTick+0x214>)
 8001a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a92:	601a      	str	r2, [r3, #0]
                    break;
 8001a94:	e09b      	b.n	8001bce <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <xTaskIncrementTick+0x208>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001aa6:	6a3a      	ldr	r2, [r7, #32]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d203      	bcs.n	8001ab6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <xTaskIncrementTick+0x214>)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001ab4:	e08b      	b.n	8001bce <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	68d2      	ldr	r2, [r2, #12]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	6892      	ldr	r2, [r2, #8]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d103      	bne.n	8001ae4 <xTaskIncrementTick+0xd8>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	1e5a      	subs	r2, r3, #1
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01e      	beq.n	8001b3a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	6a12      	ldr	r2, [r2, #32]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	69d2      	ldr	r2, [r2, #28]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	3318      	adds	r3, #24
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d103      	bne.n	8001b2a <xTaskIncrementTick+0x11e>
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6a1a      	ldr	r2, [r3, #32]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	1e5a      	subs	r2, r3, #1
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	2201      	movs	r2, #1
 8001b40:	409a      	lsls	r2, r3
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <xTaskIncrementTick+0x218>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	4a36      	ldr	r2, [pc, #216]	; (8001c24 <xTaskIncrementTick+0x218>)
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b50:	4935      	ldr	r1, [pc, #212]	; (8001c28 <xTaskIncrementTick+0x21c>)
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	3204      	adds	r2, #4
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	1d1a      	adds	r2, r3, #4
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <xTaskIncrementTick+0x21c>)
 8001b90:	441a      	add	r2, r3
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	615a      	str	r2, [r3, #20]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9a:	4923      	ldr	r1, [pc, #140]	; (8001c28 <xTaskIncrementTick+0x21c>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1c59      	adds	r1, r3, #1
 8001baa:	481f      	ldr	r0, [pc, #124]	; (8001c28 <xTaskIncrementTick+0x21c>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4403      	add	r3, r0
 8001bb6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <xTaskIncrementTick+0x220>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	f67f af5d 	bls.w	8001a82 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bcc:	e759      	b.n	8001a82 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <xTaskIncrementTick+0x220>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd4:	4914      	ldr	r1, [pc, #80]	; (8001c28 <xTaskIncrementTick+0x21c>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d901      	bls.n	8001bea <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <xTaskIncrementTick+0x224>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf6:	e004      	b.n	8001c02 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <xTaskIncrementTick+0x228>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <xTaskIncrementTick+0x228>)
 8001c00:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20003dd4 	.word	0x20003dd4
 8001c10:	20003db0 	.word	0x20003db0
 8001c14:	20003d64 	.word	0x20003d64
 8001c18:	20003d68 	.word	0x20003d68
 8001c1c:	20003dc4 	.word	0x20003dc4
 8001c20:	20003dcc 	.word	0x20003dcc
 8001c24:	20003db4 	.word	0x20003db4
 8001c28:	20003cb0 	.word	0x20003cb0
 8001c2c:	20003cac 	.word	0x20003cac
 8001c30:	20003dc0 	.word	0x20003dc0
 8001c34:	20003dbc 	.word	0x20003dbc

08001c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <vTaskSwitchContext+0xa4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <vTaskSwitchContext+0xa8>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001c4c:	e03f      	b.n	8001cce <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <vTaskSwitchContext+0xa8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <vTaskSwitchContext+0xac>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	f1c3 031f 	rsb	r3, r3, #31
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	491f      	ldr	r1, [pc, #124]	; (8001ce8 <vTaskSwitchContext+0xb0>)
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c82:	f383 8811 	msr	BASEPRI, r3
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	607b      	str	r3, [r7, #4]
    }
 8001c90:	bf00      	nop
 8001c92:	e7fe      	b.n	8001c92 <vTaskSwitchContext+0x5a>
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <vTaskSwitchContext+0xb0>)
 8001ca0:	4413      	add	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	3308      	adds	r3, #8
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d104      	bne.n	8001cc4 <vTaskSwitchContext+0x8c>
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <vTaskSwitchContext+0xb4>)
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20003dd4 	.word	0x20003dd4
 8001ce0:	20003dc0 	.word	0x20003dc0
 8001ce4:	20003db4 	.word	0x20003db4
 8001ce8:	20003cb0 	.word	0x20003cb0
 8001cec:	20003cac 	.word	0x20003cac

08001cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001cf8:	f000 f852 	bl	8001da0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <prvIdleTask+0x28>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d9f9      	bls.n	8001cf8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <prvIdleTask+0x2c>)
 8001d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001d14:	e7f0      	b.n	8001cf8 <prvIdleTask+0x8>
 8001d16:	bf00      	nop
 8001d18:	20003cb0 	.word	0x20003cb0
 8001d1c:	e000ed04 	.word	0xe000ed04

08001d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	e00c      	b.n	8001d46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <prvInitialiseTaskLists+0x60>)
 8001d38:	4413      	add	r3, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f88e 	bl	8000e5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d9ef      	bls.n	8001d2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <prvInitialiseTaskLists+0x64>)
 8001d4e:	f7ff f885 	bl	8000e5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001d52:	480d      	ldr	r0, [pc, #52]	; (8001d88 <prvInitialiseTaskLists+0x68>)
 8001d54:	f7ff f882 	bl	8000e5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <prvInitialiseTaskLists+0x6c>)
 8001d5a:	f7ff f87f 	bl	8000e5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001d5e:	480c      	ldr	r0, [pc, #48]	; (8001d90 <prvInitialiseTaskLists+0x70>)
 8001d60:	f7ff f87c 	bl	8000e5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001d64:	480b      	ldr	r0, [pc, #44]	; (8001d94 <prvInitialiseTaskLists+0x74>)
 8001d66:	f7ff f879 	bl	8000e5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <prvInitialiseTaskLists+0x78>)
 8001d6c:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <prvInitialiseTaskLists+0x64>)
 8001d6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <prvInitialiseTaskLists+0x7c>)
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <prvInitialiseTaskLists+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20003cb0 	.word	0x20003cb0
 8001d84:	20003d3c 	.word	0x20003d3c
 8001d88:	20003d50 	.word	0x20003d50
 8001d8c:	20003d6c 	.word	0x20003d6c
 8001d90:	20003d80 	.word	0x20003d80
 8001d94:	20003d98 	.word	0x20003d98
 8001d98:	20003d64 	.word	0x20003d64
 8001d9c:	20003d68 	.word	0x20003d68

08001da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001da6:	e019      	b.n	8001ddc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001da8:	f7ff fa16 	bl	80011d8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <prvCheckTasksWaitingTermination+0x50>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3304      	adds	r3, #4
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f8b5 	bl	8000f28 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <prvCheckTasksWaitingTermination+0x54>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <prvCheckTasksWaitingTermination+0x54>)
 8001dc6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <prvCheckTasksWaitingTermination+0x58>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <prvCheckTasksWaitingTermination+0x58>)
 8001dd0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001dd2:	f7ff fa31 	bl	8001238 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f810 	bl	8001dfc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <prvCheckTasksWaitingTermination+0x58>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1e1      	bne.n	8001da8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20003d80 	.word	0x20003d80
 8001df4:	20003dac 	.word	0x20003dac
 8001df8:	20003d94 	.word	0x20003d94

08001dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f80f 	bl	8000e2c <vPortFree>
            vPortFree( pxTCB );
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff f80c 	bl	8000e2c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <prvResetNextTaskUnblockTime+0x30>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d104      	bne.n	8001e34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <prvResetNextTaskUnblockTime+0x34>)
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001e32:	e005      	b.n	8001e40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <prvResetNextTaskUnblockTime+0x30>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <prvResetNextTaskUnblockTime+0x34>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20003d64 	.word	0x20003d64
 8001e50:	20003dcc 	.word	0x20003dcc

08001e54 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e64:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f85c 	bl	8000f28 <uxListRemove>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10b      	bne.n	8001e8e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <prvAddCurrentTaskToDelayedList+0xec>)
 8001e8c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d124      	bne.n	8001ee0 <prvAddCurrentTaskToDelayedList+0x8c>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	6892      	ldr	r2, [r2, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	3204      	adds	r2, #4
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1d1a      	adds	r2, r3, #4
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ed0:	615a      	str	r2, [r3, #20]
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001ede:	e026      	b.n	8001f2e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d209      	bcs.n	8001f0c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3304      	adds	r3, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f7fe ffd6 	bl	8000eb6 <vListInsert>
}
 8001f0a:	e010      	b.n	8001f2e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <prvAddCurrentTaskToDelayedList+0xf8>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3304      	adds	r3, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f7fe ffcc 	bl	8000eb6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d202      	bcs.n	8001f2e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6013      	str	r3, [r2, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20003db0 	.word	0x20003db0
 8001f3c:	20003cac 	.word	0x20003cac
 8001f40:	20003db4 	.word	0x20003db4
 8001f44:	20003d98 	.word	0x20003d98
 8001f48:	20003d68 	.word	0x20003d68
 8001f4c:	20003d64 	.word	0x20003d64
 8001f50:	20003dcc 	.word	0x20003dcc

08001f54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	; (8001f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <LoopForever+0xe>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	; (8001fa0 <LoopForever+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f82:	f000 f819 	bl	8001fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f86:	f7fe f959 	bl	800023c <main>

08001f8a <LoopForever>:

LoopForever:
  b LoopForever
 8001f8a:	e7fe      	b.n	8001f8a <LoopForever>
  ldr   r0, =_estack
 8001f8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001f98:	08002050 	.word	0x08002050
  ldr r2, =_sbss
 8001f9c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001fa0:	20003dd8 	.word	0x20003dd8

08001fa4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>

08001fa6 <memset>:
 8001fa6:	4402      	add	r2, r0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d100      	bne.n	8001fb0 <memset+0xa>
 8001fae:	4770      	bx	lr
 8001fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8001fb4:	e7f9      	b.n	8001faa <memset+0x4>
	...

08001fb8 <__libc_init_array>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	4d0d      	ldr	r5, [pc, #52]	; (8001ff0 <__libc_init_array+0x38>)
 8001fbc:	4c0d      	ldr	r4, [pc, #52]	; (8001ff4 <__libc_init_array+0x3c>)
 8001fbe:	1b64      	subs	r4, r4, r5
 8001fc0:	10a4      	asrs	r4, r4, #2
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	42a6      	cmp	r6, r4
 8001fc6:	d109      	bne.n	8001fdc <__libc_init_array+0x24>
 8001fc8:	4d0b      	ldr	r5, [pc, #44]	; (8001ff8 <__libc_init_array+0x40>)
 8001fca:	4c0c      	ldr	r4, [pc, #48]	; (8001ffc <__libc_init_array+0x44>)
 8001fcc:	f000 f818 	bl	8002000 <_init>
 8001fd0:	1b64      	subs	r4, r4, r5
 8001fd2:	10a4      	asrs	r4, r4, #2
 8001fd4:	2600      	movs	r6, #0
 8001fd6:	42a6      	cmp	r6, r4
 8001fd8:	d105      	bne.n	8001fe6 <__libc_init_array+0x2e>
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe0:	4798      	blx	r3
 8001fe2:	3601      	adds	r6, #1
 8001fe4:	e7ee      	b.n	8001fc4 <__libc_init_array+0xc>
 8001fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fea:	4798      	blx	r3
 8001fec:	3601      	adds	r6, #1
 8001fee:	e7f2      	b.n	8001fd6 <__libc_init_array+0x1e>
 8001ff0:	08002048 	.word	0x08002048
 8001ff4:	08002048 	.word	0x08002048
 8001ff8:	08002048 	.word	0x08002048
 8001ffc:	0800204c 	.word	0x0800204c

08002000 <_init>:
 8002000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002002:	bf00      	nop
 8002004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002006:	bc08      	pop	{r3}
 8002008:	469e      	mov	lr, r3
 800200a:	4770      	bx	lr

0800200c <_fini>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	bf00      	nop
 8002010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002012:	bc08      	pop	{r3}
 8002014:	469e      	mov	lr, r3
 8002016:	4770      	bx	lr
