
stm32f401Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000053c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080006d0  080006d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006dc  080006dc  000106e4  2**0
                  CONTENTS
  4 .ARM          00000000  080006dc  080006dc  000106e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006dc  080006e4  000106e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006dc  080006dc  000106dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006e4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010714  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000beb  00000000  00000000  00010757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000031b  00000000  00000000  00011342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  00011660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000009b  00000000  00000000  00011740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000d66  00000000  00000000  000117db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006e3  00000000  00000000  00012541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003e10  00000000  00000000  00012c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000288  00000000  00000000  00016a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00016cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006b8 	.word	0x080006b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006b8 	.word	0x080006b8

080001d4 <main>:
#include "LIB/STD_TYPES.h"
#include "MCAL/RCC/RCC.h"
#include "MCAL/GPIO/GPIO.h"
int main()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0

	GPIO_Pin_t led;
	led.Mode = GPIO_MODE_OP_PP;
 80001da:	2301      	movs	r3, #1
 80001dc:	60bb      	str	r3, [r7, #8]
	led.Port = GPIO_PORT_C;
 80001de:	2302      	movs	r3, #2
 80001e0:	603b      	str	r3, [r7, #0]
	led.Pin = GPIO_PIN_13;
 80001e2:	230d      	movs	r3, #13
 80001e4:	607b      	str	r3, [r7, #4]
	led.Speed = GPIO_SPEED_MED;
 80001e6:	2301      	movs	r3, #1
 80001e8:	60fb      	str	r3, [r7, #12]


    RCC_EnableClk(RCC_CLK_HSE);
 80001ea:	2001      	movs	r0, #1
 80001ec:	f000 f912 	bl	8000414 <RCC_EnableClk>
    RCC_SetSystemClk(RCC_SYSCLK_HSE);
 80001f0:	2001      	movs	r0, #1
 80001f2:	f000 f989 	bl	8000508 <RCC_SetSystemClk>


    RCC_EnablePeripheral(RCC_GPIOA);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 f9c2 	bl	8000580 <RCC_EnablePeripheral>
    RCC_EnablePeripheral(RCC_GPIOB);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f000 f9bf 	bl	8000580 <RCC_EnablePeripheral>
    RCC_EnablePeripheral(RCC_GPIOC);
 8000202:	2002      	movs	r0, #2
 8000204:	f000 f9bc 	bl	8000580 <RCC_EnablePeripheral>


    GPIO_Init(&led);
 8000208:	463b      	mov	r3, r7
 800020a:	4618      	mov	r0, r3
 800020c:	f000 f80c 	bl	8000228 <GPIO_Init>


    while(1)
    {
    	GPIO_SetPinState(GPIO_PORT_C, GPIO_PIN_13, GPIO_STATE_HIGH);
 8000210:	2201      	movs	r2, #1
 8000212:	210d      	movs	r1, #13
 8000214:	2002      	movs	r0, #2
 8000216:	f000 f8a7 	bl	8000368 <GPIO_SetPinState>
    	GPIO_SetPinState(GPIO_PORT_C, GPIO_PIN_13, GPIO_STATE_LOW);
 800021a:	2200      	movs	r2, #0
 800021c:	210d      	movs	r1, #13
 800021e:	2002      	movs	r0, #2
 8000220:	f000 f8a2 	bl	8000368 <GPIO_SetPinState>
    	GPIO_SetPinState(GPIO_PORT_C, GPIO_PIN_13, GPIO_STATE_HIGH);
 8000224:	e7f4      	b.n	8000210 <main+0x3c>
	...

08000228 <GPIO_Init>:




GPIO_ErrorStatus_t GPIO_Init(GPIO_Pin_t* ADD_Config)
{
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    GPIO_ErrorStatus_t Ret_ErrorStatus = GPIO_OK;
 8000230:	2300      	movs	r3, #0
 8000232:	73fb      	strb	r3, [r7, #15]

    /* Set the Pin Mode (Input, Output, AF, Analog)*/
    u32 Local_TmpReg = GPIOs[ADD_Config->Port]->MODER;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a4a      	ldr	r2, [pc, #296]	; (8000364 <GPIO_Init+0x13c>)
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	60bb      	str	r3, [r7, #8]
    Local_TmpReg &= ~( GPIO_2_BIT_MASK << (ADD_Config->Pin * GPIO_PIN_OFFSET_2)) ;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	2203      	movs	r2, #3
 800024a:	fa02 f303 	lsl.w	r3, r2, r3
 800024e:	43db      	mvns	r3, r3
 8000250:	461a      	mov	r2, r3
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4013      	ands	r3, r2
 8000256:	60bb      	str	r3, [r7, #8]
    Local_TmpReg |= ( (ADD_Config->Mode & GPIO_MODE_MASK) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	f003 0203 	and.w	r2, r3, #3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	fa02 f303 	lsl.w	r3, r2, r3
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	4313      	orrs	r3, r2
 800026e:	60bb      	str	r3, [r7, #8]
    GPIOs[ADD_Config->Port]->MODER = Local_TmpReg;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a3b      	ldr	r2, [pc, #236]	; (8000364 <GPIO_Init+0x13c>)
 8000276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	601a      	str	r2, [r3, #0]

    /* Set the Pin output type (Push Pull or Open Drain)*/
    Local_TmpReg = GPIOs[ADD_Config->Port]->OTYPER;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a38      	ldr	r2, [pc, #224]	; (8000364 <GPIO_Init+0x13c>)
 8000284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	60bb      	str	r3, [r7, #8]
    Local_TmpReg &= ~ ( 1 << (ADD_Config->Pin) );
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	2201      	movs	r2, #1
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	43db      	mvns	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	4013      	ands	r3, r2
 800029e:	60bb      	str	r3, [r7, #8]
    Local_TmpReg |= ( (ADD_Config->Mode & GPIO_OTYPE_MASK) << (ADD_Config->Pin) );
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f003 0204 	and.w	r2, r3, #4
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	68ba      	ldr	r2, [r7, #8]
 80002b2:	4313      	orrs	r3, r2
 80002b4:	60bb      	str	r3, [r7, #8]
    GPIOs[ADD_Config->Port]->OTYPER = Local_TmpReg;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a2a      	ldr	r2, [pc, #168]	; (8000364 <GPIO_Init+0x13c>)
 80002bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	605a      	str	r2, [r3, #4]

    /* Set pin pullup/pulldown/floating */
    Local_TmpReg = GPIOs[ADD_Config->Port]->PUPDR;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a26      	ldr	r2, [pc, #152]	; (8000364 <GPIO_Init+0x13c>)
 80002ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	60bb      	str	r3, [r7, #8]
    Local_TmpReg &= ~( (GPIO_2_BIT_MASK)<< (ADD_Config->Pin*2) );
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	2203      	movs	r2, #3
 80002da:	fa02 f303 	lsl.w	r3, r2, r3
 80002de:	43db      	mvns	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	4013      	ands	r3, r2
 80002e6:	60bb      	str	r3, [r7, #8]
    Local_TmpReg |= ( (ADD_Config->Mode & GPIO_PUPD_MASK) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f003 0218 	and.w	r2, r3, #24
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	68ba      	ldr	r2, [r7, #8]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	60bb      	str	r3, [r7, #8]
    GPIOs[ADD_Config->Port]->PUPDR = Local_TmpReg;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a17      	ldr	r2, [pc, #92]	; (8000364 <GPIO_Init+0x13c>)
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	60da      	str	r2, [r3, #12]

    /* Set Pin speed */
    Local_TmpReg = GPIOs[ADD_Config->Port]->OSPEEDR;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a14      	ldr	r2, [pc, #80]	; (8000364 <GPIO_Init+0x13c>)
 8000314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	60bb      	str	r3, [r7, #8]
    Local_TmpReg &= ~( (GPIO_2_BIT_MASK)<< (ADD_Config->Pin*2) );
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	2203      	movs	r2, #3
 8000324:	fa02 f303 	lsl.w	r3, r2, r3
 8000328:	43db      	mvns	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	4013      	ands	r3, r2
 8000330:	60bb      	str	r3, [r7, #8]
    Local_TmpReg |= ( (ADD_Config->Speed) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68da      	ldr	r2, [r3, #12]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	68ba      	ldr	r2, [r7, #8]
 8000342:	4313      	orrs	r3, r2
 8000344:	60bb      	str	r3, [r7, #8]
    GPIOs[ADD_Config->Port]->OSPEEDR = Local_TmpReg;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a06      	ldr	r2, [pc, #24]	; (8000364 <GPIO_Init+0x13c>)
 800034c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000350:	68ba      	ldr	r2, [r7, #8]
 8000352:	609a      	str	r2, [r3, #8]

    return Ret_ErrorStatus;
 8000354:	7bfb      	ldrb	r3, [r7, #15]
}
 8000356:	4618      	mov	r0, r3
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	080006d0 	.word	0x080006d0

08000368 <GPIO_SetPinState>:

GPIO_ErrorStatus_t GPIO_SetPinState(u8 Copy_Port, u8 Copy_Pin, u8 Copy_State)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
 8000372:	460b      	mov	r3, r1
 8000374:	71bb      	strb	r3, [r7, #6]
 8000376:	4613      	mov	r3, r2
 8000378:	717b      	strb	r3, [r7, #5]
    GPIO_ErrorStatus_t Ret_ErrorStatus = GPIO_OK;
 800037a:	2300      	movs	r3, #0
 800037c:	73fb      	strb	r3, [r7, #15]
    u32 Local_PinMode = ( GPIOs[Copy_Port]->MODER & (GPIO_2_BIT_MASK << (Copy_Pin * GPIO_PIN_OFFSET_2)) );
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4a23      	ldr	r2, [pc, #140]	; (8000410 <GPIO_SetPinState+0xa8>)
 8000382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	79ba      	ldrb	r2, [r7, #6]
 800038a:	0052      	lsls	r2, r2, #1
 800038c:	2103      	movs	r1, #3
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	4013      	ands	r3, r2
 8000394:	60bb      	str	r3, [r7, #8]
    /* CHECK IF CHECKING FOR THE PIN MODE IS MANDAROTY */

    if( Local_PinMode != (GPIO_MODE_OP << (Copy_Pin * GPIO_PIN_OFFSET_2)) )
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	2201      	movs	r2, #1
 800039c:	409a      	lsls	r2, r3
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d002      	beq.n	80003aa <GPIO_SetPinState+0x42>
    {
        Ret_ErrorStatus = GPIO_NOK;
 80003a4:	2301      	movs	r3, #1
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e02a      	b.n	8000400 <GPIO_SetPinState+0x98>
    }
    else
    {
        switch(Copy_State)
 80003aa:	797b      	ldrb	r3, [r7, #5]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <GPIO_SetPinState+0x4e>
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d012      	beq.n	80003da <GPIO_SetPinState+0x72>
 80003b4:	e022      	b.n	80003fc <GPIO_SetPinState+0x94>
        {
            case GPIO_STATE_LOW: 
                GPIOs[Copy_Port]->ODR &= ~(1<< Copy_Pin);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	4a15      	ldr	r2, [pc, #84]	; (8000410 <GPIO_SetPinState+0xa8>)
 80003ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003be:	695a      	ldr	r2, [r3, #20]
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2101      	movs	r1, #1
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	43db      	mvns	r3, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	4910      	ldr	r1, [pc, #64]	; (8000410 <GPIO_SetPinState+0xa8>)
 80003d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003d4:	4002      	ands	r2, r0
 80003d6:	615a      	str	r2, [r3, #20]
                break;
 80003d8:	e012      	b.n	8000400 <GPIO_SetPinState+0x98>
            
            case GPIO_STATE_HIGH:
                GPIOs[Copy_Port]->ODR |= (1<< Copy_Pin);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <GPIO_SetPinState+0xa8>)
 80003de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e2:	695a      	ldr	r2, [r3, #20]
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	2101      	movs	r1, #1
 80003e8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4907      	ldr	r1, [pc, #28]	; (8000410 <GPIO_SetPinState+0xa8>)
 80003f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003f6:	4302      	orrs	r2, r0
 80003f8:	615a      	str	r2, [r3, #20]
                break;
 80003fa:	e001      	b.n	8000400 <GPIO_SetPinState+0x98>

            default:
                Ret_ErrorStatus = GPIO_NOK;
 80003fc:	2301      	movs	r3, #1
 80003fe:	73fb      	strb	r3, [r7, #15]
        }
    }

    return Ret_ErrorStatus;
 8000400:	7bfb      	ldrb	r3, [r7, #15]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	080006d0 	.word	0x080006d0

08000414 <RCC_EnableClk>:
    RCC_LPWRRSTF = 31,

}RCC_CSR_Bits_t;

RCC_ErrorStatus_t RCC_EnableClk(u8 Copy_Clk)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 800041e:	2300      	movs	r3, #0
 8000420:	73fb      	strb	r3, [r7, #15]

    switch(Copy_Clk)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b05      	cmp	r3, #5
 8000426:	d863      	bhi.n	80004f0 <RCC_EnableClk+0xdc>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <RCC_EnableClk+0x1c>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000449 	.word	0x08000449
 8000434:	08000465 	.word	0x08000465
 8000438:	08000481 	.word	0x08000481
 800043c:	0800049d 	.word	0x0800049d
 8000440:	080004b9 	.word	0x080004b9
 8000444:	080004d5 	.word	0x080004d5
    {
        case RCC_CLK_HSI:
            RCC->CR |= (1<<RCC_HSION);
 8000448:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <RCC_EnableClk+0xf0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a2d      	ldr	r2, [pc, #180]	; (8000504 <RCC_EnableClk+0xf0>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( ((RCC->CR >> RCC_HSIRDY) & 1) == 0 );
 8000454:	bf00      	nop
 8000456:	4b2b      	ldr	r3, [pc, #172]	; (8000504 <RCC_EnableClk+0xf0>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f003 0302 	and.w	r3, r3, #2
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f9      	beq.n	8000456 <RCC_EnableClk+0x42>
            break;
 8000462:	e047      	b.n	80004f4 <RCC_EnableClk+0xe0>

        case RCC_CLK_HSE:
            RCC->CR |= (1<<RCC_HSEON);
 8000464:	4b27      	ldr	r3, [pc, #156]	; (8000504 <RCC_EnableClk+0xf0>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a26      	ldr	r2, [pc, #152]	; (8000504 <RCC_EnableClk+0xf0>)
 800046a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800046e:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( ((RCC->CR >> RCC_HSERDY) & 1) == 0 );
 8000470:	bf00      	nop
 8000472:	4b24      	ldr	r3, [pc, #144]	; (8000504 <RCC_EnableClk+0xf0>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f9      	beq.n	8000472 <RCC_EnableClk+0x5e>
            break;
 800047e:	e039      	b.n	80004f4 <RCC_EnableClk+0xe0>

        case RCC_CLK_PLL:
            RCC->CR |= (1<<RCC_PLLON);
 8000480:	4b20      	ldr	r3, [pc, #128]	; (8000504 <RCC_EnableClk+0xf0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <RCC_EnableClk+0xf0>)
 8000486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800048a:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( ((RCC->CR >> RCC_PLLRDY) & 1) == 0 );
 800048c:	bf00      	nop
 800048e:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <RCC_EnableClk+0xf0>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000496:	2b00      	cmp	r3, #0
 8000498:	d0f9      	beq.n	800048e <RCC_EnableClk+0x7a>
            break;
 800049a:	e02b      	b.n	80004f4 <RCC_EnableClk+0xe0>

        case RCC_CLK_PLL2:
            RCC->CR |= (1<<RCC_PLLI2SON);
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <RCC_EnableClk+0xf0>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a18      	ldr	r2, [pc, #96]	; (8000504 <RCC_EnableClk+0xf0>)
 80004a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004a6:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( ((RCC->CR >> RCC_PLLI2SRDY) & 1) == 0 );
 80004a8:	bf00      	nop
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <RCC_EnableClk+0xf0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d0f9      	beq.n	80004aa <RCC_EnableClk+0x96>
            break;
 80004b6:	e01d      	b.n	80004f4 <RCC_EnableClk+0xe0>

        case RCC_CLK_LSE:
            RCC->CR |= (1<<RCC_LSEON);
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <RCC_EnableClk+0xf0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <RCC_EnableClk+0xf0>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( ((RCC->BDCR >> RCC_LSERDY) & 1) == 0 );
 80004c4:	bf00      	nop
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <RCC_EnableClk+0xf0>)
 80004c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80004ca:	f003 0302 	and.w	r3, r3, #2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <RCC_EnableClk+0xb2>
            break;
 80004d2:	e00f      	b.n	80004f4 <RCC_EnableClk+0xe0>

        case RCC_CLK_LSI:
            RCC->CR |= (1<<RCC_LSION);
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <RCC_EnableClk+0xf0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <RCC_EnableClk+0xf0>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( ((RCC->CSR >> RCC_LSIRDY) & 1) == 0 );
 80004e0:	bf00      	nop
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <RCC_EnableClk+0xf0>)
 80004e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f9      	beq.n	80004e2 <RCC_EnableClk+0xce>
            break;
 80004ee:	e001      	b.n	80004f4 <RCC_EnableClk+0xe0>

        default:
            Ret_ErrorStatus = RCC_NOK;
 80004f0:	2301      	movs	r3, #1
 80004f2:	73fb      	strb	r3, [r7, #15]
    }


    return Ret_ErrorStatus;
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800

08000508 <RCC_SetSystemClk>:




RCC_ErrorStatus_t RCC_SetSystemClk(u8 Copy_SystemClk)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 8000512:	2300      	movs	r3, #0
 8000514:	73fb      	strb	r3, [r7, #15]
    u32 Local_TmpReg;

    if(
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d105      	bne.n	8000528 <RCC_SetSystemClk+0x20>
        ( (Copy_SystemClk == RCC_SYSCLK_HSI) && !( (RCC->CR >> RCC_HSION) & 1 ) )
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <RCC_SetSystemClk+0x74>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	2b00      	cmp	r3, #0
 8000526:	d011      	beq.n	800054c <RCC_SetSystemClk+0x44>
        ||
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d105      	bne.n	800053a <RCC_SetSystemClk+0x32>
        ( (Copy_SystemClk == RCC_SYSCLK_HSE) && !( (RCC->CR >> RCC_HSEON) & 1 ) )
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <RCC_SetSystemClk+0x74>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000536:	2b00      	cmp	r3, #0
 8000538:	d008      	beq.n	800054c <RCC_SetSystemClk+0x44>
        ||
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d108      	bne.n	8000552 <RCC_SetSystemClk+0x4a>
        ( (Copy_SystemClk == RCC_SYSCLK_PLL) && !( (RCC->CR >> RCC_PLLON) & 1 ) )
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <RCC_SetSystemClk+0x74>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <RCC_SetSystemClk+0x4a>
                                                                                )

    {
        Ret_ErrorStatus = RCC_NOK;
 800054c:	2301      	movs	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	e00d      	b.n	800056e <RCC_SetSystemClk+0x66>
    }
    else
    {
        Local_TmpReg = RCC->CFGR;
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <RCC_SetSystemClk+0x74>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	60bb      	str	r3, [r7, #8]
        Local_TmpReg &= (~RCC_SYSCLK_MASK);
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	f023 0303 	bic.w	r3, r3, #3
 800055e:	60bb      	str	r3, [r7, #8]
        Local_TmpReg |= Copy_SystemClk;
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	4313      	orrs	r3, r2
 8000566:	60bb      	str	r3, [r7, #8]
        RCC->CFGR = Local_TmpReg;
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <RCC_SetSystemClk+0x74>)
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	6093      	str	r3, [r2, #8]

    }

    return Ret_ErrorStatus;
 800056e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40023800 	.word	0x40023800

08000580 <RCC_EnablePeripheral>:
    return Ret_ErrorStatus;
}


RCC_ErrorStatus_t RCC_EnablePeripheral(RCC_Peripheral_t Copy_Peripheral)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 800058a:	2300      	movs	r3, #0
 800058c:	73fb      	strb	r3, [r7, #15]

    if(Copy_Peripheral < 32)        /* AHB1 REG peripherals */
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b1f      	cmp	r3, #31
 8000592:	d80a      	bhi.n	80005aa <RCC_EnablePeripheral+0x2a>
    {
        RCC->AHB1ENR |= (1<<Copy_Peripheral);
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <RCC_EnablePeripheral+0x98>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	79fa      	ldrb	r2, [r7, #7]
 800059a:	2101      	movs	r1, #1
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <RCC_EnablePeripheral+0x98>)
 80005a4:	430b      	orrs	r3, r1
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
 80005a8:	e02f      	b.n	800060a <RCC_EnablePeripheral+0x8a>
    }
    else if(Copy_Peripheral < 64)   /* AHB2 REG peripherals */
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b3f      	cmp	r3, #63	; 0x3f
 80005ae:	d80b      	bhi.n	80005c8 <RCC_EnablePeripheral+0x48>
    {
        RCC->AHB2ENR |= (1<< (Copy_Peripheral - 32) );
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <RCC_EnablePeripheral+0x98>)
 80005b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b4:	79fa      	ldrb	r2, [r7, #7]
 80005b6:	3a20      	subs	r2, #32
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a15      	ldr	r2, [pc, #84]	; (8000618 <RCC_EnablePeripheral+0x98>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6353      	str	r3, [r2, #52]	; 0x34
 80005c6:	e020      	b.n	800060a <RCC_EnablePeripheral+0x8a>
    }
    else if(Copy_Peripheral < 96)   /* APB1 REG peripherals */
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b5f      	cmp	r3, #95	; 0x5f
 80005cc:	d80b      	bhi.n	80005e6 <RCC_EnablePeripheral+0x66>
    {
        RCC->APB1ENR |= (1<< (Copy_Peripheral - 64) );
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <RCC_EnablePeripheral+0x98>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	3a40      	subs	r2, #64	; 0x40
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <RCC_EnablePeripheral+0x98>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	e011      	b.n	800060a <RCC_EnablePeripheral+0x8a>
    }
    else if(Copy_Peripheral < 128)  /* APB2 REG peripherals */
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	db0b      	blt.n	8000606 <RCC_EnablePeripheral+0x86>
    {
        RCC->APB2ENR |= (1<< (Copy_Peripheral - 96) );
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <RCC_EnablePeripheral+0x98>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	3a60      	subs	r2, #96	; 0x60
 80005f6:	2101      	movs	r1, #1
 80005f8:	fa01 f202 	lsl.w	r2, r1, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <RCC_EnablePeripheral+0x98>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6453      	str	r3, [r2, #68]	; 0x44
 8000604:	e001      	b.n	800060a <RCC_EnablePeripheral+0x8a>
    }
    else
    {
        Ret_ErrorStatus = RCC_NOK;
 8000606:	2301      	movs	r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
    }

    return Ret_ErrorStatus;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40023800 	.word	0x40023800

0800061c <Reset_Handler>:
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopForever+0x2>)
 800061e:	4685      	mov	sp, r0
 8000620:	f3af 8000 	nop.w
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LoopForever+0x6>)
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <LoopForever+0xa>)
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LoopForever+0xe>)
 800062a:	2300      	movs	r3, #0
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:
 800062e:	58d4      	ldr	r4, [r2, r3]
 8000630:	50c4      	str	r4, [r0, r3]
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:
 8000634:	18c4      	adds	r4, r0, r3
 8000636:	428c      	cmp	r4, r1
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <LoopForever+0x16>)
 800063e:	2300      	movs	r3, #0
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:
 8000646:	42a2      	cmp	r2, r4
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>
 800064a:	f000 f811 	bl	8000670 <__libc_init_array>
 800064e:	f7ff fdc1 	bl	80001d4 <main>

08000652 <LoopForever>:
 8000652:	e7fe      	b.n	8000652 <LoopForever>
 8000654:	20010000 	.word	0x20010000
 8000658:	20000000 	.word	0x20000000
 800065c:	20000000 	.word	0x20000000
 8000660:	080006e4 	.word	0x080006e4
 8000664:	20000000 	.word	0x20000000
 8000668:	2000001c 	.word	0x2000001c

0800066c <ADC_IRQHandler>:
 800066c:	e7fe      	b.n	800066c <ADC_IRQHandler>
	...

08000670 <__libc_init_array>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	4d0d      	ldr	r5, [pc, #52]	; (80006a8 <__libc_init_array+0x38>)
 8000674:	4c0d      	ldr	r4, [pc, #52]	; (80006ac <__libc_init_array+0x3c>)
 8000676:	1b64      	subs	r4, r4, r5
 8000678:	10a4      	asrs	r4, r4, #2
 800067a:	2600      	movs	r6, #0
 800067c:	42a6      	cmp	r6, r4
 800067e:	d109      	bne.n	8000694 <__libc_init_array+0x24>
 8000680:	4d0b      	ldr	r5, [pc, #44]	; (80006b0 <__libc_init_array+0x40>)
 8000682:	4c0c      	ldr	r4, [pc, #48]	; (80006b4 <__libc_init_array+0x44>)
 8000684:	f000 f818 	bl	80006b8 <_init>
 8000688:	1b64      	subs	r4, r4, r5
 800068a:	10a4      	asrs	r4, r4, #2
 800068c:	2600      	movs	r6, #0
 800068e:	42a6      	cmp	r6, r4
 8000690:	d105      	bne.n	800069e <__libc_init_array+0x2e>
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f855 3b04 	ldr.w	r3, [r5], #4
 8000698:	4798      	blx	r3
 800069a:	3601      	adds	r6, #1
 800069c:	e7ee      	b.n	800067c <__libc_init_array+0xc>
 800069e:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a2:	4798      	blx	r3
 80006a4:	3601      	adds	r6, #1
 80006a6:	e7f2      	b.n	800068e <__libc_init_array+0x1e>
 80006a8:	080006dc 	.word	0x080006dc
 80006ac:	080006dc 	.word	0x080006dc
 80006b0:	080006dc 	.word	0x080006dc
 80006b4:	080006e0 	.word	0x080006e0

080006b8 <_init>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	bf00      	nop
 80006bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006be:	bc08      	pop	{r3}
 80006c0:	469e      	mov	lr, r3
 80006c2:	4770      	bx	lr

080006c4 <_fini>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr
