
stm32f401Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001878  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001a0c  08001a0c  00011a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a7c  08001a7c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001a7c  08001a7c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a7c  08001a7c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a7c  08001a7c  00011a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a80  08001a80  00011a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000060  08001ae4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08001ae4  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000028dd  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e07  00000000  00000000  000229b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000330  00000000  00000000  000237b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000219  00000000  00000000  00023ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000092d  00000000  00000000  00023d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e3b  00000000  00000000  0002462e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000624a  00000000  00000000  00026469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000944  00000000  00000000  0002c6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0002cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000060 	.word	0x20000060
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080019f4 	.word	0x080019f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000064 	.word	0x20000064
 80001d0:	080019f4 	.word	0x080019f4

080001d4 <main>:
	LCD_WriteBufferAsync(buffer, 7);
}


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

    RCC_EnableClk(RCC_CLK_HSE);
 80001d8:	2001      	movs	r0, #1
 80001da:	f000 ff95 	bl	8001108 <RCC_EnableClk>
    RCC_SetSystemClk(RCC_SYSCLK_HSE);
 80001de:	2001      	movs	r0, #1
 80001e0:	f001 f840 	bl	8001264 <RCC_SetSystemClk>

    RCC_EnablePeripheral(RCC_GPIOA);
 80001e4:	f04f 0000 	mov.w	r0, #0
 80001e8:	f04f 0103 	mov.w	r1, #3
 80001ec:	f001 f876 	bl	80012dc <RCC_EnablePeripheral>
    RCC_EnablePeripheral(RCC_GPIOB);
 80001f0:	f04f 0001 	mov.w	r0, #1
 80001f4:	f04f 0103 	mov.w	r1, #3
 80001f8:	f001 f870 	bl	80012dc <RCC_EnablePeripheral>



    blinkingLed_Init();
 80001fc:	f000 f82b 	bl	8000256 <blinkingLed_Init>
    LED_Init();
 8000200:	f000 fcd0 	bl	8000ba4 <LED_Init>
    LCD_Init();
 8000204:	f000 fba2 	bl	800094c <LCD_Init>




    SCHED_Init();
 8000208:	f001 fb60 	bl	80018cc <SCHED_Init>
    SCHED_Start();
 800020c:	f001 fb90 	bl	8001930 <SCHED_Start>

    return 0;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <lcdApp>:


void lcdApp(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	LCD_SendCommandAsync(DISPLAY_ON_CURSOR_ON_BLINKING_ON);
 800021c:	200f      	movs	r0, #15
 800021e:	f000 fc81 	bl	8000b24 <LCD_SendCommandAsync>

//	LCD_WriteStringAsync("Ahmed");
//	LCD_WriteStringAsync("Ahmed");
//	LCD_WriteStringAsync("Ahmed");
//	LCD_WriteStringAsync("Ahmed");
	LCD_WriteStringAsync("Ahmed");
 8000222:	4808      	ldr	r0, [pc, #32]	; (8000244 <lcdApp+0x2c>)
 8000224:	f000 fbde 	bl	80009e4 <LCD_WriteStringAsync>

	LCD_SetCursorPosAsync(1, 0);
 8000228:	2100      	movs	r1, #0
 800022a:	2001      	movs	r0, #1
 800022c:	f000 fc2c 	bl	8000a88 <LCD_SetCursorPosAsync>
//	LCD_WriteStringAsync("AhmedDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD");
	LCD_WriteStringAsync("Ahmed");
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <lcdApp+0x2c>)
 8000232:	f000 fbd7 	bl	80009e4 <LCD_WriteStringAsync>

//	LCD_WriteStringAsync("Osman");
	LCD_SetCursorPosAsync(0, 0);
 8000236:	2100      	movs	r1, #0
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fc25 	bl	8000a88 <LCD_SetCursorPosAsync>

//	LCD_SendCommandAsync(DISPLAY_ON_CURSOR_OFF_BLINKING_OFF);
//	LCD_SendCommandAsync(DISPLAY_ON_CURSOR_ON_BLINKING_OFF);


}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	08001a0c 	.word	0x08001a0c

08000248 <uartApp>:

void uartApp(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <blinkingLed_Init>:
/*                                  IMPLEMENTATION                           	*/
/* ============================================================================ */


void blinkingLed_Init(void)
{
 8000256:	b580      	push	{r7, lr}
 8000258:	af00      	add	r7, sp, #0
    RCC_EnablePeripheral(RCC_GPIOC);
 800025a:	f04f 0002 	mov.w	r0, #2
 800025e:	f04f 0103 	mov.w	r1, #3
 8000262:	f001 f83b 	bl	80012dc <RCC_EnablePeripheral>
    LED_Init();
 8000266:	f000 fc9d 	bl	8000ba4 <LED_Init>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <blinkingLed_Update>:

void blinkingLed_Update(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    LED_SetState(BLINKING_LED, state);
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <blinkingLed_Update+0x28>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4619      	mov	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fd0e 	bl	8000c9c <LED_SetState>
    state = !state;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <blinkingLed_Update+0x28>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	bf0c      	ite	eq
 8000288:	2301      	moveq	r3, #1
 800028a:	2300      	movne	r3, #0
 800028c:	b2db      	uxtb	r3, r3
 800028e:	461a      	mov	r2, r3
 8000290:	4b01      	ldr	r3, [pc, #4]	; (8000298 <blinkingLed_Update+0x28>)
 8000292:	701a      	strb	r2, [r3, #0]
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000007c 	.word	0x2000007c

0800029c <Latch>:
 * It also handles the case of 8-bit mode and 4-bit mode
 * 
 * @param byte The byte to be written on LCD pins
 */
static void Latch(u8 byte)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
    #endif

    static u8 EnablePinState = ENABLE_PIN_LOW;      /* State of the Enable Pin */
    u8 iter;

    if(EnablePinState == ENABLE_PIN_LOW)
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <Latch+0x74>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d121      	bne.n	80002f2 <Latch+0x56>
    {
        for(iter = 0; iter < LCD_PINS_NUM; iter++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e017      	b.n	80002e4 <Latch+0x48>
        {
            /* set the lcd pin state with the value corresponding to the bit in the sent byte */

            #if LCD_MODE == LCD_8_BIT_MODE
            GPIO_SetPinState( LCD_Pins[iter].Port, LCD_Pins[iter].Pin, (byte >> iter)&1 );
 80002b4:	7bfb      	ldrb	r3, [r7, #15]
 80002b6:	4a17      	ldr	r2, [pc, #92]	; (8000314 <Latch+0x78>)
 80002b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	4a15      	ldr	r2, [pc, #84]	; (8000314 <Latch+0x78>)
 80002c0:	00db      	lsls	r3, r3, #3
 80002c2:	4413      	add	r3, r2
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	4619      	mov	r1, r3
 80002c8:	79fa      	ldrb	r2, [r7, #7]
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	fa42 f303 	asr.w	r3, r2, r3
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	461a      	mov	r2, r3
 80002da:	f000 fec5 	bl	8001068 <GPIO_SetPinState>
        for(iter = 0; iter < LCD_PINS_NUM; iter++)
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	3301      	adds	r3, #1
 80002e2:	73fb      	strb	r3, [r7, #15]
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	2b07      	cmp	r3, #7
 80002e8:	d9e4      	bls.n	80002b4 <Latch+0x18>
            GPIO_SetPinState( LCD_Pins[iter].Port, LCD_Pins[iter].Pin, (byte >> (iter+currNibble))&1 );
            #endif

        }

        EnablePinState = ENABLE_PIN_HIGH;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <Latch+0x74>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	e002      	b.n	80002f8 <Latch+0x5c>
    }
    else
    {
        EnablePinState = ENABLE_PIN_LOW;
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <Latch+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
            low nibble, then each time a nibble is latched we need to change
            the nibble to be latched to the opposite nibble */
        currNibble = (currNibble == HIGH_NIBBLE)? LOW_NIBBLE : HIGH_NIBBLE;
        #endif
    }
    GPIO_SetPinState(LCD_PORT_E, LCD_PIN_E, EnablePinState);
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <Latch+0x74>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	461a      	mov	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	4805      	ldr	r0, [pc, #20]	; (8000318 <Latch+0x7c>)
 8000302:	f000 feb1 	bl	8001068 <GPIO_SetPinState>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000e6 	.word	0x200000e6
 8000314:	08001a30 	.word	0x08001a30
 8000318:	40020400 	.word	0x40020400

0800031c <WriteCommand>:


static void WriteCommand(u8 command)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    GPIO_SetPinState(LCD_PORT_RS, LCD_PIN_RS, 0);   
 8000326:	2200      	movs	r2, #0
 8000328:	2100      	movs	r1, #0
 800032a:	4808      	ldr	r0, [pc, #32]	; (800034c <WriteCommand+0x30>)
 800032c:	f000 fe9c 	bl	8001068 <GPIO_SetPinState>
    GPIO_SetPinState(LCD_PORT_RW, LCD_PIN_RW, 0);   
 8000330:	2200      	movs	r2, #0
 8000332:	2101      	movs	r1, #1
 8000334:	4805      	ldr	r0, [pc, #20]	; (800034c <WriteCommand+0x30>)
 8000336:	f000 fe97 	bl	8001068 <GPIO_SetPinState>
    Latch(command);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ffad 	bl	800029c <Latch>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40020000 	.word	0x40020000

08000350 <WriteData>:


static void WriteData(u8 data)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]

    GPIO_SetPinState(LCD_PORT_RS, LCD_PIN_RS, 1);   
 800035a:	2201      	movs	r2, #1
 800035c:	2100      	movs	r1, #0
 800035e:	4808      	ldr	r0, [pc, #32]	; (8000380 <WriteData+0x30>)
 8000360:	f000 fe82 	bl	8001068 <GPIO_SetPinState>
    GPIO_SetPinState(LCD_PORT_RW, LCD_PIN_RW, 0); 
 8000364:	2200      	movs	r2, #0
 8000366:	2101      	movs	r1, #1
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <WriteData+0x30>)
 800036a:	f000 fe7d 	bl	8001068 <GPIO_SetPinState>

    Latch(data);
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff93 	bl	800029c <Latch>
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40020000 	.word	0x40020000

08000384 <InitProcess>:


#if LCD_MODE == LCD_8_BIT_MODE

static void InitProcess(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
    static LCD_Init_States_t InitState = POWER_ON_STATE;
    static u8 counter = 0;

    switch(InitState)
 8000388:	4b3e      	ldr	r3, [pc, #248]	; (8000484 <InitProcess+0x100>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b05      	cmp	r3, #5
 800038e:	d874      	bhi.n	800047a <InitProcess+0xf6>
 8000390:	a201      	add	r2, pc, #4	; (adr r2, 8000398 <InitProcess+0x14>)
 8000392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000396:	bf00      	nop
 8000398:	080003b1 	.word	0x080003b1
 800039c:	080003d3 	.word	0x080003d3
 80003a0:	080003fb 	.word	0x080003fb
 80003a4:	08000423 	.word	0x08000423
 80003a8:	0800044b 	.word	0x0800044b
 80003ac:	08000473 	.word	0x08000473
    {
        case POWER_ON_STATE:
            /* Delay for 30 ms */
            counter += LCD_UPDATE_PERIODICITY_MS;
 80003b0:	4b35      	ldr	r3, [pc, #212]	; (8000488 <InitProcess+0x104>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	3302      	adds	r3, #2
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b33      	ldr	r3, [pc, #204]	; (8000488 <InitProcess+0x104>)
 80003ba:	701a      	strb	r2, [r3, #0]

            if(counter >= 30)
 80003bc:	4b32      	ldr	r3, [pc, #200]	; (8000488 <InitProcess+0x104>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b1d      	cmp	r3, #29
 80003c2:	d95c      	bls.n	800047e <InitProcess+0xfa>
            {
                /* Move to next state if dealy reaches 30ms */
                counter = 0;
 80003c4:	4b30      	ldr	r3, [pc, #192]	; (8000488 <InitProcess+0x104>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
                InitState = FUNCTIONAL_SET_STATE;
 80003ca:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <InitProcess+0x100>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
            }
            break;
 80003d0:	e055      	b.n	800047e <InitProcess+0xfa>

        case FUNCTIONAL_SET_STATE:
            counter++;
 80003d2:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <InitProcess+0x104>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	3301      	adds	r3, #1
 80003d8:	b2da      	uxtb	r2, r3
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <InitProcess+0x104>)
 80003dc:	701a      	strb	r2, [r3, #0]
            if(counter == LATCH_TARGET_COUNT)
 80003de:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <InitProcess+0x104>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	d105      	bne.n	80003f2 <InitProcess+0x6e>
            {
                counter = 0;
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <InitProcess+0x104>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
                InitState = DISPLAY_CTRL_STATE;
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <InitProcess+0x100>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	701a      	strb	r2, [r3, #0]
            }
            WriteCommand(FUNCTION_SET);
 80003f2:	2038      	movs	r0, #56	; 0x38
 80003f4:	f7ff ff92 	bl	800031c <WriteCommand>
            break;
 80003f8:	e042      	b.n	8000480 <InitProcess+0xfc>

        case DISPLAY_CTRL_STATE:
            counter++;
 80003fa:	4b23      	ldr	r3, [pc, #140]	; (8000488 <InitProcess+0x104>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	3301      	adds	r3, #1
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <InitProcess+0x104>)
 8000404:	701a      	strb	r2, [r3, #0]
            if(counter == LATCH_TARGET_COUNT)
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <InitProcess+0x104>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b02      	cmp	r3, #2
 800040c:	d105      	bne.n	800041a <InitProcess+0x96>
            {
                counter = 0;
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <InitProcess+0x104>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
                InitState = CLEAR_DISPLAY_STATE;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <InitProcess+0x100>)
 8000416:	2203      	movs	r2, #3
 8000418:	701a      	strb	r2, [r3, #0]
            }
            WriteCommand(LCD_DISPLAY_CONTROL);
 800041a:	200c      	movs	r0, #12
 800041c:	f7ff ff7e 	bl	800031c <WriteCommand>
            break;
 8000420:	e02e      	b.n	8000480 <InitProcess+0xfc>

        case CLEAR_DISPLAY_STATE:
            counter++;
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <InitProcess+0x104>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <InitProcess+0x104>)
 800042c:	701a      	strb	r2, [r3, #0]
            if(counter == LATCH_TARGET_COUNT)
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <InitProcess+0x104>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b02      	cmp	r3, #2
 8000434:	d105      	bne.n	8000442 <InitProcess+0xbe>
            {
                counter = 0;
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <InitProcess+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
                InitState = ENTRY_MODE_STATE;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <InitProcess+0x100>)
 800043e:	2204      	movs	r2, #4
 8000440:	701a      	strb	r2, [r3, #0]
            }
            WriteCommand(LCD_CLEAR_DISPLAY);
 8000442:	2001      	movs	r0, #1
 8000444:	f7ff ff6a 	bl	800031c <WriteCommand>
            break;
 8000448:	e01a      	b.n	8000480 <InitProcess+0xfc>
                    
        case ENTRY_MODE_STATE:
            counter++;
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <InitProcess+0x104>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <InitProcess+0x104>)
 8000454:	701a      	strb	r2, [r3, #0]
            if(counter == LATCH_TARGET_COUNT)
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <InitProcess+0x104>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d105      	bne.n	800046a <InitProcess+0xe6>
            {
                counter = 0;
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <InitProcess+0x104>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
                InitState = END_STATE;
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <InitProcess+0x100>)
 8000466:	2205      	movs	r2, #5
 8000468:	701a      	strb	r2, [r3, #0]
            }
            WriteCommand(LCD_ENTRY_MODE);
 800046a:	2006      	movs	r0, #6
 800046c:	f7ff ff56 	bl	800031c <WriteCommand>
            break;
 8000470:	e006      	b.n	8000480 <InitProcess+0xfc>

        case END_STATE:
            G_LCDState = LCD_OPERATION;
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <InitProcess+0x108>)
 8000474:	2202      	movs	r2, #2
 8000476:	701a      	strb	r2, [r3, #0]
            break;
 8000478:	e002      	b.n	8000480 <InitProcess+0xfc>
        
        default:
            break;
 800047a:	bf00      	nop
 800047c:	e000      	b.n	8000480 <InitProcess+0xfc>
            break;
 800047e:	bf00      	nop
    }
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000e7 	.word	0x200000e7
 8000488:	200000e8 	.word	0x200000e8
 800048c:	2000007d 	.word	0x2000007d

08000490 <WriteString>:
#endif


/* Iterates through the string and prints each character */
static void WriteString(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0

    if(Requests[currReqIdx].data[Requests[currReqIdx].currIndex] != '\0')
 8000494:	4b38      	ldr	r3, [pc, #224]	; (8000578 <WriteString+0xe8>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4619      	mov	r1, r3
 800049a:	4a38      	ldr	r2, [pc, #224]	; (800057c <WriteString+0xec>)
 800049c:	460b      	mov	r3, r1
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	440b      	add	r3, r1
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	4413      	add	r3, r2
 80004a6:	3308      	adds	r3, #8
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	4b33      	ldr	r3, [pc, #204]	; (8000578 <WriteString+0xe8>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	4932      	ldr	r1, [pc, #200]	; (800057c <WriteString+0xec>)
 80004b2:	4603      	mov	r3, r0
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4403      	add	r3, r0
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	440b      	add	r3, r1
 80004bc:	330d      	adds	r3, #13
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4413      	add	r3, r2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d03e      	beq.n	8000546 <WriteString+0xb6>
    {
        WriteData(Requests[currReqIdx].data[Requests[currReqIdx].currIndex]);
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <WriteString+0xe8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4619      	mov	r1, r3
 80004ce:	4a2b      	ldr	r2, [pc, #172]	; (800057c <WriteString+0xec>)
 80004d0:	460b      	mov	r3, r1
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	440b      	add	r3, r1
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	4413      	add	r3, r2
 80004da:	3308      	adds	r3, #8
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b26      	ldr	r3, [pc, #152]	; (8000578 <WriteString+0xe8>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	4925      	ldr	r1, [pc, #148]	; (800057c <WriteString+0xec>)
 80004e6:	4603      	mov	r3, r0
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4403      	add	r3, r0
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	440b      	add	r3, r1
 80004f0:	330d      	adds	r3, #13
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4413      	add	r3, r2
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ff29 	bl	8000350 <WriteData>
        G_OperationLatchCount++;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <WriteString+0xf0>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <WriteString+0xf0>)
 8000508:	701a      	strb	r2, [r3, #0]

        if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <WriteString+0xf0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d130      	bne.n	8000574 <WriteString+0xe4>
        {
            Requests[currReqIdx].currIndex++;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <WriteString+0xe8>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	4918      	ldr	r1, [pc, #96]	; (800057c <WriteString+0xec>)
 800051a:	4613      	mov	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4413      	add	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	440b      	add	r3, r1
 8000524:	330d      	adds	r3, #13
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	b2d8      	uxtb	r0, r3
 800052c:	4913      	ldr	r1, [pc, #76]	; (800057c <WriteString+0xec>)
 800052e:	4613      	mov	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	4413      	add	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	330d      	adds	r3, #13
 800053a:	4602      	mov	r2, r0
 800053c:	701a      	strb	r2, [r3, #0]
            G_OperationLatchCount = 0;
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <WriteString+0xf0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
    {
        Requests[currReqIdx].state = AVAILABLE;
        Requests[currReqIdx].type = NONE;

    }
}
 8000544:	e016      	b.n	8000574 <WriteString+0xe4>
        Requests[currReqIdx].state = AVAILABLE;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <WriteString+0xe8>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	4619      	mov	r1, r3
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <WriteString+0xec>)
 800054e:	460b      	mov	r3, r1
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	440b      	add	r3, r1
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4413      	add	r3, r2
 8000558:	3301      	adds	r3, #1
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
        Requests[currReqIdx].type = NONE;
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <WriteString+0xe8>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4619      	mov	r1, r3
 8000564:	4a05      	ldr	r2, [pc, #20]	; (800057c <WriteString+0xec>)
 8000566:	460b      	mov	r3, r1
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000e4 	.word	0x200000e4
 800057c:	20000080 	.word	0x20000080
 8000580:	200000e5 	.word	0x200000e5

08000584 <WriteBuffer>:


static void WriteBuffer(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

    if(Requests[currReqIdx].currIndex < Requests[currReqIdx].length)
 8000588:	4b37      	ldr	r3, [pc, #220]	; (8000668 <WriteBuffer+0xe4>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	4a37      	ldr	r2, [pc, #220]	; (800066c <WriteBuffer+0xe8>)
 8000590:	460b      	mov	r3, r1
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	440b      	add	r3, r1
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4413      	add	r3, r2
 800059a:	330d      	adds	r3, #13
 800059c:	781a      	ldrb	r2, [r3, #0]
 800059e:	4b32      	ldr	r3, [pc, #200]	; (8000668 <WriteBuffer+0xe4>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	4931      	ldr	r1, [pc, #196]	; (800066c <WriteBuffer+0xe8>)
 80005a6:	4603      	mov	r3, r0
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4403      	add	r3, r0
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	440b      	add	r3, r1
 80005b0:	330c      	adds	r3, #12
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d23e      	bcs.n	8000636 <WriteBuffer+0xb2>
    {
        WriteData(Requests[currReqIdx].data[Requests[currReqIdx].currIndex]);
 80005b8:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <WriteBuffer+0xe4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	4a2b      	ldr	r2, [pc, #172]	; (800066c <WriteBuffer+0xe8>)
 80005c0:	460b      	mov	r3, r1
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	440b      	add	r3, r1
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	3308      	adds	r3, #8
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b26      	ldr	r3, [pc, #152]	; (8000668 <WriteBuffer+0xe4>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	4925      	ldr	r1, [pc, #148]	; (800066c <WriteBuffer+0xe8>)
 80005d6:	4603      	mov	r3, r0
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4403      	add	r3, r0
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	440b      	add	r3, r1
 80005e0:	330d      	adds	r3, #13
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff feb1 	bl	8000350 <WriteData>
        G_OperationLatchCount++;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <WriteBuffer+0xec>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <WriteBuffer+0xec>)
 80005f8:	701a      	strb	r2, [r3, #0]

        if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <WriteBuffer+0xec>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d130      	bne.n	8000664 <WriteBuffer+0xe0>
        {
            Requests[currReqIdx].currIndex++;
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <WriteBuffer+0xe4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	4918      	ldr	r1, [pc, #96]	; (800066c <WriteBuffer+0xe8>)
 800060a:	4613      	mov	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	440b      	add	r3, r1
 8000614:	330d      	adds	r3, #13
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b2d8      	uxtb	r0, r3
 800061c:	4913      	ldr	r1, [pc, #76]	; (800066c <WriteBuffer+0xe8>)
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	440b      	add	r3, r1
 8000628:	330d      	adds	r3, #13
 800062a:	4602      	mov	r2, r0
 800062c:	701a      	strb	r2, [r3, #0]
            G_OperationLatchCount = 0;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <WriteBuffer+0xec>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
    {
        Requests[currReqIdx].state = AVAILABLE;
        Requests[currReqIdx].type = NONE;

    }
}
 8000634:	e016      	b.n	8000664 <WriteBuffer+0xe0>
        Requests[currReqIdx].state = AVAILABLE;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <WriteBuffer+0xe4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <WriteBuffer+0xe8>)
 800063e:	460b      	mov	r3, r1
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	3301      	adds	r3, #1
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
        Requests[currReqIdx].type = NONE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <WriteBuffer+0xe4>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4619      	mov	r1, r3
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <WriteBuffer+0xe8>)
 8000656:	460b      	mov	r3, r1
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	440b      	add	r3, r1
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4413      	add	r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000e4 	.word	0x200000e4
 800066c:	20000080 	.word	0x20000080
 8000670:	200000e5 	.word	0x200000e5

08000674 <ClearScreen>:


static void ClearScreen(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <ClearScreen+0x58>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d11a      	bne.n	80006b6 <ClearScreen+0x42>
    {
        G_OperationLatchCount = 0;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <ClearScreen+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]

        Requests[currReqIdx].state = AVAILABLE;
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <ClearScreen+0x5c>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <ClearScreen+0x60>)
 800068e:	460b      	mov	r3, r1
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	440b      	add	r3, r1
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	4413      	add	r3, r2
 8000698:	3301      	adds	r3, #1
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
        Requests[currReqIdx].type = NONE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <ClearScreen+0x5c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <ClearScreen+0x60>)
 80006a6:	460b      	mov	r3, r1
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	440b      	add	r3, r1
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
    {
        WriteCommand(LCD_CLEAR_DISPLAY);
        G_OperationLatchCount++;
    }

}
 80006b4:	e008      	b.n	80006c8 <ClearScreen+0x54>
        WriteCommand(LCD_CLEAR_DISPLAY);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff fe30 	bl	800031c <WriteCommand>
        G_OperationLatchCount++;
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <ClearScreen+0x58>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b01      	ldr	r3, [pc, #4]	; (80006cc <ClearScreen+0x58>)
 80006c6:	701a      	strb	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200000e5 	.word	0x200000e5
 80006d0:	200000e4 	.word	0x200000e4
 80006d4:	20000080 	.word	0x20000080

080006d8 <SetCursorPos>:

static void SetCursorPos(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

    if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SetCursorPos+0xc8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d11a      	bne.n	800071a <SetCursorPos+0x42>
    {
        G_OperationLatchCount = 0;
 80006e4:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SetCursorPos+0xc8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]

        Requests[currReqIdx].state = AVAILABLE;
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SetCursorPos+0xcc>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4a2d      	ldr	r2, [pc, #180]	; (80007a8 <SetCursorPos+0xd0>)
 80006f2:	460b      	mov	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	3301      	adds	r3, #1
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
        Requests[currReqIdx].type = NONE;
 8000702:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <SetCursorPos+0xcc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4619      	mov	r1, r3
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <SetCursorPos+0xd0>)
 800070a:	460b      	mov	r3, r1
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	440b      	add	r3, r1
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]

        G_OperationLatchCount++;

    }

}
 8000718:	e040      	b.n	800079c <SetCursorPos+0xc4>
        if(Requests[currReqIdx].row == 0)
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SetCursorPos+0xcc>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SetCursorPos+0xd0>)
 8000722:	460b      	mov	r3, r1
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	330e      	adds	r3, #14
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d110      	bne.n	8000756 <SetCursorPos+0x7e>
            WriteCommand(LCD_SET_DDR_ADDRESS + Requests[currReqIdx].col);
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <SetCursorPos+0xcc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <SetCursorPos+0xd0>)
 800073c:	460b      	mov	r3, r1
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	440b      	add	r3, r1
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	330f      	adds	r3, #15
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	3b80      	subs	r3, #128	; 0x80
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fde4 	bl	800031c <WriteCommand>
 8000754:	e01c      	b.n	8000790 <SetCursorPos+0xb8>
        else if (Requests[currReqIdx].row == 1)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SetCursorPos+0xcc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4619      	mov	r1, r3
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <SetCursorPos+0xd0>)
 800075e:	460b      	mov	r3, r1
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	4413      	add	r3, r2
 8000768:	330e      	adds	r3, #14
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d10f      	bne.n	8000790 <SetCursorPos+0xb8>
            WriteCommand(LCD_SET_DDR_ADDRESS + (Requests[currReqIdx].col + 0x40) );
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <SetCursorPos+0xcc>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	4a0c      	ldr	r2, [pc, #48]	; (80007a8 <SetCursorPos+0xd0>)
 8000778:	460b      	mov	r3, r1
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	440b      	add	r3, r1
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	330f      	adds	r3, #15
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b40      	subs	r3, #64	; 0x40
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fdc6 	bl	800031c <WriteCommand>
        G_OperationLatchCount++;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <SetCursorPos+0xc8>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b01      	ldr	r3, [pc, #4]	; (80007a0 <SetCursorPos+0xc8>)
 800079a:	701a      	strb	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000e5 	.word	0x200000e5
 80007a4:	200000e4 	.word	0x200000e4
 80007a8:	20000080 	.word	0x20000080

080007ac <SendCommand>:

static void SendCommand(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    if(G_OperationLatchCount == LATCH_TARGET_COUNT)
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <SendCommand+0x70>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d11a      	bne.n	80007ee <SendCommand+0x42>
    {
        G_OperationLatchCount = 0;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <SendCommand+0x70>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]

        Requests[currReqIdx].state = AVAILABLE;
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <SendCommand+0x74>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4619      	mov	r1, r3
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <SendCommand+0x78>)
 80007c6:	460b      	mov	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	4413      	add	r3, r2
 80007d0:	3301      	adds	r3, #1
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
        Requests[currReqIdx].type = NONE;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <SendCommand+0x74>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4619      	mov	r1, r3
 80007dc:	4a11      	ldr	r2, [pc, #68]	; (8000824 <SendCommand+0x78>)
 80007de:	460b      	mov	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	440b      	add	r3, r1
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
    else
    {  
        WriteCommand(Requests[currReqIdx].command);
        G_OperationLatchCount++;
    }
}
 80007ec:	e013      	b.n	8000816 <SendCommand+0x6a>
        WriteCommand(Requests[currReqIdx].command);
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <SendCommand+0x74>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <SendCommand+0x78>)
 80007f6:	460b      	mov	r3, r1
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	440b      	add	r3, r1
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	3310      	adds	r3, #16
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fd89 	bl	800031c <WriteCommand>
        G_OperationLatchCount++;
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <SendCommand+0x70>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b02      	ldr	r3, [pc, #8]	; (800081c <SendCommand+0x70>)
 8000814:	701a      	strb	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000e5 	.word	0x200000e5
 8000820:	200000e4 	.word	0x200000e4
 8000824:	20000080 	.word	0x20000080

08000828 <OperationProcess>:


/* If the LCD finished Initialization and is in Operation mode */

static void OperationProcess(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    if(Requests[currReqIdx].state == BUSY)
 800082c:	4b3b      	ldr	r3, [pc, #236]	; (800091c <OperationProcess+0xf4>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	4a3b      	ldr	r2, [pc, #236]	; (8000920 <OperationProcess+0xf8>)
 8000834:	460b      	mov	r3, r1
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	440b      	add	r3, r1
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	3301      	adds	r3, #1
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d14a      	bne.n	80008dc <OperationProcess+0xb4>
    {
        if(Requests[currReqIdx].type == WRITE_STRING)
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <OperationProcess+0xf4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	4a34      	ldr	r2, [pc, #208]	; (8000920 <OperationProcess+0xf8>)
 800084e:	460b      	mov	r3, r1
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	440b      	add	r3, r1
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d102      	bne.n	8000864 <OperationProcess+0x3c>
        {
            WriteString();
 800085e:	f7ff fe17 	bl	8000490 <WriteString>
		if(Requests[currReqIdx].state == AVAILABLE)
		{
			currReqIdx = 0;
		}
    }
}
 8000862:	e058      	b.n	8000916 <OperationProcess+0xee>
        else if(Requests[currReqIdx].type == WRITE_BUFFER)
 8000864:	4b2d      	ldr	r3, [pc, #180]	; (800091c <OperationProcess+0xf4>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	4a2d      	ldr	r2, [pc, #180]	; (8000920 <OperationProcess+0xf8>)
 800086c:	460b      	mov	r3, r1
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	440b      	add	r3, r1
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d102      	bne.n	8000882 <OperationProcess+0x5a>
            WriteBuffer();
 800087c:	f7ff fe82 	bl	8000584 <WriteBuffer>
}
 8000880:	e049      	b.n	8000916 <OperationProcess+0xee>
        else if(Requests[currReqIdx].type == CLEAR_SCREEN)
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <OperationProcess+0xf4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4619      	mov	r1, r3
 8000888:	4a25      	ldr	r2, [pc, #148]	; (8000920 <OperationProcess+0xf8>)
 800088a:	460b      	mov	r3, r1
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d102      	bne.n	80008a0 <OperationProcess+0x78>
            ClearScreen();
 800089a:	f7ff feeb 	bl	8000674 <ClearScreen>
}
 800089e:	e03a      	b.n	8000916 <OperationProcess+0xee>
        else if(Requests[currReqIdx].type == SET_CURSOR_POS)
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <OperationProcess+0xf4>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <OperationProcess+0xf8>)
 80008a8:	460b      	mov	r3, r1
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d102      	bne.n	80008be <OperationProcess+0x96>
            SetCursorPos();
 80008b8:	f7ff ff0e 	bl	80006d8 <SetCursorPos>
}
 80008bc:	e02b      	b.n	8000916 <OperationProcess+0xee>
        else if(Requests[currReqIdx].type == SEND_COMMAND)
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <OperationProcess+0xf4>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	4619      	mov	r1, r3
 80008c4:	4a16      	ldr	r2, [pc, #88]	; (8000920 <OperationProcess+0xf8>)
 80008c6:	460b      	mov	r3, r1
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	440b      	add	r3, r1
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	d11f      	bne.n	8000916 <OperationProcess+0xee>
            SendCommand();
 80008d6:	f7ff ff69 	bl	80007ac <SendCommand>
}
 80008da:	e01c      	b.n	8000916 <OperationProcess+0xee>
		currReqIdx++;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <OperationProcess+0xf4>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <OperationProcess+0xf4>)
 80008e6:	701a      	strb	r2, [r3, #0]
		if(currReqIdx == REQUEST_BUFFER_SIZE)
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <OperationProcess+0xf4>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b05      	cmp	r3, #5
 80008ee:	d102      	bne.n	80008f6 <OperationProcess+0xce>
			currReqIdx = 0;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <OperationProcess+0xf4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
		if(Requests[currReqIdx].state == AVAILABLE)
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <OperationProcess+0xf4>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4619      	mov	r1, r3
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <OperationProcess+0xf8>)
 80008fe:	460b      	mov	r3, r1
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	440b      	add	r3, r1
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	3301      	adds	r3, #1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <OperationProcess+0xee>
			currReqIdx = 0;
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <OperationProcess+0xf4>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000e4 	.word	0x200000e4
 8000920:	20000080 	.word	0x20000080

08000924 <LCD_Update>:
/*                                 IMPLEMENTATION                           	*/
/* ============================================================================ */

/* The runnable of LCD */
void LCD_Update(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    if(G_LCDState == LCD_INIT)
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <LCD_Update+0x24>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d102      	bne.n	8000936 <LCD_Update+0x12>
    {
        InitProcess();
 8000930:	f7ff fd28 	bl	8000384 <InitProcess>
    }
    else
    {
        /* do nothing */
    }
}
 8000934:	e005      	b.n	8000942 <LCD_Update+0x1e>
    else if(G_LCDState == LCD_OPERATION)
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <LCD_Update+0x24>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d101      	bne.n	8000942 <LCD_Update+0x1e>
        OperationProcess();
 800093e:	f7ff ff73 	bl	8000828 <OperationProcess>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000007d 	.word	0x2000007d

0800094c <LCD_Init>:


LCD_ErrorStatus_t LCD_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
    LCD_ErrorStatus_t Ret_ErrorStatus = LCD_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	75bb      	strb	r3, [r7, #22]
    u8 iter;
    GPIO_Pin_t lcdPin;
    lcdPin.Mode = GPIO_MODE_OP_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
    lcdPin.AF = GPIO_AF_SYSTEM;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
    lcdPin.Speed = GPIO_SPEED_HIGH;
 800095e:	2302      	movs	r3, #2
 8000960:	60fb      	str	r3, [r7, #12]

    /* Initialize the LCD pins */
    for(iter = 0; iter < LCD_PINS_NUM; iter++)
 8000962:	2300      	movs	r3, #0
 8000964:	75fb      	strb	r3, [r7, #23]
 8000966:	e011      	b.n	800098c <LCD_Init+0x40>
    {
        lcdPin.Pin = LCD_Pins[iter].Pin;
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <LCD_Init+0x88>)
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	4413      	add	r3, r2
 8000970:	791b      	ldrb	r3, [r3, #4]
 8000972:	607b      	str	r3, [r7, #4]
        lcdPin.Port = LCD_Pins[iter].Port;
 8000974:	7dfb      	ldrb	r3, [r7, #23]
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <LCD_Init+0x88>)
 8000978:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800097c:	603b      	str	r3, [r7, #0]

        GPIO_Init(&lcdPin);
 800097e:	463b      	mov	r3, r7
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f9cf 	bl	8000d24 <GPIO_Init>
    for(iter = 0; iter < LCD_PINS_NUM; iter++)
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	3301      	adds	r3, #1
 800098a:	75fb      	strb	r3, [r7, #23]
 800098c:	7dfb      	ldrb	r3, [r7, #23]
 800098e:	2b07      	cmp	r3, #7
 8000990:	d9ea      	bls.n	8000968 <LCD_Init+0x1c>
    }

    lcdPin.Pin = LCD_PIN_RS;
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
    lcdPin.Port = LCD_PORT_RS;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <LCD_Init+0x8c>)
 8000998:	603b      	str	r3, [r7, #0]
    GPIO_Init(&lcdPin);
 800099a:	463b      	mov	r3, r7
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f9c1 	bl	8000d24 <GPIO_Init>

    lcdPin.Pin = LCD_PIN_RW;
 80009a2:	2301      	movs	r3, #1
 80009a4:	607b      	str	r3, [r7, #4]
    lcdPin.Port = LCD_PORT_RW;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <LCD_Init+0x8c>)
 80009a8:	603b      	str	r3, [r7, #0]
    GPIO_Init(&lcdPin);
 80009aa:	463b      	mov	r3, r7
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f9b9 	bl	8000d24 <GPIO_Init>

    lcdPin.Pin = LCD_PIN_E;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
    lcdPin.Port = LCD_PORT_E;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <LCD_Init+0x90>)
 80009b8:	603b      	str	r3, [r7, #0]
    GPIO_Init(&lcdPin);
 80009ba:	463b      	mov	r3, r7
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f9b1 	bl	8000d24 <GPIO_Init>


    /* Change LCD state from OFF to Init */
    G_LCDState = LCD_INIT;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <LCD_Init+0x94>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]

    return Ret_ErrorStatus;
 80009c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08001a30 	.word	0x08001a30
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400
 80009e0:	2000007d 	.word	0x2000007d

080009e4 <LCD_WriteStringAsync>:


LCD_ErrorStatus_t LCD_WriteStringAsync(const u8 * string)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    LCD_ErrorStatus_t Ret_ErrorStatus = LCD_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
    u8 iter;
    if(string == NULL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <LCD_WriteStringAsync+0x18>
    {
        Ret_ErrorStatus = LCD_NOK;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e03b      	b.n	8000a74 <LCD_WriteStringAsync+0x90>
    }
    else
    {
        for(iter = 0; iter < REQUEST_BUFFER_SIZE; iter++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	73bb      	strb	r3, [r7, #14]
 8000a00:	e035      	b.n	8000a6e <LCD_WriteStringAsync+0x8a>
        {
            if(Requests[iter].state == AVAILABLE)
 8000a02:	7bba      	ldrb	r2, [r7, #14]
 8000a04:	491f      	ldr	r1, [pc, #124]	; (8000a84 <LCD_WriteStringAsync+0xa0>)
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	440b      	add	r3, r1
 8000a10:	3301      	adds	r3, #1
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d127      	bne.n	8000a68 <LCD_WriteStringAsync+0x84>
            {
              Requests[iter].state = BUSY;
 8000a18:	7bba      	ldrb	r2, [r7, #14]
 8000a1a:	491a      	ldr	r1, [pc, #104]	; (8000a84 <LCD_WriteStringAsync+0xa0>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	440b      	add	r3, r1
 8000a26:	3301      	adds	r3, #1
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
              Requests[iter].type = WRITE_STRING;
 8000a2c:	7bba      	ldrb	r2, [r7, #14]
 8000a2e:	4915      	ldr	r1, [pc, #84]	; (8000a84 <LCD_WriteStringAsync+0xa0>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	440b      	add	r3, r1
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
              Requests[iter].data = string;
 8000a3e:	7bba      	ldrb	r2, [r7, #14]
 8000a40:	4910      	ldr	r1, [pc, #64]	; (8000a84 <LCD_WriteStringAsync+0xa0>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3308      	adds	r3, #8
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
              Requests[iter].currIndex = 0;
 8000a52:	7bba      	ldrb	r2, [r7, #14]
 8000a54:	490b      	ldr	r1, [pc, #44]	; (8000a84 <LCD_WriteStringAsync+0xa0>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	440b      	add	r3, r1
 8000a60:	330d      	adds	r3, #13
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
              break;
 8000a66:	e005      	b.n	8000a74 <LCD_WriteStringAsync+0x90>
        for(iter = 0; iter < REQUEST_BUFFER_SIZE; iter++)
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	73bb      	strb	r3, [r7, #14]
 8000a6e:	7bbb      	ldrb	r3, [r7, #14]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d9c6      	bls.n	8000a02 <LCD_WriteStringAsync+0x1e>
            }
        }
    }

    return Ret_ErrorStatus;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000080 	.word	0x20000080

08000a88 <LCD_SetCursorPosAsync>:
    return 0;
}


LCD_ErrorStatus_t LCD_SetCursorPosAsync(u8 row, u8 col)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
    u8 iter;

    for(iter = 0; iter < REQUEST_BUFFER_SIZE; iter++)
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e035      	b.n	8000b0a <LCD_SetCursorPosAsync+0x82>
    {
        if(Requests[iter].state == AVAILABLE)
 8000a9e:	7bfa      	ldrb	r2, [r7, #15]
 8000aa0:	491f      	ldr	r1, [pc, #124]	; (8000b20 <LCD_SetCursorPosAsync+0x98>)
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	440b      	add	r3, r1
 8000aac:	3301      	adds	r3, #1
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d127      	bne.n	8000b04 <LCD_SetCursorPosAsync+0x7c>
        {
            Requests[iter].state = BUSY;
 8000ab4:	7bfa      	ldrb	r2, [r7, #15]
 8000ab6:	491a      	ldr	r1, [pc, #104]	; (8000b20 <LCD_SetCursorPosAsync+0x98>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
            Requests[iter].type = SET_CURSOR_POS;
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	4915      	ldr	r1, [pc, #84]	; (8000b20 <LCD_SetCursorPosAsync+0x98>)
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	701a      	strb	r2, [r3, #0]

            Requests[iter].row = row;
 8000ada:	7bfa      	ldrb	r2, [r7, #15]
 8000adc:	4910      	ldr	r1, [pc, #64]	; (8000b20 <LCD_SetCursorPosAsync+0x98>)
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	330e      	adds	r3, #14
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	701a      	strb	r2, [r3, #0]
            Requests[iter].col = col;
 8000aee:	7bfa      	ldrb	r2, [r7, #15]
 8000af0:	490b      	ldr	r1, [pc, #44]	; (8000b20 <LCD_SetCursorPosAsync+0x98>)
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	330f      	adds	r3, #15
 8000afe:	79ba      	ldrb	r2, [r7, #6]
 8000b00:	701a      	strb	r2, [r3, #0]

            break;
 8000b02:	e005      	b.n	8000b10 <LCD_SetCursorPosAsync+0x88>
    for(iter = 0; iter < REQUEST_BUFFER_SIZE; iter++)
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	3301      	adds	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d9c6      	bls.n	8000a9e <LCD_SetCursorPosAsync+0x16>
        }
    }

    return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000080 	.word	0x20000080

08000b24 <LCD_SendCommandAsync>:


LCD_ErrorStatus_t LCD_SendCommandAsync(u8 command)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
     u8 iter;

    for(iter = 0; iter < REQUEST_BUFFER_SIZE; iter++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e02b      	b.n	8000b8c <LCD_SendCommandAsync+0x68>
    {
        if(Requests[iter].state == AVAILABLE)
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	491a      	ldr	r1, [pc, #104]	; (8000ba0 <LCD_SendCommandAsync+0x7c>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	440b      	add	r3, r1
 8000b42:	3301      	adds	r3, #1
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d11d      	bne.n	8000b86 <LCD_SendCommandAsync+0x62>
        {
            Requests[iter].state = BUSY;
 8000b4a:	7bfa      	ldrb	r2, [r7, #15]
 8000b4c:	4914      	ldr	r1, [pc, #80]	; (8000ba0 <LCD_SendCommandAsync+0x7c>)
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	440b      	add	r3, r1
 8000b58:	3301      	adds	r3, #1
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
            Requests[iter].type = SEND_COMMAND;
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	490f      	ldr	r1, [pc, #60]	; (8000ba0 <LCD_SendCommandAsync+0x7c>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	701a      	strb	r2, [r3, #0]
            Requests[iter].command = command;
 8000b70:	7bfa      	ldrb	r2, [r7, #15]
 8000b72:	490b      	ldr	r1, [pc, #44]	; (8000ba0 <LCD_SendCommandAsync+0x7c>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3310      	adds	r3, #16
 8000b80:	79fa      	ldrb	r2, [r7, #7]
 8000b82:	701a      	strb	r2, [r3, #0]
            break;
 8000b84:	e005      	b.n	8000b92 <LCD_SendCommandAsync+0x6e>
    for(iter = 0; iter < REQUEST_BUFFER_SIZE; iter++)
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	d9d0      	bls.n	8000b34 <LCD_SendCommandAsync+0x10>
        }
    }
 8000b92:	bf00      	nop
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	20000080 	.word	0x20000080

08000ba4 <LED_Init>:
/* ============================================================================ */
/*                                  IMPLEMENTATION                           	*/
/* ============================================================================ */

LED_ErrorStatus_t LED_Init(void)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
    LED_ErrorStatus_t Ret_ErrorStatus = LED_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	75fb      	strb	r3, [r7, #23]
    GPIO_Pin_t Local_Led;
    u8 Local_iter;
    Local_Led.Mode = GPIO_MODE_OP_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
    Local_Led.Speed = GPIO_SPEED_HIGH;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
    Local_Led.AF = GPIO_AF_SYSTEM;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]

    for(Local_iter = 0; Local_iter < _LED_NUM; Local_iter++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	75bb      	strb	r3, [r7, #22]
 8000bbe:	e060      	b.n	8000c82 <LED_Init+0xde>
    {
        if(!IS_LED_STATE(Leds[Local_iter].InitState))
 8000bc0:	7dba      	ldrb	r2, [r7, #22]
 8000bc2:	4935      	ldr	r1, [pc, #212]	; (8000c98 <LED_Init+0xf4>)
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	3309      	adds	r3, #9
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d00d      	beq.n	8000bf2 <LED_Init+0x4e>
 8000bd6:	7dba      	ldrb	r2, [r7, #22]
 8000bd8:	492f      	ldr	r1, [pc, #188]	; (8000c98 <LED_Init+0xf4>)
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	3309      	adds	r3, #9
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <LED_Init+0x4e>
        {
            Ret_ErrorStatus = LED_INVALID_STATE;
 8000bec:	2302      	movs	r3, #2
 8000bee:	75fb      	strb	r3, [r7, #23]
 8000bf0:	e041      	b.n	8000c76 <LED_Init+0xd2>
        }
        else
        {
            Local_Led.Port = Leds[Local_iter].Port;
 8000bf2:	7dba      	ldrb	r2, [r7, #22]
 8000bf4:	4928      	ldr	r1, [pc, #160]	; (8000c98 <LED_Init+0xf4>)
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	603b      	str	r3, [r7, #0]
            Local_Led.Pin = Leds[Local_iter].Pin;
 8000c04:	7dba      	ldrb	r2, [r7, #22]
 8000c06:	4924      	ldr	r1, [pc, #144]	; (8000c98 <LED_Init+0xf4>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	3304      	adds	r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	607b      	str	r3, [r7, #4]
            Ret_ErrorStatus = GPIO_Init(&Local_Led);
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f882 	bl	8000d24 <GPIO_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	75fb      	strb	r3, [r7, #23]
            GPIO_SetPinState(Leds[Local_iter].Port, Leds[Local_iter].Pin, Leds[Local_iter].InitState ^ Leds[Local_iter].Connection);
 8000c24:	7dba      	ldrb	r2, [r7, #22]
 8000c26:	491c      	ldr	r1, [pc, #112]	; (8000c98 <LED_Init+0xf4>)
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	440b      	add	r3, r1
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	7dba      	ldrb	r2, [r7, #22]
 8000c36:	4918      	ldr	r1, [pc, #96]	; (8000c98 <LED_Init+0xf4>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	440b      	add	r3, r1
 8000c42:	3304      	adds	r3, #4
 8000c44:	681c      	ldr	r4, [r3, #0]
 8000c46:	7dba      	ldrb	r2, [r7, #22]
 8000c48:	4913      	ldr	r1, [pc, #76]	; (8000c98 <LED_Init+0xf4>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3309      	adds	r3, #9
 8000c56:	7819      	ldrb	r1, [r3, #0]
 8000c58:	7dba      	ldrb	r2, [r7, #22]
 8000c5a:	4d0f      	ldr	r5, [pc, #60]	; (8000c98 <LED_Init+0xf4>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	442b      	add	r3, r5
 8000c66:	3308      	adds	r3, #8
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	404b      	eors	r3, r1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4621      	mov	r1, r4
 8000c72:	f000 f9f9 	bl	8001068 <GPIO_SetPinState>
        }

        if(Ret_ErrorStatus != LED_OK)
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d106      	bne.n	8000c8a <LED_Init+0xe6>
    for(Local_iter = 0; Local_iter < _LED_NUM; Local_iter++)
 8000c7c:	7dbb      	ldrb	r3, [r7, #22]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	75bb      	strb	r3, [r7, #22]
 8000c82:	7dbb      	ldrb	r3, [r7, #22]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d09b      	beq.n	8000bc0 <LED_Init+0x1c>
 8000c88:	e000      	b.n	8000c8c <LED_Init+0xe8>
        {
            break;
 8000c8a:	bf00      	nop
        }
    }

    return Ret_ErrorStatus;
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bdb0      	pop	{r4, r5, r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08001a70 	.word	0x08001a70

08000c9c <LED_SetState>:


LED_ErrorStatus_t LED_SetState(LED_ID_t Copy_LedID, u8 Copy_State)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
    LED_ErrorStatus_t Ret_ErrorStatus = LED_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

    if(Copy_LedID >= _LED_NUM)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <LED_SetState+0x20>
    {
        Ret_ErrorStatus = LED_INVALID_ID;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	e007      	b.n	8000ccc <LED_SetState+0x30>
    }
    else if(!IS_LED_STATE(Copy_State))
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d004      	beq.n	8000ccc <LED_SetState+0x30>
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <LED_SetState+0x30>
    {
        Ret_ErrorStatus = LED_INVALID_STATE;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	73fb      	strb	r3, [r7, #15]
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == LED_OK)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d121      	bne.n	8000d16 <LED_SetState+0x7a>
    {
        Ret_ErrorStatus = GPIO_SetPinState(Leds[Copy_LedID].Port, Leds[Copy_LedID].Pin, Copy_State ^ Leds[Copy_LedID].Connection);
 8000cd2:	79fa      	ldrb	r2, [r7, #7]
 8000cd4:	4912      	ldr	r1, [pc, #72]	; (8000d20 <LED_SetState+0x84>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	440b      	add	r3, r1
 8000ce0:	6818      	ldr	r0, [r3, #0]
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	490e      	ldr	r1, [pc, #56]	; (8000d20 <LED_SetState+0x84>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LED_SetState+0x84>)
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4423      	add	r3, r4
 8000d02:	3308      	adds	r3, #8
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	79bb      	ldrb	r3, [r7, #6]
 8000d08:	4053      	eors	r3, r2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f000 f9ab 	bl	8001068 <GPIO_SetPinState>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]
    }

    return Ret_ErrorStatus;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	08001a70 	.word	0x08001a70

08000d24 <GPIO_Init>:
/* ========================================================================================= */
/*                                      IMPLEMENTATION                                       */
/* ========================================================================================= */

GPIO_ErrorStatus_t GPIO_Init(GPIO_Pin_t* ADD_Config)
{
 8000d24:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d28:	b08c      	sub	sp, #48	; 0x30
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	61f8      	str	r0, [r7, #28]
    GPIO_ErrorStatus_t Ret_ErrorStatus = GPIO_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    u32 Local_TmpReg;
    u64 Local_AFTmpReg; /* AFH and AFL are treated as one 64bit Register */

    if(ADD_Config == NULL)
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d103      	bne.n	8000d42 <GPIO_Init+0x1e>
    {
        Ret_ErrorStatus = GPIO_NULLPTR;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d40:	e0af      	b.n	8000ea2 <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_PORT(ADD_Config->Port))
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a38      	ldr	r2, [pc, #224]	; (8000e28 <GPIO_Init+0x104>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d00d      	beq.n	8000d68 <GPIO_Init+0x44>
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a36      	ldr	r2, [pc, #216]	; (8000e2c <GPIO_Init+0x108>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d008      	beq.n	8000d68 <GPIO_Init+0x44>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a35      	ldr	r2, [pc, #212]	; (8000e30 <GPIO_Init+0x10c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d003      	beq.n	8000d68 <GPIO_Init+0x44>
    {
        Ret_ErrorStatus = GPIO_INVALID_PORT;
 8000d60:	2305      	movs	r3, #5
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d66:	e09c      	b.n	8000ea2 <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_PIN(ADD_Config->Pin))
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d903      	bls.n	8000d78 <GPIO_Init+0x54>
    {
        Ret_ErrorStatus = GPIO_INVALID_PIN;
 8000d70:	2306      	movs	r3, #6
 8000d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d76:	e094      	b.n	8000ea2 <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_MODE(ADD_Config->Mode))
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d04b      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d047      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d043      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b10      	cmp	r3, #16
 8000d96:	d03f      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d03b      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d037      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	2b09      	cmp	r3, #9
 8000dae:	d033      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b11      	cmp	r3, #17
 8000db6:	d02f      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d02b      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b0d      	cmp	r3, #13
 8000dc6:	d027      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b15      	cmp	r3, #21
 8000dce:	d023      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d01f      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d01b      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b0a      	cmp	r3, #10
 8000de6:	d017      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b12      	cmp	r3, #18
 8000dee:	d013      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b06      	cmp	r3, #6
 8000df6:	d00f      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b0e      	cmp	r3, #14
 8000dfe:	d00b      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	2b16      	cmp	r3, #22
 8000e06:	d007      	beq.n	8000e18 <GPIO_Init+0xf4>
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d003      	beq.n	8000e18 <GPIO_Init+0xf4>
    {
        Ret_ErrorStatus = GPIO_INVALID_MODE;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e16:	e044      	b.n	8000ea2 <GPIO_Init+0x17e>
    }
    else if(!IS_GPIO_SPEED(ADD_Config->Speed))
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d909      	bls.n	8000e34 <GPIO_Init+0x110>
    {
        Ret_ErrorStatus = GPIO_INVALID_SPEED;
 8000e20:	2307      	movs	r3, #7
 8000e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e26:	e03c      	b.n	8000ea2 <GPIO_Init+0x17e>
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020800 	.word	0x40020800
    }
    else if(!IS_GPIO_AF(ADD_Config->AF))
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d032      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d02e      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d02a      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d026      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d022      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	d01e      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	2b06      	cmp	r3, #6
 8000e6a:	d01a      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	2b07      	cmp	r3, #7
 8000e72:	d016      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d012      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	2b09      	cmp	r3, #9
 8000e82:	d00e      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	2b0a      	cmp	r3, #10
 8000e8a:	d00a      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	2b0c      	cmp	r3, #12
 8000e92:	d006      	beq.n	8000ea2 <GPIO_Init+0x17e>
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d002      	beq.n	8000ea2 <GPIO_Init+0x17e>
    {
        Ret_ErrorStatus = GPIO_INVALID_AF;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == GPIO_OK)
 8000ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 80d5 	bne.w	8001056 <GPIO_Init+0x332>
    {
        /* Set the Pin Mode (Input, Output, AF, Analog)*/
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->MODER;
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( GPIO_2_BIT_MASK << (ADD_Config->Pin * GPIO_PIN_OFFSET_2)) ;
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	2203      	movs	r2, #3
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( (ADD_Config->Mode & GPIO_MODE_MASK) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f003 0203 	and.w	r2, r3, #3
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->MODER = Local_TmpReg;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Set the Pin output type (Push Pull or Open Drain)*/
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->OTYPER;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~ ( 1 << (ADD_Config->Pin) );
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	4013      	ands	r3, r2
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( ((ADD_Config->Mode & GPIO_OTYPE_MASK) >> GPIO_OTYPE_POS_IN_MODE) << (ADD_Config->Pin) );
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	f003 0201 	and.w	r2, r3, #1
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->OTYPER = Local_TmpReg;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f24:	605a      	str	r2, [r3, #4]

        /* Set pin pullup/pulldown/floating */
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->PUPDR;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( (GPIO_2_BIT_MASK)<< (ADD_Config->Pin*GPIO_PIN_OFFSET_2) );
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f40:	4013      	ands	r3, r2
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( ((ADD_Config->Mode & GPIO_PUPD_MASK) >> GPIO_PUPD_POS_IN_MODE) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	08db      	lsrs	r3, r3, #3
 8000f4a:	f003 0203 	and.w	r2, r3, #3
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->PUPDR = Local_TmpReg;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f64:	60da      	str	r2, [r3, #12]

        /* Set Pin speed */
        Local_TmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->OSPEEDR;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg &= ~( (GPIO_2_BIT_MASK)<< (ADD_Config->Pin*GPIO_PIN_OFFSET_2) );
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	4013      	ands	r3, r2
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
        Local_TmpReg |= ( (ADD_Config->Speed) << (ADD_Config->Pin * GPIO_PIN_OFFSET_2) );
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f94:	4313      	orrs	r3, r2
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
        ((GPIO_Registers_t *)(ADD_Config->Port))->OSPEEDR = Local_TmpReg;
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f9e:	609a      	str	r2, [r3, #8]


        /* Set AF */
        Local_AFTmpReg = ((GPIO_Registers_t *)(ADD_Config->Port))->AFR;
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000fa8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        Local_AFTmpReg &= ~( ((u64)GPIO_4_BIT_MASK) << (ADD_Config->Pin*GPIO_PIN_OFFSET_4) );
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	009c      	lsls	r4, r3, #2
 8000fb2:	f04f 020f 	mov.w	r2, #15
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	f1a4 0120 	sub.w	r1, r4, #32
 8000fbe:	f1c4 0020 	rsb	r0, r4, #32
 8000fc2:	fa03 fb04 	lsl.w	fp, r3, r4
 8000fc6:	fa02 f101 	lsl.w	r1, r2, r1
 8000fca:	ea4b 0b01 	orr.w	fp, fp, r1
 8000fce:	fa22 f000 	lsr.w	r0, r2, r0
 8000fd2:	ea4b 0b00 	orr.w	fp, fp, r0
 8000fd6:	fa02 fa04 	lsl.w	sl, r2, r4
 8000fda:	ea6f 030a 	mvn.w	r3, sl
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	ea6f 030b 	mvn.w	r3, fp
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000fee:	4651      	mov	r1, sl
 8000ff0:	4011      	ands	r1, r2
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	4659      	mov	r1, fp
 8000ff6:	4019      	ands	r1, r3
 8000ff8:	60f9      	str	r1, [r7, #12]
 8000ffa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ffe:	e9c7 3408 	strd	r3, r4, [r7, #32]
        Local_AFTmpReg |= ( ((u64)ADD_Config->AF) << (ADD_Config->Pin*GPIO_PIN_OFFSET_4) );
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	2200      	movs	r2, #0
 8001008:	461d      	mov	r5, r3
 800100a:	4616      	mov	r6, r2
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	f1a3 0120 	sub.w	r1, r3, #32
 8001016:	f1c3 0220 	rsb	r2, r3, #32
 800101a:	fa06 f903 	lsl.w	r9, r6, r3
 800101e:	fa05 f101 	lsl.w	r1, r5, r1
 8001022:	ea49 0901 	orr.w	r9, r9, r1
 8001026:	fa25 f202 	lsr.w	r2, r5, r2
 800102a:	ea49 0902 	orr.w	r9, r9, r2
 800102e:	fa05 f803 	lsl.w	r8, r5, r3
 8001032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001036:	ea42 0108 	orr.w	r1, r2, r8
 800103a:	6039      	str	r1, [r7, #0]
 800103c:	ea43 0309 	orr.w	r3, r3, r9
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001046:	e9c7 3408 	strd	r3, r4, [r7, #32]
        ((GPIO_Registers_t *)(ADD_Config->Port))->AFR = Local_AFTmpReg;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	6819      	ldr	r1, [r3, #0]
 800104e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001052:	e9c1 2308 	strd	r2, r3, [r1, #32]
    //		((GPIO_Registers_t *)(ADD_Config->Port))->AFRH = Local_TmpReg;
    //    }

    }

    return Ret_ErrorStatus;
 8001056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800105a:	4618      	mov	r0, r3
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <GPIO_SetPinState>:


GPIO_ErrorStatus_t GPIO_SetPinState(void * Copy_Port, u32 Copy_Pin, u8 Copy_State)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	71fb      	strb	r3, [r7, #7]
    GPIO_ErrorStatus_t Ret_ErrorStatus = GPIO_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]
    
    if(!IS_GPIO_PORT(Copy_Port))
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <GPIO_SetPinState+0x94>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00a      	beq.n	8001098 <GPIO_SetPinState+0x30>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <GPIO_SetPinState+0x98>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d006      	beq.n	8001098 <GPIO_SetPinState+0x30>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <GPIO_SetPinState+0x9c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d002      	beq.n	8001098 <GPIO_SetPinState+0x30>
    {
        Ret_ErrorStatus = GPIO_INVALID_PORT;
 8001092:	2305      	movs	r3, #5
 8001094:	75fb      	strb	r3, [r7, #23]
 8001096:	e00d      	b.n	80010b4 <GPIO_SetPinState+0x4c>
    }
    else if(!IS_GPIO_PIN(Copy_Pin))
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	d902      	bls.n	80010a4 <GPIO_SetPinState+0x3c>
    {
        Ret_ErrorStatus = GPIO_INVALID_PIN;
 800109e:	2306      	movs	r3, #6
 80010a0:	75fb      	strb	r3, [r7, #23]
 80010a2:	e007      	b.n	80010b4 <GPIO_SetPinState+0x4c>
    }
    else if(!IS_GPIO_STATE(Copy_State))
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d004      	beq.n	80010b4 <GPIO_SetPinState+0x4c>
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <GPIO_SetPinState+0x4c>
    {
        Ret_ErrorStatus = GPIO_INVALID_STATE;
 80010b0:	2308      	movs	r3, #8
 80010b2:	75fb      	strb	r3, [r7, #23]
    else
    {
        /* do nothing */
    }

    if(Ret_ErrorStatus == GPIO_OK)
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d118      	bne.n	80010ec <GPIO_SetPinState+0x84>
    {
        switch(Copy_State)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <GPIO_SetPinState+0x5e>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d009      	beq.n	80010d8 <GPIO_SetPinState+0x70>
 80010c4:	e010      	b.n	80010e8 <GPIO_SetPinState+0x80>
        {
            case GPIO_STATE_LOW:
                ((GPIO_Registers_t *)Copy_Port)->BSRR = ( 1<< (Copy_Pin+GPIO_BSRR_RESET_OFFSET) );
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	3310      	adds	r3, #16
 80010ca:	2201      	movs	r2, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	619a      	str	r2, [r3, #24]
                break;
 80010d6:	e009      	b.n	80010ec <GPIO_SetPinState+0x84>

            case GPIO_STATE_HIGH:
                ((GPIO_Registers_t *)Copy_Port)->BSRR = (1<< Copy_Pin);
 80010d8:	2201      	movs	r2, #1
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	619a      	str	r2, [r3, #24]
                break;
 80010e6:	e001      	b.n	80010ec <GPIO_SetPinState+0x84>

            default:
                Ret_ErrorStatus = GPIO_NOK;
 80010e8:	2301      	movs	r3, #1
 80010ea:	75fb      	strb	r3, [r7, #23]
        }
    }
    

    return Ret_ErrorStatus;
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020400 	.word	0x40020400
 8001104:	40020800 	.word	0x40020800

08001108 <RCC_EnableClk>:
    RCC_LPWRRSTF = 31,

}RCC_CSR_Bits_t;

RCC_ErrorStatus_t RCC_EnableClk(u8 Copy_Clk)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
    u16 Local_Timeout = RCC_TIMEOUT_PERIOD;
 8001116:	f44f 7316 	mov.w	r3, #600	; 0x258
 800111a:	81bb      	strh	r3, [r7, #12]
    switch(Copy_Clk)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b05      	cmp	r3, #5
 8001120:	f200 8088 	bhi.w	8001234 <RCC_EnableClk+0x12c>
 8001124:	a201      	add	r2, pc, #4	; (adr r2, 800112c <RCC_EnableClk+0x24>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	08001145 	.word	0x08001145
 8001130:	0800116d 	.word	0x0800116d
 8001134:	08001195 	.word	0x08001195
 8001138:	080011bd 	.word	0x080011bd
 800113c:	080011e5 	.word	0x080011e5
 8001140:	0800120d 	.word	0x0800120d
    {
        case RCC_CLK_HSI:
            RCC->CR |= (1<<RCC_HSION);
 8001144:	4b46      	ldr	r3, [pc, #280]	; (8001260 <RCC_EnableClk+0x158>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a45      	ldr	r2, [pc, #276]	; (8001260 <RCC_EnableClk+0x158>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( (((RCC->CR >> RCC_HSIRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 8001150:	e002      	b.n	8001158 <RCC_EnableClk+0x50>
 8001152:	89bb      	ldrh	r3, [r7, #12]
 8001154:	3b01      	subs	r3, #1
 8001156:	81bb      	strh	r3, [r7, #12]
 8001158:	4b41      	ldr	r3, [pc, #260]	; (8001260 <RCC_EnableClk+0x158>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d16a      	bne.n	800123a <RCC_EnableClk+0x132>
 8001164:	89bb      	ldrh	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f3      	beq.n	8001152 <RCC_EnableClk+0x4a>
            break;
 800116a:	e066      	b.n	800123a <RCC_EnableClk+0x132>

        case RCC_CLK_HSE:
            RCC->CR |= (1<<RCC_HSEON);
 800116c:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <RCC_EnableClk+0x158>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a3b      	ldr	r2, [pc, #236]	; (8001260 <RCC_EnableClk+0x158>)
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( (((RCC->CR >> RCC_HSERDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 8001178:	e002      	b.n	8001180 <RCC_EnableClk+0x78>
 800117a:	89bb      	ldrh	r3, [r7, #12]
 800117c:	3b01      	subs	r3, #1
 800117e:	81bb      	strh	r3, [r7, #12]
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <RCC_EnableClk+0x158>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d158      	bne.n	800123e <RCC_EnableClk+0x136>
 800118c:	89bb      	ldrh	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f3      	beq.n	800117a <RCC_EnableClk+0x72>
            break;
 8001192:	e054      	b.n	800123e <RCC_EnableClk+0x136>

        case RCC_CLK_PLL:
            RCC->CR |= (1<<RCC_PLLON);
 8001194:	4b32      	ldr	r3, [pc, #200]	; (8001260 <RCC_EnableClk+0x158>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a31      	ldr	r2, [pc, #196]	; (8001260 <RCC_EnableClk+0x158>)
 800119a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800119e:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( (((RCC->CR >> RCC_PLLRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 80011a0:	e002      	b.n	80011a8 <RCC_EnableClk+0xa0>
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	81bb      	strh	r3, [r7, #12]
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <RCC_EnableClk+0x158>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d146      	bne.n	8001242 <RCC_EnableClk+0x13a>
 80011b4:	89bb      	ldrh	r3, [r7, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f3      	beq.n	80011a2 <RCC_EnableClk+0x9a>
            break;
 80011ba:	e042      	b.n	8001242 <RCC_EnableClk+0x13a>

        case RCC_CLK_PLL2:
            RCC->CR |= (1<<RCC_PLLI2SON);
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <RCC_EnableClk+0x158>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <RCC_EnableClk+0x158>)
 80011c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011c6:	6013      	str	r3, [r2, #0]
            /* Wait till Ready */
            while( (((RCC->CR >> RCC_PLLI2SRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 80011c8:	e002      	b.n	80011d0 <RCC_EnableClk+0xc8>
 80011ca:	89bb      	ldrh	r3, [r7, #12]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	81bb      	strh	r3, [r7, #12]
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <RCC_EnableClk+0x158>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d134      	bne.n	8001246 <RCC_EnableClk+0x13e>
 80011dc:	89bb      	ldrh	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f3      	beq.n	80011ca <RCC_EnableClk+0xc2>
            break;
 80011e2:	e030      	b.n	8001246 <RCC_EnableClk+0x13e>

        case RCC_CLK_LSE:
            RCC->BDCR |= (1<<RCC_LSEON);
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <RCC_EnableClk+0x158>)
 80011e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e8:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <RCC_EnableClk+0x158>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6713      	str	r3, [r2, #112]	; 0x70
            /* Wait till Ready */
            while( (((RCC->BDCR >> RCC_LSERDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 80011f0:	e002      	b.n	80011f8 <RCC_EnableClk+0xf0>
 80011f2:	89bb      	ldrh	r3, [r7, #12]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	81bb      	strh	r3, [r7, #12]
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <RCC_EnableClk+0x158>)
 80011fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d122      	bne.n	800124a <RCC_EnableClk+0x142>
 8001204:	89bb      	ldrh	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f3      	beq.n	80011f2 <RCC_EnableClk+0xea>
            break;
 800120a:	e01e      	b.n	800124a <RCC_EnableClk+0x142>

        case RCC_CLK_LSI:
            RCC->CSR |= (1<<RCC_LSION);
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <RCC_EnableClk+0x158>)
 800120e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <RCC_EnableClk+0x158>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6753      	str	r3, [r2, #116]	; 0x74
            /* Wait till Ready */
            while( (((RCC->CSR >> RCC_LSIRDY) & 1) == 0) && (!Local_Timeout) ){Local_Timeout--;}
 8001218:	e002      	b.n	8001220 <RCC_EnableClk+0x118>
 800121a:	89bb      	ldrh	r3, [r7, #12]
 800121c:	3b01      	subs	r3, #1
 800121e:	81bb      	strh	r3, [r7, #12]
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <RCC_EnableClk+0x158>)
 8001222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d110      	bne.n	800124e <RCC_EnableClk+0x146>
 800122c:	89bb      	ldrh	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f3      	beq.n	800121a <RCC_EnableClk+0x112>
            break;
 8001232:	e00c      	b.n	800124e <RCC_EnableClk+0x146>

        default:
            Ret_ErrorStatus = RCC_NOK;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e00a      	b.n	8001250 <RCC_EnableClk+0x148>
            break;
 800123a:	bf00      	nop
 800123c:	e008      	b.n	8001250 <RCC_EnableClk+0x148>
            break;
 800123e:	bf00      	nop
 8001240:	e006      	b.n	8001250 <RCC_EnableClk+0x148>
            break;
 8001242:	bf00      	nop
 8001244:	e004      	b.n	8001250 <RCC_EnableClk+0x148>
            break;
 8001246:	bf00      	nop
 8001248:	e002      	b.n	8001250 <RCC_EnableClk+0x148>
            break;
 800124a:	bf00      	nop
 800124c:	e000      	b.n	8001250 <RCC_EnableClk+0x148>
            break;
 800124e:	bf00      	nop
    }


    return Ret_ErrorStatus;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800

08001264 <RCC_SetSystemClk>:




RCC_ErrorStatus_t RCC_SetSystemClk(u8 Copy_SystemClk)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
    u32 Local_TmpReg;

    if(
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <RCC_SetSystemClk+0x20>
        ( (Copy_SystemClk == RCC_SYSCLK_HSI) && !( (RCC->CR >> RCC_HSION) & 1 ) )
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <RCC_SetSystemClk+0x74>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d011      	beq.n	80012a8 <RCC_SetSystemClk+0x44>
        ||
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d105      	bne.n	8001296 <RCC_SetSystemClk+0x32>
        ( (Copy_SystemClk == RCC_SYSCLK_HSE) && !( (RCC->CR >> RCC_HSEON) & 1 ) )
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <RCC_SetSystemClk+0x74>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d008      	beq.n	80012a8 <RCC_SetSystemClk+0x44>
        ||
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d108      	bne.n	80012ae <RCC_SetSystemClk+0x4a>
        ( (Copy_SystemClk == RCC_SYSCLK_PLL) && !( (RCC->CR >> RCC_PLLON) & 1 ) )
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <RCC_SetSystemClk+0x74>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <RCC_SetSystemClk+0x4a>
                                                                                )

    {
        Ret_ErrorStatus = RCC_NOK;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e00d      	b.n	80012ca <RCC_SetSystemClk+0x66>
    }
    else
    {
        Local_TmpReg = RCC->CFGR;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <RCC_SetSystemClk+0x74>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	60bb      	str	r3, [r7, #8]
        Local_TmpReg &= (~RCC_SYSCLK_MASK);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	60bb      	str	r3, [r7, #8]
        Local_TmpReg |= Copy_SystemClk;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
        RCC->CFGR = Local_TmpReg;
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <RCC_SetSystemClk+0x74>)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	6093      	str	r3, [r2, #8]

    }

    return Ret_ErrorStatus;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023800 	.word	0x40023800

080012dc <RCC_EnablePeripheral>:
    return Ret_ErrorStatus;
}


RCC_ErrorStatus_t RCC_EnablePeripheral(RCC_Peripheral_t Copy_Peripheral)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	e9c7 0100 	strd	r0, r1, [r7]
    u32 Local_PeripheralCode = ((u32*)&Copy_Peripheral)[1];         /* Code part of the peripheral enum */      
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60bb      	str	r3, [r7, #8]
    RCC_ErrorStatus_t Ret_ErrorStatus = RCC_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]

    /* Check for the Peripherals enums Specific code to make sure
     * that the recived argument is only a Peripheral enum */
    if(Local_PeripheralCode != 3)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d002      	beq.n	80012fa <RCC_EnablePeripheral+0x1e>
    {
        Ret_ErrorStatus = RCC_NOK;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e046      	b.n	8001388 <RCC_EnablePeripheral+0xac>
    }
    else
    {
        if((u32)Copy_Peripheral < 32)        /* AHB1 REG peripherals */
 80012fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fe:	4613      	mov	r3, r2
 8001300:	2b1f      	cmp	r3, #31
 8001302:	d809      	bhi.n	8001318 <RCC_EnablePeripheral+0x3c>
        {
            RCC->AHB1ENR |= (1<<(u32)Copy_Peripheral);
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <RCC_EnablePeripheral+0xbc>)
 8001306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800130c:	2301      	movs	r3, #1
 800130e:	4093      	lsls	r3, r2
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <RCC_EnablePeripheral+0xbc>)
 8001312:	430b      	orrs	r3, r1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	e037      	b.n	8001388 <RCC_EnablePeripheral+0xac>
        }
        else if((u32)Copy_Peripheral < 64)   /* AHB2 REG peripherals */
 8001318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800131c:	4613      	mov	r3, r2
 800131e:	2b3f      	cmp	r3, #63	; 0x3f
 8001320:	d80c      	bhi.n	800133c <RCC_EnablePeripheral+0x60>
        {
            RCC->AHB2ENR |= (1<< ((u32)Copy_Peripheral - 32) );
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <RCC_EnablePeripheral+0xbc>)
 8001324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800132a:	4613      	mov	r3, r2
 800132c:	3b20      	subs	r3, #32
 800132e:	2201      	movs	r2, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	4a18      	ldr	r2, [pc, #96]	; (8001398 <RCC_EnablePeripheral+0xbc>)
 8001336:	430b      	orrs	r3, r1
 8001338:	6353      	str	r3, [r2, #52]	; 0x34
 800133a:	e025      	b.n	8001388 <RCC_EnablePeripheral+0xac>
        }
        else if((u32)Copy_Peripheral < 96)   /* APB1 REG peripherals */
 800133c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001340:	4613      	mov	r3, r2
 8001342:	2b5f      	cmp	r3, #95	; 0x5f
 8001344:	d80c      	bhi.n	8001360 <RCC_EnablePeripheral+0x84>
        {
            RCC->APB1ENR |= (1<< ((u32)Copy_Peripheral - 64) );
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <RCC_EnablePeripheral+0xbc>)
 8001348:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800134a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800134e:	4613      	mov	r3, r2
 8001350:	3b40      	subs	r3, #64	; 0x40
 8001352:	2201      	movs	r2, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <RCC_EnablePeripheral+0xbc>)
 800135a:	430b      	orrs	r3, r1
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	e013      	b.n	8001388 <RCC_EnablePeripheral+0xac>
        }
        else if((u32)Copy_Peripheral < 128)  /* APB2 REG peripherals */
 8001360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001364:	4613      	mov	r3, r2
 8001366:	2b7f      	cmp	r3, #127	; 0x7f
 8001368:	d80c      	bhi.n	8001384 <RCC_EnablePeripheral+0xa8>
        {
            RCC->APB2ENR |= (1<< ((u32)Copy_Peripheral - 96) );
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <RCC_EnablePeripheral+0xbc>)
 800136c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800136e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001372:	4613      	mov	r3, r2
 8001374:	3b60      	subs	r3, #96	; 0x60
 8001376:	2201      	movs	r2, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <RCC_EnablePeripheral+0xbc>)
 800137e:	430b      	orrs	r3, r1
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	e001      	b.n	8001388 <RCC_EnablePeripheral+0xac>
        }
        else
        {
            Ret_ErrorStatus = RCC_NOK;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
        }
    }

    return Ret_ErrorStatus;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <SYSTICK_SetTicks>:
/* ============================================================================ */
/*                                  STATIC FUNCTIONS                    	    */
/* ============================================================================ */

static SYSTICK_ErrorStatus_t SYSTICK_SetTicks(u32 Copy_Ticks)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    SYSTICK_ErrorStatus_t Ret_ErrorStatus = SYSTICK_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

    if(Copy_Ticks > SYSTICK_MAX_TICKS)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ae:	d301      	bcc.n	80013b4 <SYSTICK_SetTicks+0x18>
    {
        Ret_ErrorStatus = SYSTICK_NOK;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
    }

    if(Ret_ErrorStatus == SYSTICK_OK)
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <SYSTICK_SetTicks+0x24>
    {
        SYSTICK->LOAD = Copy_Ticks;
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SYSTICK_SetTicks+0x34>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6053      	str	r3, [r2, #4]
    }

    return Ret_ErrorStatus;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <SYSTICK_SetTimeMs>:
    return Ret_ErrorStatus;
}


SYSTICK_ErrorStatus_t SYSTICK_SetTimeMs(u32 Copy_Time)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    SYSTICK_ErrorStatus_t Ret_ErrorStatus = SYSTICK_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	74fb      	strb	r3, [r7, #19]
    u32 Local_ClockSpeed;
    u32 Local_LoadTicks;

    if( (SYSTICK->CTRL & SYSTICK_CLKSOURCE_PROCESSOR) == SYSTICK_CLKSOURCE_PROCESSOR )
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <SYSTICK_SetTimeMs+0x4c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d102      	bne.n	80013f2 <SYSTICK_SetTimeMs+0x1e>
    {
        Local_ClockSpeed = SYSTICK_PROCESSOR_CLOCK;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <SYSTICK_SetTimeMs+0x50>)
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e001      	b.n	80013f6 <SYSTICK_SetTimeMs+0x22>
    }
    else
    {
        Local_ClockSpeed = SYSTICK_EXTERNAL_CLOCK;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <SYSTICK_SetTimeMs+0x54>)
 80013f4:	617b      	str	r3, [r7, #20]
    }

//    Local_LoadTicks = Local_ClockSpeed * ((f32)Copy_Time/1000) ;

    Local_LoadTicks = ( (Local_ClockSpeed/1000) * Copy_Time ) - 1 ;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <SYSTICK_SetTimeMs+0x58>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	099b      	lsrs	r3, r3, #6
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	3b01      	subs	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
    

    Ret_ErrorStatus = SYSTICK_SetTicks(Local_LoadTicks);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff ffc6 	bl	800139c <SYSTICK_SetTicks>
 8001410:	4603      	mov	r3, r0
 8001412:	74fb      	strb	r3, [r7, #19]

    return Ret_ErrorStatus;
 8001414:	7cfb      	ldrb	r3, [r7, #19]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010
 8001424:	017d7840 	.word	0x017d7840
 8001428:	002faf08 	.word	0x002faf08
 800142c:	10624dd3 	.word	0x10624dd3

08001430 <SYSTICK_Start>:


SYSTICK_ErrorStatus_t SYSTICK_Start(u8 Copy_Mode)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]

    SYSTICK_ErrorStatus_t Ret_ErrorStatus = SYSTICK_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]

    if(!IS_VALID_MODE(Copy_Mode))
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d004      	beq.n	800144e <SYSTICK_Start+0x1e>
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SYSTICK_Start+0x1e>
    {
        Ret_ErrorStatus = SYSTICK_NOK;
 800144a:	2301      	movs	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
    }

    if(Ret_ErrorStatus == SYSTICK_OK)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d112      	bne.n	800147a <SYSTICK_Start+0x4a>
    {
        /* clear the curr timer value */
        SYSTICK->VAL = 1U;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <SYSTICK_Start+0x58>)
 8001456:	2201      	movs	r2, #1
 8001458:	609a      	str	r2, [r3, #8]

        /* Clear the Interrupt bit then set it according to mode
         if mode is periodic Int bit will be set if not it will stay cleared */
        SYSTICK->CTRL &= ~SYSTICK_INT_MASK;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <SYSTICK_Start+0x58>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SYSTICK_Start+0x58>)
 8001460:	f023 0302 	bic.w	r3, r3, #2
 8001464:	6013      	str	r3, [r2, #0]

        /* Enable the systick timer to start it*/
        SYSTICK->CTRL |= (SYSTICK_TIMER_START | Copy_Mode);
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <SYSTICK_Start+0x58>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	f042 0201 	orr.w	r2, r2, #1
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	4611      	mov	r1, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <SYSTICK_Start+0x58>)
 8001476:	430b      	orrs	r3, r1
 8001478:	6013      	str	r3, [r2, #0]

    }

    return Ret_ErrorStatus;
 800147a:	7bfb      	ldrb	r3, [r7, #15]

}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e010 	.word	0xe000e010

0800148c <SYSTICK_SetCallback>:
	SYSTICK->CTRL = 0;

}

SYSTICK_ErrorStatus_t SYSTICK_SetCallback(systickcbf_t cbf)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    SYSTICK_ErrorStatus_t Ret_ErrorStatus = SYSTICK_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]

    if(cbf == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <SYSTICK_SetCallback+0x16>
    {
        Ret_ErrorStatus = SYSTICK_NULL_PTR;
 800149e:	2302      	movs	r3, #2
 80014a0:	73fb      	strb	r3, [r7, #15]
    }

    if(Ret_ErrorStatus == SYSTICK_OK)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <SYSTICK_SetCallback+0x22>
    {
        G_systickcbf = cbf;
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <SYSTICK_SetCallback+0x30>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
    }

    return Ret_ErrorStatus;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	200000ec 	.word	0x200000ec

080014c0 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    if(G_systickcbf)
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Handler+0x18>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <SysTick_Handler+0x12>
    {
        G_systickcbf();
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <SysTick_Handler+0x18>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4798      	blx	r3
    }
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200000ec 	.word	0x200000ec

080014dc <USART1_IRQHandler>:
/*                              HANDLERS                               */
/* =================================================================== */


void USART1_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
     /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */
	if(UARTs[UART1]->SR & UART_LBD_MASK)
 80014e0:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <USART1_IRQHandler+0x10c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00e      	beq.n	800150c <USART1_IRQHandler+0x30>
	{
		/* Clear LBD Flag */
		UARTs[UART1]->SR &= ~UART_LBD_MASK;
 80014ee:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <USART1_IRQHandler+0x10c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b3c      	ldr	r3, [pc, #240]	; (80015e8 <USART1_IRQHandler+0x10c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fc:	601a      	str	r2, [r3, #0]

		/* Call LBD Interrupt CB function if not NULL*/
		if(LBDCallbacks[UART1])
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <USART1_IRQHandler+0x110>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <USART1_IRQHandler+0x30>
		{
			LBDCallbacks[UART1]();
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <USART1_IRQHandler+0x110>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4798      	blx	r3
		}

	}

	if(UARTs[UART1]->SR & UART_TXE_MASK)
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <USART1_IRQHandler+0x10c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	2b00      	cmp	r3, #0
 8001518:	d02b      	beq.n	8001572 <USART1_IRQHandler+0x96>
	{
		if(TXRequests[UART1].State == BUSY)
 800151a:	4b35      	ldr	r3, [pc, #212]	; (80015f0 <USART1_IRQHandler+0x114>)
 800151c:	7a1b      	ldrb	r3, [r3, #8]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d127      	bne.n	8001572 <USART1_IRQHandler+0x96>
		{
			if(TXRequests[UART1].Buffer.CurrIdx < TXRequests[UART1].Buffer.Length)
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <USART1_IRQHandler+0x114>)
 8001524:	88da      	ldrh	r2, [r3, #6]
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <USART1_IRQHandler+0x114>)
 8001528:	889b      	ldrh	r3, [r3, #4]
 800152a:	429a      	cmp	r2, r3
 800152c:	d20f      	bcs.n	800154e <USART1_IRQHandler+0x72>
			{
				UARTs[UART1]->DR = TXRequests[UART1].Buffer.Data[TXRequests[UART1].Buffer.CurrIdx];
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <USART1_IRQHandler+0x114>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <USART1_IRQHandler+0x114>)
 8001534:	88d2      	ldrh	r2, [r2, #6]
 8001536:	4413      	add	r3, r2
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <USART1_IRQHandler+0x10c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
				TXRequests[UART1].Buffer.CurrIdx++;
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <USART1_IRQHandler+0x114>)
 8001542:	88db      	ldrh	r3, [r3, #6]
 8001544:	3301      	adds	r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <USART1_IRQHandler+0x114>)
 800154a:	80da      	strh	r2, [r3, #6]
 800154c:	e011      	b.n	8001572 <USART1_IRQHandler+0x96>
			}
			else
			{
				TXRequests[UART1].State = READY;
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <USART1_IRQHandler+0x114>)
 8001550:	2200      	movs	r2, #0
 8001552:	721a      	strb	r2, [r3, #8]
				/* DISABLE TXE interrupt */
				UARTs[UART1]->CR1 &= ~UART_TXEIE_MASK;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <USART1_IRQHandler+0x10c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <USART1_IRQHandler+0x10c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001562:	60da      	str	r2, [r3, #12]

                if(TXRequests[UART1].Cb)
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <USART1_IRQHandler+0x114>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <USART1_IRQHandler+0x96>
                {
				    TXRequests[UART1].Cb();
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <USART1_IRQHandler+0x114>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4798      	blx	r3
			}
		}

	}

	if(UARTs[UART1]->SR & UART_RXNE_MASK)
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <USART1_IRQHandler+0x10c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	2b00      	cmp	r3, #0
 800157e:	d031      	beq.n	80015e4 <USART1_IRQHandler+0x108>
	{
		if(RXRequests[UART1].State == BUSY)
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <USART1_IRQHandler+0x118>)
 8001582:	7a1b      	ldrb	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d12d      	bne.n	80015e4 <USART1_IRQHandler+0x108>
		{
			if(RXRequests[UART1].Buffer.CurrIdx < RXRequests[UART1].Buffer.Length)
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <USART1_IRQHandler+0x118>)
 800158a:	88da      	ldrh	r2, [r3, #6]
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <USART1_IRQHandler+0x118>)
 800158e:	889b      	ldrh	r3, [r3, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	d227      	bcs.n	80015e4 <USART1_IRQHandler+0x108>
			{
				RXRequests[UART1].Buffer.Data[RXRequests[UART1].Buffer.CurrIdx] = UARTs[UART1]->DR;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <USART1_IRQHandler+0x10c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <USART1_IRQHandler+0x118>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <USART1_IRQHandler+0x118>)
 80015a0:	88d2      	ldrh	r2, [r2, #6]
 80015a2:	4413      	add	r3, r2
 80015a4:	b2ca      	uxtb	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
				RXRequests[UART1].Buffer.CurrIdx++;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <USART1_IRQHandler+0x118>)
 80015aa:	88db      	ldrh	r3, [r3, #6]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <USART1_IRQHandler+0x118>)
 80015b2:	80da      	strh	r2, [r3, #6]

				if(RXRequests[UART1].Buffer.CurrIdx == RXRequests[UART1].Buffer.Length)
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <USART1_IRQHandler+0x118>)
 80015b6:	88da      	ldrh	r2, [r3, #6]
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <USART1_IRQHandler+0x118>)
 80015ba:	889b      	ldrh	r3, [r3, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d111      	bne.n	80015e4 <USART1_IRQHandler+0x108>
				{
					RXRequests[UART1].State = READY;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <USART1_IRQHandler+0x118>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	721a      	strb	r2, [r3, #8]
					/* DISABLE RXE interrupt */
					UARTs[UART1]->CR1 &= ~UART_RXNEIE_MASK;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <USART1_IRQHandler+0x10c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <USART1_IRQHandler+0x10c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0220 	bic.w	r2, r2, #32
 80015d4:	60da      	str	r2, [r3, #12]

                    if(RXRequests[UART1].Cb)
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <USART1_IRQHandler+0x118>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <USART1_IRQHandler+0x108>
                    {
                        RXRequests[UART1].Cb();
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <USART1_IRQHandler+0x118>)
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	4798      	blx	r3
				}

			}
		}
	}
} 
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000150 	.word	0x20000150
 80015f0:	200000f0 	.word	0x200000f0
 80015f4:	20000120 	.word	0x20000120

080015f8 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */
	if(UARTs[UART2]->SR & UART_LBD_MASK)
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <USART2_IRQHandler+0x10c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00e      	beq.n	8001628 <USART2_IRQHandler+0x30>
	{
		/* Clear LBD Flag */
		UARTs[UART2]->SR &= ~UART_LBD_MASK;
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <USART2_IRQHandler+0x10c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <USART2_IRQHandler+0x10c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001618:	601a      	str	r2, [r3, #0]

		/* Call LBD Interrupt CB function if not NULL*/
		if(LBDCallbacks[UART2])
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <USART2_IRQHandler+0x110>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <USART2_IRQHandler+0x30>
		{
			LBDCallbacks[UART2]();
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <USART2_IRQHandler+0x110>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4798      	blx	r3
		}

	}

	if(UARTs[UART2]->SR & UART_TXE_MASK)
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <USART2_IRQHandler+0x10c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	2b00      	cmp	r3, #0
 8001634:	d02b      	beq.n	800168e <USART2_IRQHandler+0x96>
	{
		if(TXRequests[UART2].State == BUSY)
 8001636:	4b35      	ldr	r3, [pc, #212]	; (800170c <USART2_IRQHandler+0x114>)
 8001638:	7e1b      	ldrb	r3, [r3, #24]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d127      	bne.n	800168e <USART2_IRQHandler+0x96>
		{
			if(TXRequests[UART2].Buffer.CurrIdx < TXRequests[UART2].Buffer.Length)
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <USART2_IRQHandler+0x114>)
 8001640:	8ada      	ldrh	r2, [r3, #22]
 8001642:	4b32      	ldr	r3, [pc, #200]	; (800170c <USART2_IRQHandler+0x114>)
 8001644:	8a9b      	ldrh	r3, [r3, #20]
 8001646:	429a      	cmp	r2, r3
 8001648:	d20f      	bcs.n	800166a <USART2_IRQHandler+0x72>
			{
				UARTs[UART2]->DR = TXRequests[UART2].Buffer.Data[TXRequests[UART2].Buffer.CurrIdx];
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <USART2_IRQHandler+0x114>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <USART2_IRQHandler+0x114>)
 8001650:	8ad2      	ldrh	r2, [r2, #22]
 8001652:	4413      	add	r3, r2
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <USART2_IRQHandler+0x10c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	605a      	str	r2, [r3, #4]
				TXRequests[UART2].Buffer.CurrIdx++;
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <USART2_IRQHandler+0x114>)
 800165e:	8adb      	ldrh	r3, [r3, #22]
 8001660:	3301      	adds	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <USART2_IRQHandler+0x114>)
 8001666:	82da      	strh	r2, [r3, #22]
 8001668:	e011      	b.n	800168e <USART2_IRQHandler+0x96>
			}
			else
			{
				TXRequests[UART2].State = READY;
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <USART2_IRQHandler+0x114>)
 800166c:	2200      	movs	r2, #0
 800166e:	761a      	strb	r2, [r3, #24]
				/* DISABLE TXE interrupt */
				UARTs[UART2]->CR1 &= ~UART_TXEIE_MASK;
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <USART2_IRQHandler+0x10c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <USART2_IRQHandler+0x10c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800167e:	60da      	str	r2, [r3, #12]

                if(TXRequests[UART2].Cb)
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <USART2_IRQHandler+0x114>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <USART2_IRQHandler+0x96>
                {
				    TXRequests[UART2].Cb();
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <USART2_IRQHandler+0x114>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	4798      	blx	r3
			}
		}

	}

	if(UARTs[UART2]->SR & UART_RXNE_MASK)
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <USART2_IRQHandler+0x10c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d031      	beq.n	8001700 <USART2_IRQHandler+0x108>
	{
		if(RXRequests[UART2].State == BUSY)
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <USART2_IRQHandler+0x118>)
 800169e:	7e1b      	ldrb	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d12d      	bne.n	8001700 <USART2_IRQHandler+0x108>
		{
			if(RXRequests[UART2].Buffer.CurrIdx < RXRequests[UART2].Buffer.Length)
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <USART2_IRQHandler+0x118>)
 80016a6:	8ada      	ldrh	r2, [r3, #22]
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <USART2_IRQHandler+0x118>)
 80016aa:	8a9b      	ldrh	r3, [r3, #20]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d227      	bcs.n	8001700 <USART2_IRQHandler+0x108>
			{
				RXRequests[UART2].Buffer.Data[RXRequests[UART2].Buffer.CurrIdx] = UARTs[UART2]->DR;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <USART2_IRQHandler+0x10c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <USART2_IRQHandler+0x118>)
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <USART2_IRQHandler+0x118>)
 80016bc:	8ad2      	ldrh	r2, [r2, #22]
 80016be:	4413      	add	r3, r2
 80016c0:	b2ca      	uxtb	r2, r1
 80016c2:	701a      	strb	r2, [r3, #0]
				RXRequests[UART2].Buffer.CurrIdx++;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <USART2_IRQHandler+0x118>)
 80016c6:	8adb      	ldrh	r3, [r3, #22]
 80016c8:	3301      	adds	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <USART2_IRQHandler+0x118>)
 80016ce:	82da      	strh	r2, [r3, #22]

				if(RXRequests[UART2].Buffer.CurrIdx == RXRequests[UART2].Buffer.Length)
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <USART2_IRQHandler+0x118>)
 80016d2:	8ada      	ldrh	r2, [r3, #22]
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <USART2_IRQHandler+0x118>)
 80016d6:	8a9b      	ldrh	r3, [r3, #20]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d111      	bne.n	8001700 <USART2_IRQHandler+0x108>
				{
					RXRequests[UART2].State = READY;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <USART2_IRQHandler+0x118>)
 80016de:	2200      	movs	r2, #0
 80016e0:	761a      	strb	r2, [r3, #24]
					/* DISABLE RXE interrupt */
					UARTs[UART2]->CR1 &= ~UART_RXNEIE_MASK;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <USART2_IRQHandler+0x10c>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <USART2_IRQHandler+0x10c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f022 0220 	bic.w	r2, r2, #32
 80016f0:	60da      	str	r2, [r3, #12]

                    if(RXRequests[UART2].Cb)
 80016f2:	4b07      	ldr	r3, [pc, #28]	; (8001710 <USART2_IRQHandler+0x118>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <USART2_IRQHandler+0x108>
                    {
                        RXRequests[UART2].Cb();
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <USART2_IRQHandler+0x118>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4798      	blx	r3

			}
		}
	}

} 
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000150 	.word	0x20000150
 800170c:	200000f0 	.word	0x200000f0
 8001710:	20000120 	.word	0x20000120

08001714 <USART6_IRQHandler>:


void USART6_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    /* NOTE: If a break is detected and interrupt happens, the TXE flag may be risen so
        i choose to check for either the LIN break detection interrupt or the TXE and RXNE interrupt
        becuase if i don't, everytime LBD interrupt happens the TXE will be handled if its flag is set
        which will cause problems */
    if(UARTs[UART6]->SR & UART_LBD_MASK)
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <USART6_IRQHandler+0x114>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00e      	beq.n	8001744 <USART6_IRQHandler+0x30>
    {
        /* Clear LBD Flag */
        UARTs[UART6]->SR &= ~UART_LBD_MASK;
 8001726:	4b40      	ldr	r3, [pc, #256]	; (8001828 <USART6_IRQHandler+0x114>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <USART6_IRQHandler+0x114>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001734:	601a      	str	r2, [r3, #0]

        /* Call LBD Interrupt CB function if not NULL*/
        if(LBDCallbacks[UART6])
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <USART6_IRQHandler+0x118>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d002      	beq.n	8001744 <USART6_IRQHandler+0x30>
        {
            LBDCallbacks[UART6]();
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <USART6_IRQHandler+0x118>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	4798      	blx	r3
        }

    }

    if(UARTs[UART6]->SR & UART_TXE_MASK)
 8001744:	4b38      	ldr	r3, [pc, #224]	; (8001828 <USART6_IRQHandler+0x114>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	2b00      	cmp	r3, #0
 8001750:	d02d      	beq.n	80017ae <USART6_IRQHandler+0x9a>
    {
        if(TXRequests[UART6].State == BUSY)
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <USART6_IRQHandler+0x11c>)
 8001754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001758:	2b01      	cmp	r3, #1
 800175a:	d128      	bne.n	80017ae <USART6_IRQHandler+0x9a>
        {
            if(TXRequests[UART6].Buffer.CurrIdx < TXRequests[UART6].Buffer.Length)
 800175c:	4b34      	ldr	r3, [pc, #208]	; (8001830 <USART6_IRQHandler+0x11c>)
 800175e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <USART6_IRQHandler+0x11c>)
 8001762:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001764:	429a      	cmp	r2, r3
 8001766:	d20f      	bcs.n	8001788 <USART6_IRQHandler+0x74>
            {
                UARTs[UART6]->DR = TXRequests[UART6].Buffer.Data[TXRequests[UART6].Buffer.CurrIdx];
 8001768:	4b31      	ldr	r3, [pc, #196]	; (8001830 <USART6_IRQHandler+0x11c>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a30      	ldr	r2, [pc, #192]	; (8001830 <USART6_IRQHandler+0x11c>)
 800176e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8001770:	4413      	add	r3, r2
 8001772:	781a      	ldrb	r2, [r3, #0]
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <USART6_IRQHandler+0x114>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	605a      	str	r2, [r3, #4]
                TXRequests[UART6].Buffer.CurrIdx++;
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <USART6_IRQHandler+0x11c>)
 800177c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800177e:	3301      	adds	r3, #1
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <USART6_IRQHandler+0x11c>)
 8001784:	84da      	strh	r2, [r3, #38]	; 0x26
 8001786:	e012      	b.n	80017ae <USART6_IRQHandler+0x9a>
            }
            else
            {
                TXRequests[UART6].State = READY;
 8001788:	4b29      	ldr	r3, [pc, #164]	; (8001830 <USART6_IRQHandler+0x11c>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                /* DISABLE TXE interrupt */
                UARTs[UART6]->CR1 &= ~UART_TXEIE_MASK;
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <USART6_IRQHandler+0x114>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <USART6_IRQHandler+0x114>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800179e:	60da      	str	r2, [r3, #12]

                if(TXRequests[UART6].Cb)
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <USART6_IRQHandler+0x11c>)
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <USART6_IRQHandler+0x9a>
                {
				    TXRequests[UART6].Cb();
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <USART6_IRQHandler+0x11c>)
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	4798      	blx	r3
            }
        }

    }

    if(UARTs[UART6]->SR & UART_RXNE_MASK)
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <USART6_IRQHandler+0x114>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d033      	beq.n	8001824 <USART6_IRQHandler+0x110>
    {
        if(RXRequests[UART6].State == BUSY)
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <USART6_IRQHandler+0x120>)
 80017be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d12e      	bne.n	8001824 <USART6_IRQHandler+0x110>
        {
            if(RXRequests[UART6].Buffer.CurrIdx < RXRequests[UART6].Buffer.Length)
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <USART6_IRQHandler+0x120>)
 80017c8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <USART6_IRQHandler+0x120>)
 80017cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d228      	bcs.n	8001824 <USART6_IRQHandler+0x110>
            {
                RXRequests[UART6].Buffer.Data[RXRequests[UART6].Buffer.CurrIdx] = UARTs[UART6]->DR;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <USART6_IRQHandler+0x114>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <USART6_IRQHandler+0x120>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a15      	ldr	r2, [pc, #84]	; (8001834 <USART6_IRQHandler+0x120>)
 80017de:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80017e0:	4413      	add	r3, r2
 80017e2:	b2ca      	uxtb	r2, r1
 80017e4:	701a      	strb	r2, [r3, #0]
                RXRequests[UART6].Buffer.CurrIdx++;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <USART6_IRQHandler+0x120>)
 80017e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017ea:	3301      	adds	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <USART6_IRQHandler+0x120>)
 80017f0:	84da      	strh	r2, [r3, #38]	; 0x26

                if(RXRequests[UART6].Buffer.CurrIdx == RXRequests[UART6].Buffer.Length)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <USART6_IRQHandler+0x120>)
 80017f4:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <USART6_IRQHandler+0x120>)
 80017f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d112      	bne.n	8001824 <USART6_IRQHandler+0x110>
                {
                    RXRequests[UART6].State = READY;
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <USART6_IRQHandler+0x120>)
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                    /* DISABLE RXE interrupt */
                    UARTs[UART6]->CR1 &= ~UART_RXNEIE_MASK;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <USART6_IRQHandler+0x114>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <USART6_IRQHandler+0x114>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f022 0220 	bic.w	r2, r2, #32
 8001814:	60da      	str	r2, [r3, #12]

                    if(RXRequests[UART6].Cb)
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <USART6_IRQHandler+0x120>)
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <USART6_IRQHandler+0x110>
                    {
                        RXRequests[UART6].Cb();
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <USART6_IRQHandler+0x120>)
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	4798      	blx	r3
                }

            }
        }
    }
} 
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	20000150 	.word	0x20000150
 8001830:	200000f0 	.word	0x200000f0
 8001834:	20000120 	.word	0x20000120

08001838 <SCHED_IncTicksPending>:
/* ============================================================================ */
/*                                  STATIC FUNCTIONS                           	*/
/* ============================================================================ */

static void SCHED_IncTicksPending(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
    G_SchedTicksPending++;
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <SCHED_IncTicksPending+0x18>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3301      	adds	r3, #1
 8001842:	4a03      	ldr	r2, [pc, #12]	; (8001850 <SCHED_IncTicksPending+0x18>)
 8001844:	6013      	str	r3, [r2, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	2000000c 	.word	0x2000000c

08001854 <SCHED_Scheduler>:

static void SCHED_Scheduler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
    u16 currRun;

    for(currRun =0; currRun < _NUM_RUNNABLE; currRun++)
 800185a:	2300      	movs	r3, #0
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	e02b      	b.n	80018b8 <SCHED_Scheduler+0x64>
    {
        if( (RunnablesInfo[currRun].runnable->cb) && (RunnablesInfo[currRun].remainingTimeMs == 0) )
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <SCHED_Scheduler+0x74>)
 8001864:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d016      	beq.n	800189c <SCHED_Scheduler+0x48>
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <SCHED_Scheduler+0x74>)
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10f      	bne.n	800189c <SCHED_Scheduler+0x48>
        {
            RunnablesInfo[currRun].runnable->cb();
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <SCHED_Scheduler+0x74>)
 8001880:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	4798      	blx	r3
            RunnablesInfo[currRun].remainingTimeMs = RunnablesInfo[currRun].runnable->periodicityMs;
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <SCHED_Scheduler+0x74>)
 800188c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	6852      	ldr	r2, [r2, #4]
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <SCHED_Scheduler+0x74>)
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	605a      	str	r2, [r3, #4]
        }

        RunnablesInfo[currRun].remainingTimeMs -= SCHED_TICK_PERIOD_MS;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <SCHED_Scheduler+0x74>)
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	3a02      	subs	r2, #2
 80018aa:	4907      	ldr	r1, [pc, #28]	; (80018c8 <SCHED_Scheduler+0x74>)
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	605a      	str	r2, [r3, #4]
    for(currRun =0; currRun < _NUM_RUNNABLE; currRun++)
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	3301      	adds	r3, #1
 80018b6:	80fb      	strh	r3, [r7, #6]
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d9d0      	bls.n	8001860 <SCHED_Scheduler+0xc>
    }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000015c 	.word	0x2000015c

080018cc <SCHED_Init>:
/*                                  IMPLEMENTATION                           	*/
/* ============================================================================ */


void SCHED_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
    u16 currRun;

    for(currRun = 0; currRun < _NUM_RUNNABLE; currRun++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	80fb      	strh	r3, [r7, #6]
 80018d6:	e017      	b.n	8001908 <SCHED_Init+0x3c>
    {
        RunnablesInfo[currRun].runnable = &Runnables[currRun];
 80018d8:	88fa      	ldrh	r2, [r7, #6]
 80018da:	88f9      	ldrh	r1, [r7, #6]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <SCHED_Init+0x58>)
 80018e6:	4413      	add	r3, r2
 80018e8:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <SCHED_Init+0x5c>)
 80018ea:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        RunnablesInfo[currRun].remainingTimeMs = RunnablesInfo[currRun].runnable->delayMs;
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <SCHED_Init+0x5c>)
 80018f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	68d2      	ldr	r2, [r2, #12]
 80018fa:	490b      	ldr	r1, [pc, #44]	; (8001928 <SCHED_Init+0x5c>)
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	605a      	str	r2, [r3, #4]
    for(currRun = 0; currRun < _NUM_RUNNABLE; currRun++)
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	3301      	adds	r3, #1
 8001906:	80fb      	strh	r3, [r7, #6]
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d9e4      	bls.n	80018d8 <SCHED_Init+0xc>
    }

    SYSTICK_SetTimeMs(SCHED_TICK_PERIOD_MS);
 800190e:	2002      	movs	r0, #2
 8001910:	f7ff fd60 	bl	80013d4 <SYSTICK_SetTimeMs>
    SYSTICK_SetCallback(SCHED_IncTicksPending);
 8001914:	4805      	ldr	r0, [pc, #20]	; (800192c <SCHED_Init+0x60>)
 8001916:	f7ff fdb9 	bl	800148c <SYSTICK_SetCallback>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000010 	.word	0x20000010
 8001928:	2000015c 	.word	0x2000015c
 800192c:	08001839 	.word	0x08001839

08001930 <SCHED_Start>:

void SCHED_Start(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
    SYSTICK_Start(SYSTICK_MODE_PERIODIC);
 8001934:	2002      	movs	r0, #2
 8001936:	f7ff fd7b 	bl	8001430 <SYSTICK_Start>

    while(1)
    {
        if(G_SchedTicksPending != 0)
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <SCHED_Start+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0fb      	beq.n	800193a <SCHED_Start+0xa>
        {
            G_SchedTicksPending--;
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SCHED_Start+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3b01      	subs	r3, #1
 8001948:	4a02      	ldr	r2, [pc, #8]	; (8001954 <SCHED_Start+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
            SCHED_Scheduler();
 800194c:	f7ff ff82 	bl	8001854 <SCHED_Scheduler>
        if(G_SchedTicksPending != 0)
 8001950:	e7f3      	b.n	800193a <SCHED_Start+0xa>
 8001952:	bf00      	nop
 8001954:	2000000c 	.word	0x2000000c

08001958 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800195a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800195c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <LoopForever+0x6>)
  ldr r1, =_edata
 8001962:	490d      	ldr	r1, [pc, #52]	; (8001998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <LoopForever+0xe>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001968:	e002      	b.n	8001970 <LoopCopyDataInit>

0800196a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800196c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196e:	3304      	adds	r3, #4

08001970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001974:	d3f9      	bcc.n	800196a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001978:	4c0a      	ldr	r4, [pc, #40]	; (80019a4 <LoopForever+0x16>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800197c:	e001      	b.n	8001982 <LoopFillZerobss>

0800197e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001980:	3204      	adds	r2, #4

08001982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001984:	d3fb      	bcc.n	800197e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001986:	f000 f811 	bl	80019ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198a:	f7fe fc23 	bl	80001d4 <main>

0800198e <LoopForever>:

LoopForever:
  b LoopForever
 800198e:	e7fe      	b.n	800198e <LoopForever>
  ldr   r0, =_estack
 8001990:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800199c:	08001a84 	.word	0x08001a84
  ldr r2, =_sbss
 80019a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80019a4:	2000017c 	.word	0x2000017c

080019a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC_IRQHandler>
	...

080019ac <__libc_init_array>:
 80019ac:	b570      	push	{r4, r5, r6, lr}
 80019ae:	4d0d      	ldr	r5, [pc, #52]	; (80019e4 <__libc_init_array+0x38>)
 80019b0:	4c0d      	ldr	r4, [pc, #52]	; (80019e8 <__libc_init_array+0x3c>)
 80019b2:	1b64      	subs	r4, r4, r5
 80019b4:	10a4      	asrs	r4, r4, #2
 80019b6:	2600      	movs	r6, #0
 80019b8:	42a6      	cmp	r6, r4
 80019ba:	d109      	bne.n	80019d0 <__libc_init_array+0x24>
 80019bc:	4d0b      	ldr	r5, [pc, #44]	; (80019ec <__libc_init_array+0x40>)
 80019be:	4c0c      	ldr	r4, [pc, #48]	; (80019f0 <__libc_init_array+0x44>)
 80019c0:	f000 f818 	bl	80019f4 <_init>
 80019c4:	1b64      	subs	r4, r4, r5
 80019c6:	10a4      	asrs	r4, r4, #2
 80019c8:	2600      	movs	r6, #0
 80019ca:	42a6      	cmp	r6, r4
 80019cc:	d105      	bne.n	80019da <__libc_init_array+0x2e>
 80019ce:	bd70      	pop	{r4, r5, r6, pc}
 80019d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019d4:	4798      	blx	r3
 80019d6:	3601      	adds	r6, #1
 80019d8:	e7ee      	b.n	80019b8 <__libc_init_array+0xc>
 80019da:	f855 3b04 	ldr.w	r3, [r5], #4
 80019de:	4798      	blx	r3
 80019e0:	3601      	adds	r6, #1
 80019e2:	e7f2      	b.n	80019ca <__libc_init_array+0x1e>
 80019e4:	08001a7c 	.word	0x08001a7c
 80019e8:	08001a7c 	.word	0x08001a7c
 80019ec:	08001a7c 	.word	0x08001a7c
 80019f0:	08001a80 	.word	0x08001a80

080019f4 <_init>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	bf00      	nop
 80019f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fa:	bc08      	pop	{r3}
 80019fc:	469e      	mov	lr, r3
 80019fe:	4770      	bx	lr

08001a00 <_fini>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	bf00      	nop
 8001a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a06:	bc08      	pop	{r3}
 8001a08:	469e      	mov	lr, r3
 8001a0a:	4770      	bx	lr
